{"version":3,"sources":["logo.svg","img/logo_viade_es3a.jpg","MainPage/NavBar/NavBar.js","MainPage/Panel/CreateRoute/CreateRouteStyle.js","MainPage/Panel/CreateRoute/UploadRouteToPod.js","MainPage/Panel/CreateRoute/CreateRoute.js","Loading.js","MainPage/Panel/Map/Map.js","MainPage/Panel/LoadRoute/LoadRoute.js","MainPage/Panel/AddRoute/AddRoute.js","MainPage/Panel/AddRoute/AddRoutePanel.js","MainPage/Panel/LoadRoute/Slider.js","MainPage/Panel/LoadRoute/LoadRoutePanel.js","MainPage/Panel/CreateRoute/CreateRoutePanel.js","MainPage/Panel/Welcome/Welcome.js","MainPage/Panel/Welcome/WelcomePanel.js","MainPage/Panel/Friends/Friends.js","MainPage/Panel/Friends/FriendsPanel.js","img/profile.svg","MainPage/Panel/Profile/Profile.js","MainPage/Panel/Profile/ProfilePanel.js","MainPage/Panel/ShareRoute/ShareRoute.js","MainPage/Panel/ShareRoute/ShareRoutePanel.js","MainPage/Panel/SharedRoutes/SharedRoutes.js","MainPage/Panel/SharedRoutes/SharedRoutesPanel.js","MainPage/Panel/Notifications/Notifications.js","MainPage/Panel/Notifications/NotificationsPanel.js","MainPage/Panel/Panel.js","MainPage/Main-page.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","bg","variant","expand","fixed","className","Brand","as","Link","to","data-testid","src","require","alt","width","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","Item","href","NavItem","pullRight","MapStyle","styled","Map","UploadRouteToPod","this","state","fileName","route","name","description","images","videos","auth","currentSession","session","user","webId","folder","split","fileClien","fileClient","solidAuth","enableLogging","itemExists","createFolder","destination","k","createFile","length","routed","JSON","stringify","toast","info","position","POSITION","BOTTOM_LEFT","sleep","window","createRouteComponent","reloa","document","getElementById","value","error","Loading","props","style","top","right","bottom","left","zIndex","backgroundColor","display","loading","justifyContent","alignSelf","visible","type","height","color","ms","a","Promise","resolve","setTimeout","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","CreateRoute","styles","wrapper","map","flex","clickOnMap","e","markers","push","lat","latlng","lng","setState","drawLine","saveName","n","saveDescription","saveRoute","prevState","polylines","i","LatLng","polyline","Polyline","uploadRoute","toGeoJSON","navigator","geolocation","getCurrentPosition","center","coords","latitude","longitude","points","getLocation","Fragment","for","placeholder","onChange","rows","accept","multiple","saveImages","target","files","saveVideos","onClick","clearAl","zoom","TileLayer","url","idx","Marker","key","positions","React","Component","geojsonMarkerOptions","radius","fillColor","weight","opacity","fillOpacity","pointToLayer","feature","circleMarker","ShowMap","geoj","mapsComponent","geoJsonLayer","createRef","centers","zooms","geojs","GeoJSON","toString","data","updateMap","num","parseR","parse","xmlDoc","DOMParser","parseFromString","gpx","kml","firstPoint1","zoomUp","undefined","geometry","coordinates","features","defaultProps","urlfol","Upload","setFile","file","filename","class","aria-describedby","required","Data","useWebId","useState","setError","setName","setDescription","image","setImage","video","setVideo","setLoading","role","photo","fileList","nameValue","fileURl","toLowerCase","putFile","AddRoute","LeftPanel","RightPanel","AddRoutePanel","properties","infiniteLoop","showThumbs","autoPlay","transitionTime","stopOnHover","useKeyboardArrows","Slider","controls","urlRutas","showRoute","urlCarptetaRuta","readFolder","readFile","algo","loadFile","result","setSelected","folderDesc","selected","autoClose","location","reload","deleteFolder","setFolders","folders","LoadRoute","showResults","setShowResults","useEffect","loadRoutes","urlArchivo","arrayUrl","nombre","join","loadRoute","editRoute","deleteRoute","LoadRoutePanel","CreateRoutePanel","AccordionWelcome","panelIndex","setPanelIndex","CustomToggle","children","eventKey","customOnClick","useAccordionToggle","customClass","Header","Accordion","Card","Body","WhatIsViade","defaultActiveKey","Welcome","WelcomePanel","default","isWebIdValid","friendWebId","fc","FileClient","login","op","client","friendAlreadyAdded","friends","String","localeCompare","addFriend","userWebId","knows","add","deleteFriend","friend","replace","delete","Name","data-testId","Friends","Value","List","padding-inline-start","web","FriendsPanel","_extends","Object","assign","arguments","source","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","stroke","fill","fillRule","_ref","svgRef","viewBox","ref","ForwardRef","forwardRef","routes","Profile","useLDflexList","RoutesLength","direction","onError","console","log","statusText","ProfilePanel","cont","rut","ense√±aAmigos","target2","urlTarget","urlTargetNotifications","acl","userToAcl","includes","substring","content","conta","nuevo","nuevo2","userso","postFile","fri","checked","getAttribute","OneFriend","coll","getElementsByClassName","addEventListener","classList","toggle","nextElementSibling","share","ShareRoutePanel","f","otro","deleteFile","SharedRoutes","SharedRoutesPanel","Notifications","userShare","who","Toast","closeButton","NotificationsPanel","div","exact","path","component","Panel","checkAppPermissions","userAppPermissions","appPermissions","every","permission","checkPermissions","errorMessage","AppPermission","userApp","permissions","AccessControlList","MODES","APPEND","READ","WRITE","CONTROL","TOP_CENTER","closeOnClick","folderP","folderI","folderN","existeP","existeI","MainPage","creates","AppWrapper","DemoWrapper","HeaderWrapper","section","Headline","h1","Title","SolidImg","Init","App","LoggedOut","callbackUri","origin","LoggedIn","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02325f9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.52b12b95.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_viade_es3a.b4ce7fd4.jpg\";","import React from \"react\";\nimport \"./NavBar.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navbar, Nav, NavItem, NavDropdown } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { LogoutButton } from \"@inrupt/solid-react-components\";\n\n// Iconos\nimport BackupOutlinedIcon from \"@material-ui/icons/BackupOutlined\";\nimport RoomOutlinedIcon from \"@material-ui/icons/RoomOutlined\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\nimport PeopleAltOutlinedIcon from \"@material-ui/icons/PeopleAltOutlined\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport NotificationsActiveOutlinedIcon from \"@material-ui/icons/NotificationsActiveOutlined\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport CreateOutlinedIcon from \"@material-ui/icons/CreateOutlined\";\nimport MapOutlinedIcon from \"@material-ui/icons/MapOutlined\";\n\n\nconst NavBar = () => {\n  //git check const webId = useWebId();\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"navBar\">\n      <Navbar.Brand as={Link} to=\"/viade_es3a\" className=\"logo\" data-testid=\"logo\">\n        <img src={require(\"../../img/logo_viade_es3a.jpg\")} alt=\"React logo\" width=\"122\" />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n\n          <div className=\"opcionYLogo\">\n            <BackupOutlinedIcon className=\"icon\" data-testid=\"iconRoutes\" />\n            <NavDropdown title=\"Upload route\" className=\"dropdown\" id=\"dropdownItemL\" data-testid=\"dropdownItemRoutes\">\n              <NavDropdown.Item href=\"#/addRoute\" className=\"opcionYLogo\">\n                <MapOutlinedIcon className=\"icon\" data-testid=\"iconAddRoute\" />\n                <Nav.Link as={Link} to=\"/addRoute\" className=\"optionL\" data-testid=\"add\">Add Route</Nav.Link>\n              </NavDropdown.Item>\n              <NavDropdown.Item href=\"#/createRoute\" className=\"opcionYLogo\">\n                <CreateOutlinedIcon className=\"icon\" data-testid=\"iconCreateRoute\" />\n                <Nav.Link as={Link} to=\"/createRoute\" className=\"optionL\" data-testid=\"share\">Create a route</Nav.Link>\n              </NavDropdown.Item>\n            </NavDropdown>\n          </div>\n\n          <NavItem href=\"/loadRoute\" className=\"opcionYLogo\">\n            <RoomOutlinedIcon className=\"icon\" data-testid=\"iconMyRoutes\" />\n            <Nav.Link as={Link} to=\"/loadRoute\" className=\"optionL\" data-testid=\"load\">My routes</Nav.Link>\n          </NavItem>\n\n          <div className=\"opcionYLogo\">\n            <ShareIcon className=\"icon\" data-testid=\"iconFriends\" />\n            <NavDropdown title=\"Share\" className=\"dropdown\" id=\"dropdownItemL\" data-testid=\"dropdownItemFriends\">\n              <NavDropdown.Item href=\"#/shareRoute\" className=\"opcionYLogo\">\n                <ShareIcon className=\"icon\" data-testid=\"iconShareRoutes\" />\n                <Nav.Link as={Link} to=\"/shareRoute\" className=\"optionL\" data-testid=\"share\">Share routes</Nav.Link>\n              </NavDropdown.Item>\n              <NavDropdown.Item href=\"#/SharedRoutes\" className=\"opcionYLogo\">\n                <PeopleAltOutlinedIcon className=\"icon\" data-testid=\"iconFriendsRoutes\" />\n                <Nav.Link as={Link} to=\"/SharedRoutes\" className=\"optionL\" data-testid=\"friendsRoutes\">Friend's Routes</Nav.Link>\n              </NavDropdown.Item>\n            </NavDropdown>\n          </div>\n\n          <NavItem href=\"/friends\" className=\"opcionYLogo\">\n            <PeopleAltOutlinedIcon className=\"icon\" data-testid=\"iconMyFriends\" />\n            <Nav.Link as={Link} to=\"/friends\" className=\"optionL\" data-testid=\"friends\">My friends</Nav.Link>\n          </NavItem>\n\n          <NavItem href=\"/profile\" className=\"opcionYLogo\">\n            <AccountCircleOutlinedIcon className=\"icon\" data-testid=\"iconProfile\" />\n            <Nav.Link as={Link} to=\"/profile\" className=\"optionL\" data-testid=\"profile\">Profile</Nav.Link>\n          </NavItem>\n        </Nav>\n\n        <Nav pullRight>\n\n          <NavItem href=\"/notifications\" className=\"opcionYLogo\">\n            <Link to=\"/notifications\"><NotificationsActiveOutlinedIcon className=\"icon\" data-testid=\"notifications\" /></Link>\n          </NavItem>\n          <NavItem href=\"/logout\" className=\"opcionYLogo\">\n            <ExitToAppOutlinedIcon className=\"icon\" data-testid=\"iconLogout\" />\n            <LogoutButton data-testid=\"logout\" className=\"logout\" data-testid=\"logout\" />\n          </NavItem>\n\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import styled from \"styled-components\";\nimport { Map } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nexport const MapStyle = styled(Map)`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n  `;","import React from \"react\";\nimport auth from \"solid-auth-client\";\nimport fileClient from \"solid-file-client\";\nimport * as solidAuth from \"solid-auth-client\";\nimport { CreateRoute, recarga, sleep } from \"./CreateRoute\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SelectInput from \"@material-ui/core/Select/SelectInput\";\n\nclass UploadRouteToPod {\n\n    constructor() {\n        this.state = {\n            fileName: \"\",\n        };\n    }\n\n    async uploadRoute(route, name, description, images, videos) {\n        let session = await auth.currentSession();\n\n        if (session) {\n            var user = `${session.webId}`;\n            var folder = (user+\"\").split(\"profile/card#me\")[0] + \"/private/routes3a\";\n            var fileClien = new fileClient(solidAuth, { enableLogging: true });\n\n            var existe = await fileClien.itemExists(folder);\n\n            if (!existe) {\n                await fileClien.createFolder(folder);\n            }\n\n            var fileList = [];\n            //Name\n            var destination = folder + \"/\" + name + \"/\";\n\n            existe = await fileClien.itemExists(destination);\n\n            if (!existe) {\n                var k = 0;\n                await fileClien.createFolder(destination);\n                var user = await auth.currentSession();\n\n                let content = \"@prefix : <#>.\\n\" +\n                    \"@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n\" +\n                    \"@prefix M: <./>.\\n\" +\n                    \"@prefix c: </profile/card#>.\\n\" +\n\n                    \":ControlReadWrite\\n\" +\n                    \"a n0:Authorization;\\n\" +\n                    \"n0:accessTo M:;\\n\" +\n                    \"n0:agent c:me;\\n\" +\n                    \"n0:default M:;\\n\" +\n                    \"n0:mode n0:Control, n0:Read, n0:Write.\\n\" +\n                    \":Read a n0:Authorization; n0:accessTo M:; n0:default M:; n0:mode n0:Read.\";\n\n                await fileClien.createFile(destination + \"/.acl\", content, \"text/turtle\");\n\n                //Description\n                await fileClien.createFile(destination + \"/\" + \"description\", description, \"text/plain\");\n\n                //Imagen\n                for (k = 0; images !== null && k < images.length; k++) {\n                    await fileClien.createFile(destination + \"/\" + \"photo\" + \"/img\" + (k + 1), images[k], \"img\");\n                }\n\n                //Videos\n                for (k = 0; videos !== null && k < videos.length; k++) {\n                    await fileClien.createFile(destination + \"/\" + \"video\" + \"/vid\" + (k + 1), videos[k], \"video\");\n                }\n\n                //Route\n                var routed = JSON.stringify(route);\n                await fileClien.createFile(destination + \"/\" + name + \".geojson\", routed, \"text/json\");\n\n                \n                toast.info(\"Your route has been added to the pod!!\", {\n                    position: toast.POSITION.BOTTOM_LEFT\n                } );\n\n                await sleep(5000);\n                recarga();\n                document.getElementById(\"name\").value = \"\";\n                document.getElementById(\"description\").value = \"\";\n                document.getElementById(\"photo\").value = null;\n                document.getElementById(\"video\").value = null;\n\n            } else {\n                toast.error(\"Route title already used, use another title\", {\n                    position: toast.POSITION.BOTTOM_LEFT\n                } );\n            }\n\n        }\n\n\n    }\n\n}\n\nexport default UploadRouteToPod = new UploadRouteToPod();","import React from \"react\";\nimport DocumentTitle from \"react-document-title\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport L from \"leaflet\";\nimport { TileLayer, Marker, Polyline } from \"react-leaflet\";\nimport { MapStyle } from \"./CreateRouteStyle\";\nimport { useWebId } from \"@solid/react\";\nimport ReactDOM from \"react-dom\";\nimport UploadRouteToPod from \"./UploadRouteToPod\";\nimport { Loading } from \"../../../Loading\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\n\nclass CreateRoute extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      markers: [],\n      name: \"\",\n      description: \"\",\n      images: [],\n      videos: [],\n      loading: false\n    };\n    window.createRouteComponent = this;\n  }\n\n  styles = {\n    wrapper: {\n      width: \"70vw\",\n      height: \"100vh\",\n      className: \"rightPanel_mapa\",\n      display: \"flex\"\n    },\n    map: {\n      flex: 1\n    }\n  };\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.setState({\n          center: {\n            lat: position.coords.latitude, lng: position.coords.longitude\n          }\n        });\n      },\n        (error) => {\n          this.setState({\n            center: { lat: 43.38, lng: -5.0 }\n          });\n        });\n    }\n  }\n\n  clickOnMap = (e) => {\n    const { markers } = this.state;\n    markers.push({ lat: e.latlng.lat, lng: e.latlng.lng });\n    this.setState({ markers });\n    this.drawLine();\n  }\n\n  drawLine() {\n    let points = [];\n    for (let i = 0; i < this.state.markers.length; i++) {\n      points.push({ lat: this.state.markers[i].lat, lng: this.state.markers[i].lng });\n    }\n    return points;\n  }\n\n  clearAl() {\n    window.createRouteComponent.setState({ markers: [] });\n  }\n\n  reloa() {\n    window.createRouteComponent.setState({\n      markers: [],\n      name: \"\",\n      description: \"\",\n      images: [],\n      videos: []\n    });\n  }\n\n  //Update data\n  saveName = (n) => {\n    var { name } = this.state;\n    name = document.getElementById(\"name\").value;\n    this.setState({ name });\n  }\n\n  saveDescription = (n) => {\n    var description = this.state;\n    description = document.getElementById(\"description\").value;\n    this.setState({ description });\n  }\n\n  saveImages(images) {\n    for (let i = 0; i < images.length; i++) {\n      this.state.images.push(images[i]);\n    }\n  }\n\n  saveVideos(videos) {\n    for (let i = 0; i < videos.length; i++) {\n      this.state.videos.push(videos[i]);\n    }\n  }\n\n  saveRoute = async () => {\n    var { name } = this.state;\n    var { description } = this.state;\n    const { markers } = this.state;\n    var { images } = this.state;\n    var { videos } = this.state;\n\n    if (name === \"\") {\n      toast.error(\"Name is empty! Please, fill something to save the route\", {\n        position: toast.POSITION.BOTTOM_LEFT\n      } );\n    } else if (markers.length <= 1) {\n      toast.error(\"There is not a route created. Please, click on the map to draw one\", {\n        position: toast.POSITION.BOTTOM_LEFT\n      } );\n    } else {\n\n      this.setState(prevState => ({\n        ...prevState,\n        loading: true\n      }));\n      var polylines = [];\n      for (let i = 0; i < markers.length; i++) {\n        polylines.push(new L.LatLng(markers[i].lat, markers[i].lng));\n      }\n      var polyline = new L.Polyline(polylines);\n\n      await UploadRouteToPod.uploadRoute(polyline.toGeoJSON(), name, description, images, videos);\n      this.setState(prevState => ({\n        ...prevState,\n        loading: false\n      }));\n\n    }\n  }\n\n  render() {\n    this.getLocation();\n    return (\n\n      <React.Fragment>\n        <Loading loading={this.state.loading} />\n        <DocumentTitle title=\"Create route\">\n          <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n              <nav className=\"leftPanel_leftPart\">\n                <h2 className=\"h2\">Create a route</h2>\n                <br></br>\n                <div className=\"form-group\">\n                  <label for=\"exampleFormControlInput1\" className=\"labelName\" data-testid=\"name\">Name:</label>\n                  <input type=\"text\" className=\"form-control\" id=\"name\" data-testid=\"inputName\" placeholder=\"Route's name\" onChange={this.saveName} />\n                </div>\n                <div className=\"form-group\">\n                  <label for=\"exampleFormControlTextarea1\" className=\"labelDescription\" data-testid=\"desc\">Description:</label>\n                  <textarea className=\"form-control\" id=\"description\" data-testid=\"inputDesc\" name=\"description\" rows=\"3\" onChange={this.saveDescription} ></textarea>\n                </div>\n\n                <div className=\"form-group\">\n                  <label className=\"exampleInputPhoto\" for=\"photo\" className=\"labelPhoto\" data-testid=\"img\">Images:</label><br></br>\n                  <input value={null} type=\"file\" id=\"photo\" name=\"image\" data-testid=\"inputImg\" accept=\"image/*\" multiple=\"true\" onChange={(e) => this.saveImages(e.target.files)} />\n                </div>\n                <div className=\"form-group\">\n                  <label className=\"exampleInputVideo\" for=\"video\" className=\"labelVideo\" data-testid=\"vid\">Video:</label><br></br>\n                  <input value={null} type=\"file\" id=\"video\" name=\"video\" accept=\"video/*\" data-testid=\"inputVid\" multiple=\"true\" onChange={(e) => this.saveVideos(e.target.files)} />\n                </div>\n                <br></br>\n                <div className=\"botones\">\n                  <button data-testid=\"btnenviar\" className=\"btn btn-info\" id=\"botonOpcion\" onClick={this.saveRoute}> <SaveIcon /> Save </button>\n                  <button data-testid=\"btnenviar\" className=\"btn btn-info\" id=\"botonOpcion\" onClick={this.clearAl} > <DeleteIcon /> Clear </button>\n                </div>\n              </nav>\n              <div className=\"rightPanel_mapa\" id=\"jeje\">\n                <MapStyle id=\"map\" center={this.state.center} zoom={12} onClick={this.clickOnMap}>\n                  <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n                  {this.state.markers.map((position, idx) =>\n                    <Marker key={`marker-${idx}`} position={position}></Marker>\n                  )}\n                  <Polyline positions={this.drawLine()} />\n                </MapStyle>\n              </div>\n            </div>\n            <ToastContainer />\n          </div>\n        </DocumentTitle>\n      </React.Fragment>\n    );\n  }\n\n}\nexport function recarga() {\n  window.createRouteComponent.reloa();\n}\n\nexport async function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport default CreateRoute;","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nexport function Loading(props) {\n    return (\n        <div style={{\n            position: \"fixed\",\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            zIndex: 1000,\n            backgroundColor: \"#3339\",\n            display: props.loading ? \"flex\" : \"none\",\n            justifyContent: \"center\"\n        }}>\n            <Loader style={{\n                alignSelf: \"center\"\n            }} visible={true} type=\"Circles\" height={200} width={200} color=\"#18EEE9\" />\n        </div>\n    );\n}","import React, { Component } from \"react\";\nimport { TileLayer, Map, GeoJSON, Marker, Polyline } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport styled from \"styled-components\";\nimport ReactDOM from \"react-dom\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport toGeoJSON from \"@mapbox/togeojson\";\n\nimport createRoute from \"../CreateRoute/CreateRoute\";\n\nconst geojsonMarkerOptions = {\n    radius: 4,\n    fillColor: \"#EE4266\",\n    color: \"#000\",\n    weight: 0,\n    opacity: 1,\n    fillOpacity: 0.4\n};\n\nfunction pointToLayer(feature, latlng) {\n    return L.circleMarker(latlng, geojsonMarkerOptions);\n}\n\nconst styles = {\n    wrapper: {\n        width: \"70vw\",\n        height: \"100vh\",\n        className: \"rightPanel_mapa\",\n        display: \"flex\"\n    },\n    map: {\n        flex: 1\n    }\n};\n\n\nclass ShowMap extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            center: [43.38, -5.80],\n            zoom: 12,\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            geoj: \"\"\n        };\n        window.mapsComponent = this;\n        this.geoJsonLayer = React.createRef();\n    }\n    reloa(centers, zooms, geojs) {\n        window.mapsComponent.setState({\n            center: centers,\n            zoom: zooms,\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            geoj: geojs\n        });\n    }\n    render() {\n        return (\n            <div style={styles.wrapper} id=\"thisMap\" >\n                <Map style={styles.map} center={this.state.center} zoom={this.state.zoom}  >\n                    <TileLayer url={this.state.url} />\n                    <GeoJSON key={this.state.geoj.toString()}\n                        pointToLayer={pointToLayer}\n                        data={this.state.geoj}\n                    />\n                </Map>\n                <ToastContainer />\n            </div>\n        );\n    }\n}\n\nexport function updateMap(route, name, num) {\n    let center = [43.38, -5.80];\n    let aa = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n    try {\n        if (num == 0) {\n            var parseR = JSON.parse(route);\n        }\n        else if (num == 1) {\n\n            var xmlDoc = (new DOMParser()).parseFromString(route, \"text/xml\");\n            var parseR = toGeoJSON.gpx(xmlDoc);\n        }\n        else {\n            var xmlDoc = (new DOMParser()).parseFromString(route, \"text/xml\");\n            var parseR = toGeoJSON.kml(xmlDoc);\n        }\n\n        let firstPoint1;\n        let zoomUp;\n        //1era opcion\n        if (parseR.geometry !== undefined) {\n            firstPoint1 = parseR.geometry.coordinates[0];\n            //Darle la vuelta\n            center = [\n                firstPoint1[1],\n                firstPoint1[0]\n            ];\n            zoomUp = 14;\n        }\n        //2a opcion\n        else if (parseR.features[0] !== undefined && parseR.features[0].geometry.type !== \"Point\") {\n            firstPoint1 = parseR.features[0].geometry.coordinates[0];\n            //Darle la vuelta\n            center = [\n                firstPoint1[1],\n                firstPoint1[0]\n            ];\n            zoomUp = 14;\n        } else {\n            center = [43.5878945, -5.80789456];\n            zoomUp = 11;\n        }\n        window.mapsComponent.reloa(center, zoomUp, \"\");\n        window.mapsComponent.reloa(center, zoomUp, parseR);\n    }\n    catch (error) {\n        toast.error(\"Invalid file\", {\n            position: toast.POSITION.BOTTOM_LEFT\n        });\n    }\n}\n\nShowMap.defaultProps = {\n    center: [43.38, -5.80],\n    zoom: 12,\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    geoj: \"\"\n};\n\n\nexport default ShowMap;\n\n","import React, { useState, useEffect } from \"react\";\nimport { useWebId } from \"@solid/react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Card, Button, InputGroup } from \"react-bootstrap\";\nimport \"./LoadRoute.css\";\nimport * as solidAuth from \"solid-auth-client\";\nimport fileClient from \"solid-file-client\";\nimport DocumentTitle from \"react-document-title\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { Loading } from \"../../../Loading\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport * as algo from \"../Map/Map\";\n\nimport Slider from \"./Slider\";\n\n\nconst fileClien = new fileClient(solidAuth, { enableLogging: true });\nvar urlRutas = [];\n\nvar images = [];\nvar videos = [];\nvar urlfol;\n\nexport async function showRoute(urlCarptetaRuta) {\n    let folder = await fileClien.readFolder(urlCarptetaRuta);\n\n    if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".geojson\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".geojson\");\n        algo.updateMap(ruta, folder.name, 0);\n    }\n    else if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".gpx\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".gpx\");\n        algo.updateMap(ruta, folder.name, 1);\n    }\n    else if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".kml\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".kml\");\n        algo.updateMap(ruta, folder.name, 2);\n    }\n    else{\n        toast.error(\"This file is not permited\", {\n            position: toast.POSITION.BOTTOM_LEFT\n        } );     \n    }\n}\n\nasync function loadFile(urlCarptetaRuta, route) {\n    var k;\n    var result = [];\n    for (k = 0; k < 1000; k++) {\n        try {\n            await fileClien.readFile(urlCarptetaRuta + route + (k + 1));\n            result.push(urlCarptetaRuta + route + (k + 1));\n        } catch{\n            k = 1000;\n        }\n    }\n    var x = document.getElementById(\"botonDel\");\n    x.style.display = \"block\";\n    var y = document.getElementById(\"botonEdi\");\n    y.style.display = \"block\";\n    return result;\n}\n\nasync function loadRoute(urlCarptetaRuta, setSelected,setLoading) {\n\n    setLoading(true);\n    let folder = await fileClien.readFolder(urlCarptetaRuta);\n    let folderDesc = await fileClien.readFile(urlCarptetaRuta + \"description\");\n    let images = await loadFile(urlCarptetaRuta, \"photo/img\");\n    let videos = await loadFile(urlCarptetaRuta, \"video/vid\");\n    \n    await showRoute(urlCarptetaRuta);\n\n    setSelected({\n        name: folder.name,\n        description: folderDesc,\n        images: images,\n        videos: videos,\n        url: urlCarptetaRuta\n    });\n    setLoading(false);\n    \n}\n\nasync function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\nasync function editRoute(selected, description, images, videos) {\n    if (description != \"\" || images.length != 0 || videos.length != 0) {\n\n        if (description != \"\") {\n            await fileClien.createFile(urlfol + \"/\" + selected.name + \"/\" + \"description\", description, \"text/plain\");\n        }\n\n        for (var k = 0; images.length != 0 && k < images.length; k++) {\n            await fileClien.createFile(urlfol + \"/\" + selected.name + \"/\" + \"photo\" + \"/img\" + (k + 1 + selected.images.length), images[k], \"img\");\n        }\n\n        for (var k = 0; videos.length != 0 && k < videos.length; k++) {\n            await fileClien.createFile(urlfol + \"/\" + selected.name + \"/\" + \"video\" + \"/vid\" + (k + 1 + selected.videos.length), videos[k], \"video\");\n        }\n        document.getElementById(\"photo2\").value = [];\n        document.getElementById(\"video2\").value = [];\n        document.getElementById(\"description2\").value = \"\";\n        toast.info(\"Route edited!!\", {\n            position: toast.POSITION.BOTTOM_LEFT,\n            autoClose: 5000\n        } ); \n        await sleep(5000);\n        window.location.reload();\n        \n    }\n    else {\n        toast.error(\"All the fields are empty!!!\", {\n            position: toast.POSITION.BOTTOM_LEFT\n        } );\n    }\n}\nasync function deleteRoute(selected,setLoading) {\n    if (fileClien.itemExists(selected.url)) {\n        setLoading(true);\n        toast.info(\"Route will be deleted, please wait a few seconds\", {\n            position: toast.POSITION.BOTTOM_LEFT\n        } );      \n        await fileClien.deleteFolder(selected.url);\n    }\n    else {\n        toast.error(\"Route can't be deleted\", {\n            position: toast.POSITION.BOTTOM_LEFT\n        });\n    }\n    setLoading(false);\n    window.location.reload();\n}\n\nasync function loadRoutes(url, setFolders) {\n\n    let folder = await fileClien.readFolder(url);\n    setFolders(folder.folders);\n    urlfol = url;\n}\n\nconst LoadRoute = () => {\n\n    const [folders, setFolders] = useState([]);\n    const [selected, setSelected] = useState({\n        name: \"\",\n        description: \"\",\n        images: [],\n        videos: []\n    });\n    const [description, setDescription] = useState(\"\");\n    const [image, setImage] = useState([]);\n    const [video, setVideo] = useState([]);\n    const [showResults, setShowResults] = useState(false);\n    const onClick = () => showResults ? setShowResults(false) : setShowResults(true);    \n    const [loading, setLoading] = useState(false);\n\n    var user = useWebId();\n\n    useEffect(() => {\n        if (user != undefined) {\n            const url = user.split(\"profile/card#me\")[0] + \"/private/routes3a\";\n            loadRoutes(url, setFolders);\n        }\n    }, [user]);\n\n    images = [];\n    videos = [];\n    selected.images.map((image) => (\n        images.push(image)\n    ));\n    selected.videos.map((video) => (\n        videos.push(video)\n    ));\n    return (\n        <div>\n        <Loading loading={loading}/>\n        <DocumentTitle title=\"My Routes\">\n        \n            <div class=\"container\">\n                <h2 id=\"rutas\" class=\"h2\" data-testid=\"label\">Routes list</h2>\n                <div className=\"chooseRoute\" data-testid=\"chooseRoute\">Choose a route to see in detail:</div>\n                <div className=\"listaDeRutas\">\n                    {\n                        folders.map((folder, i) => {\n                            var urlArchivo = \"\" + folder.url;\n                            var arrayUrl = urlArchivo.split(\"/\");\n                            urlRutas.push(urlArchivo);\n                            var nombre = arrayUrl[arrayUrl.length - 2].split(\"%20\").join(\" \");\n                            return (\n                                <div key={\"folder_\" + i} className=\"optionRoute\" id=\"optionRoute\">\n                                    <a role=\"button\" class={\"lista\"} onClick={() => loadRoute(urlArchivo, setSelected,setLoading)} id=\"enlaceLoadRoute\">\n                                        {nombre}\n                                        <span class=\"hyperspan\"></span>\n                                    </a>\n                                </div>);\n                        })\n                    }\n                </div>\n                <div class=\"card bg-info text-white\" data-testid=\"card\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\" id=\"routeName\">{selected.name.split(\"%20\").join(\" \")}</h4>\n                        <p class=\"card-Description\" id=\"routeDescription\">{selected.description}</p>\n                        <div className=\"bodyMedia\">\n                            <Slider images={images} videos={videos} />\n                        </div>\n                        <br></br>\n                        {showResults ?\n                            <center>\n                                <div>\n                                    <div class=\"form-group\">\n                                        <label for=\"exampleFormControlTextarea1\" className=\"labels\" data-testid=\"desc\">Description:</label>\n                                        <textarea class=\"form-control\" id=\"description2\" data-testid=\"inputDesc\" name=\"description2\" rows=\"3\" onChange={(e) => setDescription(e.target.value)}></textarea>\n                                    </div>\n\n                                    <div class=\"form-group\">\n                                        <label class=\"exampleInputPhoto\" for=\"photo2\" className=\"labels\" data-testid=\"img\">Images:</label><br></br>\n                                        <input value={null} type=\"file\" id=\"photo2\" name=\"image2\" data-testid=\"inputImg\" accept=\"image/*\" multiple=\"true\" onChange={(e) => setImage(e.target.files)} />\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <label class=\"exampleInputVideo\" for=\"video2\" className=\"labels\" data-testid=\"vid\">Videos:</label><br></br>\n                                        <input value={null} type=\"file\" id=\"video2\" name=\"video2\" accept=\"video/*\" data-testid=\"inputVid\" multiple=\"true\" onChange={(e) => setVideo(e.target.files)} />\n                                    </div>\n                                    <button className=\"btn btn-light\" id=\"botonCam\" onClick={() => editRoute(selected, description, image, video)}>Submit <SaveIcon /></button>\n                                    <br />\n                                </div></center> : null}\n                        <br /><br />\n                        <button className=\"btn btn-light\" id=\"botonEdi\" onClick={onClick}>Edit  <EditTwoToneIcon /></button>\n                        <button className=\"btn btn-light\" id=\"botonDel\" onClick={() => deleteRoute(selected, setLoading)}>Delete <DeleteIcon /></button>\n                    </div>\n                    \n            <ToastContainer />\n                </div>\n            </div>\n        </DocumentTitle>\n        </div>\n    );\n};\n\nexport default LoadRoute;","import React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport \"./AddRoute.css\";\nimport { useWebId } from \"@solid/react\";\nimport {\n\n    Uploader,\n    ProfileUploader\n} from \"@inrupt/solid-react-components\";\n\nimport * as solidAuth from \"solid-auth-client\";\nimport fileClient from \"solid-file-client\";\nimport { Redirect } from \"react-router-dom\";\nimport DocumentTitle from \"react-document-title\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { Loading } from \"../../../Loading\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst auth = require(\"solid-auth-client\");\n\nconst fileClien = new fileClient(solidAuth, { enableLogging: true });\n\n\n\nconst Upload = ({ setFile, file }) => {\n    const filename = file == null ? \"Choose File\" : file.name;\n\n    const changeName = (e) => {\n        setFile(e.target.files[0]);\n    };\n    //para acceder a componentes del dum desde react\n    //const refFile = useRef();\n\n\n    return (\n        <div class=\"input-group\">\n            <div class=\"input-group-prepend\">\n                <label for=\"exampleRoute\" class=\"labelRoute\" data-testid=\"route\">Route (GeoJson/GPX/KML):</label><br></br>\n                <span class=\"input-group-text\" id=\"inputGroupFileAddon01\" data-testid=\"upload\">Upload</span>\n            </div>\n            <div class=\"custom-file\">\n                <input value={null} type=\"file\" class=\"custom-file-input\" id=\"route\" accept=\".geojson,.kml,.gpx\"\n                    aria-describedby=\"inputGroupFileAddon01\" onChange={changeName} required data-testid=\"inputGeo\" />\n                <label class=\"custom-file-label\" for=\"inputGroupFile01\" id=\"labelRoute\" data-testid=\"labelRoute\">{filename}</label>\n\n            </div>\n        </div>\n    );\n};\nconst Data = () => {\n    var user = \"\" + useWebId();\n    //it saves the actual state of the data\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(null);\n\n    const [name, setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [image, setImage] = useState(null);\n    const [video, setVideo] = useState(null);\n\n    const [loading, setLoading] = useState(false);\n\n    const url = user.split(\"profile/card#me\")[0] + \"/private/routes3a\";\n\n    \n    return (\n        <div>\n            <Loading loading={loading} />\n            <br></br>\n            <Upload setFile={setFile} file={file} />\n            <br></br>\n\n            <div class=\"form-group\">\n                <label for=\"exampleFormControlInput1\" class=\"labelName\" data-testid=\"name\">Name:</label>\n                <input type=\"text\" class=\"form-control\" id=\"name\" data-testid=\"inputName\" placeholder=\"Route's name\" required value={name} onChange={(e) => setName(e.target.value)} />\n            </div>\n            <div class=\"form-group\">\n                <label for=\"exampleFormControlTextarea1\" class=\"labelDescription\" data-testid=\"desc\">Description:</label>\n                <textarea class=\"form-control\" id=\"description\" data-testid=\"inputDesc\" name=\"description\" rows=\"3\" value={description} onChange={(e) => setDescription(e.target.value)}></textarea>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"exampleInputPhoto\" for=\"photo\" class=\"labelPhoto\" data-testid=\"img\">Images:</label><br></br>\n                <input value={null} type=\"file\" id=\"photo\" name=\"image\" data-testid=\"inputImg\" accept=\"image/*\" multiple=\"true\" onChange={(e) => setImage(e.target.files)} />\n            </div>\n            <div class=\"form-group\">\n                <label class=\"exampleInputVideo\" for=\"video\" class=\"labelVideo\" data-testid=\"vid\">Video:</label><br></br>\n                <input value={null} type=\"file\" id=\"video\" name=\"video\" accept=\"video/*\" data-testid=\"inputVid\" multiple=\"true\" onChange={(e) => setVideo(e.target.files)} />\n            </div>\n            <br></br>\n            {\n                error &&\n                <div data-testid=\"msjerror\" class=\"alert alert-danger\" role=\"alert\">\n                    {error}\n                </div>\n            }\n            <center>\n                <button data-testid=\"btnenviar\" onClick={() => createFolder(url, file, name, description, image, video, setFile, setName, setDescription, setImage, setVideo, setError, setLoading)} class=\"btn btn-info\" >Add route\n                </button>\n            </center>\n            <ToastContainer data-testid=\"msjerror\" />\n        </div>\n\n    );\n};\n\nconst AddRoute = () => {\n\n    return (\n\n        <DocumentTitle title=\"Add route\">\n            <Fragment>\n                <h2 class=\"h2\">Add route</h2>\n                <Data />\n            </Fragment>\n        </DocumentTitle>\n\n    );\n\n};\n\n\n\nconst createFolder = async (folder, route, name, description, photo, video, setFile, setName, setDescription, setImage, setVideo, setError, setLoading) => {\n\n    if (name === \"\" || route === null) {\n        toast.error(\"Name or route is empty!\", {\n            position: toast.POSITION.BOTTOM_LEFT\n        } );\n    }\n    else {\n        setError(null);\n        setLoading(true);\n        var existe = await fileClien.itemExists(folder);\n\n        if (!existe) {\n            await fileClien.createFolder(folder);\n        }\n        var fileList = [];\n        var nameValue = name;\n        var destination = folder + \"/\" + nameValue + \"/\";\n        existe = await fileClien.itemExists(destination);\n        if (!existe) {\n            var k = 0;\n            await fileClien.createFolder(destination);\n            var user = await auth.currentSession();\n\n            let content = \"@prefix : <#>.\\n\" +\n                \"@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n\" +\n                \"@prefix M: <./>.\\n\" +\n                \"@prefix c: </profile/card#>.\\n\" +\n\n                \":ControlReadWrite\\n\" +\n                \"a n0:Authorization;\\n\" +\n                \"n0:accessTo M:;\\n\" +\n                \"n0:agent c:me;\\n\" +\n                \"n0:default M:;\\n\" +\n                \"n0:mode n0:Control, n0:Read, n0:Write.\\n\" +\n                \":Read a n0:Authorization; n0:accessTo M:; n0:default M:; n0:mode n0:Read.\";\n\n            await fileClien.createFile(destination + \"/.acl\", content, \"text/turtle\");\n\n            fileList.push(route);\n            await fileClien.createFile(destination + \"/\" + \"description\", description, \"text/plain\");\n            for (k = 0; photo !== null && k < photo.length; k++) {\n                await fileClien.createFile(destination + \"/\" + \"photo\" + \"/img\" + (k + 1), photo[k], \"img\");\n            }\n            for (k = 0; video !== null && k < video.length; k++) {\n                await fileClien.createFile(destination + \"/\" + \"video\" + \"/vid\" + (k + 1), video[k], \"video\");\n            }\n            \n\n            var file = fileList[0];\n            const fileURl = destination + \"/\" + nameValue + \".\" + (route.name.split(\".\")[1]).toLowerCase();\n            await fileClien.putFile(fileURl, file, file.type);\n\n            // alert(\"Your route has been added to the pod!!\");\n            toast.info(\"Your route has been added to the pod!!\", {\n                position: toast.POSITION.BOTTOM_LEFT\n            } );\n\n            //clean all fields\n            setName(\"\");\n            setDescription(\"\");\n            setFile(null);\n            setImage(null);\n            setVideo(null);\n\n            document.getElementById(\"photo\").value = null;\n            document.getElementById(\"video\").value = null;\n            document.getElementById(\"route\").value = null;\n        }\n        else {\n            toast.error(\"Route title already used, use another title\", {\n                position: toast.POSITION.BOTTOM_LEFT\n            } );\n         \n        }\n        setLoading(false);\n\n    }\n\n};\n\n\nexport default AddRoute;\n","import React from \"react\";\nimport ShowMap from \"../Map/Map\";\nimport \"./AddRoute.css\";\nimport AddRoute from \"./AddRoute\";\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\" data-testid=\"addRoutePart\">\n            <AddRoute />\n        </nav>\n    );\n};\n\nconst RightPanel = () => {\n    return (\n        <div className=\"rightPanel_mapa\" id=\"jeje\" data-testid=\"mapPart\">\n            <ShowMap></ShowMap>\n        </div>\n    );\n};\n\nconst AddRoutePanel = () => {\n    return (\n        <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n                <LeftPanel />\n                <RightPanel />\n            </div>\n        </div>\n    );\n};\n\nexport default AddRoutePanel;","import React, { Component } from \"react\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Carousel } from \"react-responsive-carousel\";\n\nimport \"./Slider.css\";\n\nconst properties = {\n    infiniteLoop: true,\n    showThumbs: false,\n    autoPlay: true,\n    transitionTime: 350,\n    stopOnHover: true,\n    useKeyboardArrows: true,\n};\n\nconst Slider = (props) => {\n    return (\n        <Carousel className=\"carousel-style\" {...properties}>\n            {\n                props.images.map((image, i) => (\n                    <div className=\"slider-item-div\">\n                        <img src={image} className=\"media\" />\n                    </div>\n                ))\n            }\n            {\n                props.videos.map((video, i) => (\n                    <div className=\"slider-item-div\">\n                        <video controls className=\"media\">\n                            <source src={video} />\n                                Your browser does not support the video tag.\n                            </video>\n                    </div>\n                ))\n            }\n        </Carousel>\n    );\n};\nexport default Slider;","import React from \"react\";\nimport ShowMap from \"../Map/Map\";\nimport LoadRoute from \"./LoadRoute\";\nimport \"./LoadRoute.css\";\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\" data-testid=\"loadRoutePart\">\n            <LoadRoute />\n        </nav>\n    );\n};\n\nconst RightPanel = () => {\n    return (\n        <div className=\"rightPanel_mapa\" id=\"jeje\" data-testid=\"mapPart\">\n            <ShowMap></ShowMap>\n        </div>\n    );\n};\n\nconst LoadRoutePanel = () => {\n    return (\n        <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n                <LeftPanel />\n                <RightPanel />\n            </div>\n        </div>\n    );\n};\n\nexport default LoadRoutePanel;","import React from \"react\";\nimport CreateRoute from \"./CreateRoute\";\nimport \"./CreateRoute.css\";\n\n\nconst CreateRoutePanel = () => {\n    return (\n        <div className=\"panel\" data-testid=\"createRoutePart\">\n            <CreateRoute />\n        </div>\n    );\n};\n\nexport default CreateRoutePanel;","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./Welcome.css\";\nimport { Accordion, useAccordionToggle } from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Alert from \"react-bootstrap/Button\";\n\n// Iconos\nimport BackupOutlinedIcon from \"@material-ui/icons/BackupOutlined\";\nimport RoomOutlinedIcon from \"@material-ui/icons/RoomOutlined\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\nimport PeopleAltOutlinedIcon from \"@material-ui/icons/PeopleAltOutlined\";\nimport NotificationsActiveOutlinedIcon from \"@material-ui/icons/NotificationsActiveOutlined\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport CreateOutlinedIcon from \"@material-ui/icons/CreateOutlined\";\nimport MapOutlinedIcon from \"@material-ui/icons/MapOutlined\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\n\n\nconst AccordionWelcome = () => {\n\n    const [panelIndex, setPanelIndex] = useState();\n\n    const CustomToggle = ({ children, eventKey }) => {\n\n        // Decorate the click event to also set state in the component so we can \n        // compare the open panel key with the state and toggle classes accordingly\n        const customOnClick = useAccordionToggle(eventKey, () => {\n            setPanelIndex(eventKey === panelIndex ? null : eventKey);\n        });\n\n        const customClass = (eventKey === panelIndex) ? \"open-class\" : \"closed-class\";\n\n        return (\n            <Card.Header className=\"headerWelcome\">\n                <Accordion.Toggle as={Card.Header} className={customClass} id=\"opcionYLogoWelcome\" onClick={customOnClick}>\n                    {children}\n                </Accordion.Toggle>\n            </Card.Header>\n        );\n    };\n\n    return (\n        <Accordion>\n            <Card className=\"cardWelcome\">\n                <CustomToggle eventKey={1}>\n                    <BackupOutlinedIcon className=\"iconWelcome\" data-testid=\"iconAddRouteWelcome\" />\n                    <div className=\"optionTitle\" data-testid=\"add\">Add route</div>\n                </CustomToggle>\n                <Accordion.Collapse eventKey={1} className=\"mostrar\">\n                    <Card.Body data-testid=\"addRouteInfoWelcome\">You can upload a route and it will be saved in your SOLID pod</Card.Body>\n                </Accordion.Collapse>\n            </Card>\n\n            <Card className=\"cardWelcome\">\n                <CustomToggle eventKey={2}>\n                    <MapOutlinedIcon className=\"iconWelcome\" data-testid=\"iconRoutesWelcome\" />\n                    <div className=\"optionTitle\" data-testid=\"routes\">Routes</div>\n                </CustomToggle>\n                <Accordion.Collapse eventKey={2} className=\"mostrar\">\n                    <Card.Body>\n\n                        <Card className=\"cardWelcome\">\n                            <CustomToggle eventKey={2}>\n                                <RoomOutlinedIcon className=\"iconWelcome\" data-testid=\"iconMyRoutesWelcome\" />\n                                <div className=\"optionTitle\" data-testid=\"load\">My routes</div>\n                            </CustomToggle>\n                            <Accordion.Collapse eventKey={2} className=\"mostrar\">\n                                <Card.Body data-testid=\"loadRouteInfoWelcome\">You can choose one route and show it in the map</Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n\n                        <Card className=\"cardWelcome\">\n                            <CustomToggle eventKey={2}>\n                                <CreateOutlinedIcon className=\"iconWelcome\" data-testid=\"iconCreateRouteWelcome\" />\n                                <div className=\"optionTitle\" data-testid=\"create\">Create route</div>\n                            </CustomToggle>\n                            <Accordion.Collapse eventKey={2} className=\"mostrar\">\n                                <Card.Body data-testid=\"createRouteInfoWelcome\">You can create your own route and save it</Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n\n            <Card className=\"cardWelcome\">\n                <CustomToggle eventKey={3}>\n                    <ShareIcon className=\"iconWelcome\" data-testid=\"iconShareRoutesWelcome\" />\n                    <div className=\"optionTitle\" data-testid=\"share\">Share routes</div>\n                </CustomToggle>\n                <Accordion.Collapse eventKey={3} className=\"mostrar\">\n                    <Card.Body data-testid=\"shareRouteInfoWelcome\">You can share your routes with your friends</Card.Body>\n                </Accordion.Collapse>\n            </Card>\n\n            <Card className=\"cardWelcome\">\n                <CustomToggle eventKey={4}>\n                    <AccountCircleOutlinedIcon className=\"iconWelcome\" data-testid=\"iconProfileWelcome\" />\n                    <div className=\"optionTitle\" data-testid=\"profile\">Profile</div>\n                </CustomToggle>\n                <Accordion.Collapse eventKey={4} className=\"mostrar\">\n                    <Card.Body data-testid=\"profileInfoWelcome\">Your personal data</Card.Body>\n                </Accordion.Collapse>\n            </Card>\n\n            <Card className=\"cardWelcome\">\n                <CustomToggle eventKey={5}>\n                    <PeopleAltOutlinedIcon className=\"iconWelcome\" data-testid=\"iconFriendsWelcome\" />\n                    <div className=\"optionTitle\" data-testid=\"friendsOptions\">Friends</div>\n                </CustomToggle>\n                <Accordion.Collapse eventKey={5} className=\"mostrar\">\n                    <Card.Body>\n\n                        <Card className=\"cardWelcome\">\n                            <CustomToggle eventKey={5}>\n                                <PeopleAltOutlinedIcon className=\"iconWelcome\" data-testid=\"iconMyFriendsWelcome\" />\n                                <div className=\"optionTitle\" data-testid=\"friends\">My friends</div>\n                            </CustomToggle>\n                            <Accordion.Collapse eventKey={5} className=\"mostrar\">\n                                <Card.Body data-testid=\"friendsInfoWelcome\">Your friends management</Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n\n                        <Card className=\"cardWelcome\">\n                            <CustomToggle eventKey={5}>\n                                <PeopleAltOutlinedIcon className=\"iconWelcome\" data-testid=\"iconFriendsRoutesWelcome\" />\n                                <div className=\"optionTitle\" data-testid=\"friendsRoutes\">Friend's routes</div>\n                            </CustomToggle>\n                            <Accordion.Collapse eventKey={5} className=\"mostrar\">\n                                <Card.Body data-testid=\"friendsRoutesInfoWelcome\">You can see routes that have been shared to you</Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n\n            <Card className=\"cardWelcome\">\n                <CustomToggle eventKey={6}>\n                    <NotificationsActiveOutlinedIcon className=\"iconWelcome\" data-testid=\"notificationsWelcome\" />\n                    <div className=\"optionTitle\" data-testid=\"notifications\">Notifications</div>\n                </CustomToggle>\n                <Accordion.Collapse eventKey={6} className=\"mostrar\">\n                    <Card.Body data-testid=\"notificationsInfoWelcome\">You can see notifications related to your profile</Card.Body>\n                </Accordion.Collapse>\n            </Card>\n\n        </Accordion>\n    );\n};\n\nconst WhatIsViade = () => {\n    const [panelIndex, setPanelIndex] = useState();\n\n    const CustomToggle = ({ children, eventKey }) => {\n\n        // Decorate the click event to also set state in the component so we can \n        // compare the open panel key with the state and toggle classes accordingly\n        const customOnClick = useAccordionToggle(eventKey, () => {\n            setPanelIndex(eventKey === panelIndex ? null : eventKey);\n        });\n\n        const customClass = (eventKey === panelIndex) ? \"open-class\" : \"closed-class\";\n\n        return (\n            <Card.Header className=\"headerWelcomeInfo\">\n                <Accordion.Toggle as={Card.Header} className={customClass} id=\"opcionYLogoWelcomeViade\" onClick={customOnClick}>\n                    <div className=\"opcionYLogoWelcomeNearMe\">\n                        {children}\n                    </div>\n                </Accordion.Toggle>\n            </Card.Header>\n        );\n    };\n\n    return (\n        <Accordion defaultActiveKey={0}>\n            <Card className=\"cardWelcomeInfo\" data-testid=\"introduction\">\n                <CustomToggle eventKey={0}>\n\n                    <div className=\"optionTitleInfo\" data-testid=\"what\">What is VIADE?</div>\n                    <NearMeIcon className=\"iconNearWelcome\" data-testid=\"iconLogout\" />\n\n                </CustomToggle>\n                <Accordion.Collapse eventKey={0} className=\"mostrarInfo\">\n                    <Card.Body>Viade is a decentralized routes management system based on the solid specifications.</Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </Accordion>\n    );\n};\n\nconst Welcome = () => {\n    return (\n        <div className=\"contenedor\">\n            <h2 className=\"titulo\" data-testid=\"label\">Welcome to VIADE</h2>\n\n            <WhatIsViade />\n            <p data-testid=\"list\">Here's the list of things you can do with<span className=\"viadeInfo\"> VIADE</span>:</p>\n\n            <AccordionWelcome />\n            <p data-testid=\"message\">Enjoy our app !\n            <span className=\"smileFace\"><InsertEmoticonIcon className=\"iconHappy\" /></span>\n            </p>\n\n            <Alert variant={'danger'} data-testid=\"alert\">\n                Be careful! Make sure the app has control permissions on your solid profile\n            </Alert>\n        </div >\n    );\n};\n\nexport default Welcome;","import React from \"react\";\nimport ShowMap from \"../Map/Map\";\nimport Welcome from \"./Welcome\";\nimport \"./Welcome.css\";\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\" data-testid=\"welcomePart\">\n            <Welcome />\n        </nav>\n    );\n};\n\nconst RightPanel = () => {\n    return (\n        <div className=\"rightPanel_mapa\" id=\"jeje\" data-testid=\"mapPart\">\n            <ShowMap></ShowMap>\n        </div>\n    );\n};\n\nconst WelcomePanel = () => {\n    return (\n        <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n                <LeftPanel />\n                <RightPanel />\n            </div>\n        </div>\n    );\n};\n\nexport default WelcomePanel;","import React from \"react\";\nimport { useWebId, List, Value, Name, Link } from \"@solid/react\";\nimport \"./Friends.css\";\nimport { Form } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FileClient from \"solid-file-client\";\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\nimport DocumentTitle from \"react-document-title\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport auth from \"solid-auth-client\";\nconst { default: data } = require(\"@solid/query-ldflex\");\n\nconst reload = () => {\n  window.location.reload();\n};\n\nconst isWebIdValid = async (friendWebId) => {\n  const fc = new FileClient(auth);\n  let session = await auth.currentSession();\n  if (!session) {\n    session = await auth.login();\n  }\n  try {\n    let op = async (client) => await client.itemExists(friendWebId);\n    return await op(fc);\n  } catch (e) {\n    session = await auth.currentSession();\n  }\n};\n\nconst friendAlreadyAdded = async (friendWebId, webId) => {\n  const user = data[webId];\n  for await (const friend of user.friends) {\n    if (String(friend).localeCompare(String(friendWebId)) === 0){ return true;}\n  }\n  return false;\n};\n\nasync function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst addFriend = async (friendWebId, userWebId) => {\n\n  const user = data[userWebId]; //sacamos nuestra informacion\n  if (await isWebIdValid(friendWebId)) {\n    if (friendWebId.localeCompare(\"\") !== 0) {\n      //comprobamos que no pasamos un campo vacio\n      if (await friendAlreadyAdded(friendWebId, userWebId)) {\n        //notificamos si el amigo estaba a√±adido\n        toast.error(\"Friend already added\", {\n          position: toast.POSITION.BOTTOM_LEFT,\n          autoClose: 5000\n        } );\n      } else {\n        await user.knows.add(data[friendWebId]); //a√±adimos el amigo\n        toast.info(\"Your friend has been added\", {\n          position: toast.POSITION.BOTTOM_LEFT,\n          autoClose: 5000\n        } );\n        await sleep(5000);\n        reload();\n      }\n    } else {\n      toast.error(\"Empty string\", {\n        position: toast.POSITION.BOTTOM_LEFT,\n        autoClose: 5000\n      } );\n    }\n  } else {\n    toast.error(\"Invalid WebId \", {\n      position: toast.POSITION.BOTTOM_LEFT,\n      autoClose: 5000\n    } );\n  }\n};\n\nconst deleteFriend = async (friend, userWebId) => {\n  var friendWebId = friend.nombre;\n  friendWebId = friendWebId.replace(\"[\", \"\");\n  friendWebId = friendWebId.replace(\"]\", \"\");\n\n  const user = data[userWebId];\n  if (await isWebIdValid(friendWebId)) {\n    if (friendWebId.localeCompare(\"\") !== 0) {\n      if (await !friendAlreadyAdded(friendWebId, userWebId)) {\n        toast.error(\"An error occurred when deleting the friend (maybe it was previously deleted)\", {\n          position: toast.POSITION.BOTTOM_LEFT,\n          autoClose: 5000\n      } );\n      } else {\n        await user.knows.delete(data[friendWebId]); //a√±adimos el amigo\n        toast.info(\"User will be deleted from your friends\", {\n          position: toast.POSITION.BOTTOM_LEFT,\n          autoClose: 5000\n      } );\n      await sleep(5000);\n        reload();\n      }\n    } else {\n      toast.error(\"Empty string\", {\n        position: toast.POSITION.BOTTOM_LEFT,\n        autoClose: 5000\n    } );\n    }\n  } else {\n    toast.error(\"Invalid WebId \", {\n      position: toast.POSITION.BOTTOM_LEFT,\n      autoClose: 5000\n  } );\n  }\n\n};\n\nconst Card = (props, webId) => {\n  var user = \"\" + useWebId();\n  return (\n    <div class=\"card bg-info text-white\" >\n      <div class=\"card-body\">\n        <h4 class=\"card-title\" id=\"friendName\">\n          <Name src={props.nombre}>{props.nombre}</Name>\n        </h4>\n        <center>\n          <div className=\"botones\">\n            <Link href={props.nombre} className=\"btn btn-light\" id=\"botonOpcion\" data-testId=\"link\">Profile</Link>\n            <button className=\"btn btn-light\" id=\"botonOpcion\" data-testId=\"button\" onClick={() => deleteFriend(props, user)} >Delete</button>\n            {/* onClick={() => deleteFriend(props, webId)} */}\n          </div>\n        </center>\n      </div>\n    </div>\n  );\n};\n\nconst Friends = () => {\n  const webId = useWebId();\n  return (\n    <DocumentTitle title=\"Friends\">\n      <div className=\"prueba\">\n        <h2 className=\"h2\" data-testId=\"label\">Your friends, <Value src=\"user.name\" /> </h2>\n        <h4 class=\"card-title\" id=\"addFriend\" data-testId=\"addFriend\">Add friends by webId</h4>\n        <div class=\"wrap\">\n          <div class=\"search\">\n            <input type=\"text\" class=\"searchTerm\" placeholder=\"https://pepitogarcia.solid.community/profile/card#me\" id=\"input\" />\n            <button type=\"submit\" class=\"searchButton\" onClick={() => addFriend(document.getElementById(\"input\").value, webId)}>\n              <SearchOutlinedIcon className=\"iconSearch\" />\n            </button>\n          </div>\n        </div>\n\n        <br></br>\n        <List src={`[${webId}].friends`} className=\"list\" padding-inline-start=\"0\">{(friend) =>\n          <li key={friend} className=\"listElement\">\n            <p>\n              <Card nombre={`[${friend}]`} web={webId}></Card>\n            </p>\n          </li>}\n        </List>\n        \n        <ToastContainer />\n      </div>\n    </DocumentTitle>\n  );\n};\n\nexport default Friends;","import React from \"react\";\nimport ShowMap from \"../Map/Map\";\nimport Friends from \"./Friends\";\nimport \"./Friends.css\";\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\" data-testid=\"friendsPart\">\n            <Friends />\n        </nav>\n    );\n};\n\nconst RightPanel = () => {\n    return (\n        <div className=\"rightPanel_mapa\" id=\"jeje\" data-testid=\"mapPart\">\n            <ShowMap></ShowMap>\n        </div>\n    );\n};\n\nconst FriendsPanel = () => {\n    return (\n        <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n                <LeftPanel />\n                <RightPanel />\n            </div>\n        </div>\n    );\n};\n\nexport default FriendsPanel;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"svgg\"\n}, React.createElement(\"path\", {\n  id: \"path0\",\n  d: \"M190.600 79.246 C 189.500 79.412,187.700 79.753,186.600 80.003 C 185.500 80.254,183.790 80.554,182.800 80.672 C 181.810 80.790,180.816 81.035,180.590 81.217 C 180.365 81.399,179.285 81.840,178.190 82.197 C 176.397 82.781,174.681 83.488,172.705 84.459 C 172.323 84.646,171.620 84.800,171.143 84.800 C 170.666 84.800,169.698 85.240,168.992 85.779 C 168.287 86.317,167.248 86.873,166.684 87.015 C 166.120 87.156,165.348 87.616,164.967 88.036 C 164.587 88.456,164.096 88.800,163.876 88.800 C 163.656 88.800,162.886 89.250,162.164 89.800 C 161.443 90.350,160.698 90.800,160.508 90.800 C 160.319 90.800,157.763 93.181,154.829 96.092 C 150.071 100.811,148.483 102.664,146.950 105.283 C 146.703 105.705,146.058 106.535,145.517 107.126 C 144.547 108.185,142.332 112.482,141.784 114.369 C 141.629 114.902,141.164 115.701,140.751 116.145 C 140.338 116.588,140.000 117.333,140.000 117.799 C 140.000 118.265,139.736 118.996,139.413 119.424 C 139.090 119.851,138.820 120.563,138.813 121.006 C 138.806 121.449,138.413 122.799,137.940 124.006 C 136.719 127.123,135.620 143.753,136.572 144.706 C 136.698 144.831,136.800 145.601,136.800 146.418 C 136.800 147.234,137.070 148.549,137.400 149.338 C 137.730 150.128,138.000 151.284,138.000 151.907 C 138.000 152.530,138.161 153.211,138.358 153.420 C 138.696 153.779,139.392 156.336,139.877 159.000 C 139.997 159.660,140.413 160.560,140.801 161.000 C 141.753 162.080,142.800 164.203,142.800 165.054 C 142.800 165.436,143.173 166.146,143.630 166.631 C 144.086 167.117,144.761 168.055,145.130 168.717 C 145.498 169.378,146.270 170.612,146.845 171.459 C 148.219 173.485,159.098 184.400,159.743 184.400 C 160.018 184.400,160.854 185.030,161.600 185.800 C 162.346 186.570,163.178 187.200,163.448 187.200 C 163.718 187.200,164.449 187.605,165.072 188.100 C 166.409 189.161,167.568 189.910,168.400 190.251 C 168.730 190.386,170.229 191.105,171.732 191.848 C 173.234 192.592,174.699 193.200,174.986 193.200 C 175.273 193.200,176.024 193.469,176.654 193.798 C 177.284 194.126,178.374 194.396,179.076 194.398 C 179.778 194.399,180.464 194.580,180.600 194.800 C 180.736 195.020,181.366 195.200,182.000 195.200 C 182.634 195.200,183.264 195.380,183.400 195.600 C 183.536 195.820,184.278 196.000,185.050 196.000 C 185.821 196.000,186.797 196.185,187.219 196.410 C 188.245 196.959,199.789 197.200,203.800 196.755 C 209.340 196.141,213.914 195.264,214.229 194.754 C 214.349 194.559,215.022 194.399,215.724 194.398 C 216.426 194.396,217.516 194.126,218.146 193.798 C 218.776 193.469,219.634 193.200,220.054 193.200 C 220.473 193.200,221.529 192.750,222.400 192.200 C 223.271 191.650,224.154 191.200,224.361 191.200 C 224.569 191.200,225.247 190.783,225.869 190.273 C 226.491 189.763,227.630 189.105,228.400 188.809 C 229.170 188.514,230.260 187.851,230.822 187.336 C 231.384 186.821,232.016 186.400,232.226 186.400 C 232.436 186.400,233.093 185.950,233.687 185.400 C 234.280 184.850,234.978 184.400,235.239 184.400 C 235.852 184.400,243.500 176.909,244.223 175.600 C 244.527 175.050,245.695 173.616,246.818 172.414 C 247.941 171.211,249.502 168.911,250.286 167.302 C 251.071 165.694,251.871 164.280,252.064 164.161 C 252.503 163.889,254.400 160.181,254.400 159.594 C 254.400 159.356,254.747 158.442,255.172 157.564 C 255.597 156.685,256.060 155.435,256.203 154.787 C 256.345 154.139,256.628 153.506,256.831 153.381 C 257.034 153.255,257.200 152.522,257.200 151.750 C 257.200 150.979,257.386 149.999,257.614 149.574 C 257.948 148.951,258.271 145.339,258.363 141.200 C 258.456 137.030,257.973 127.496,257.637 126.868 C 257.396 126.420,257.200 125.605,257.200 125.059 C 257.200 124.512,256.941 123.555,256.625 122.932 C 256.309 122.310,255.671 120.511,255.208 118.935 C 254.745 117.359,254.104 115.852,253.783 115.586 C 253.462 115.320,253.200 114.779,253.200 114.384 C 253.200 113.990,253.065 113.607,252.900 113.533 C 252.735 113.460,251.795 111.780,250.811 109.800 C 249.826 107.819,248.117 105.203,247.011 103.984 C 245.905 102.765,244.691 101.187,244.314 100.477 C 243.937 99.766,243.276 99.053,242.845 98.892 C 241.786 98.497,237.302 94.152,237.013 93.241 C 236.886 92.841,235.481 91.836,233.891 91.009 C 232.301 90.182,230.250 88.896,229.333 88.152 C 228.416 87.409,227.557 86.800,227.425 86.800 C 227.292 86.800,226.471 86.350,225.600 85.800 C 224.729 85.250,223.662 84.800,223.229 84.800 C 222.796 84.800,221.668 84.391,220.721 83.891 C 219.775 83.392,218.190 82.751,217.200 82.467 C 216.210 82.183,214.860 81.758,214.200 81.521 C 213.540 81.285,212.280 81.008,211.400 80.905 C 210.520 80.802,209.629 80.556,209.420 80.359 C 209.211 80.162,208.254 80.000,207.294 80.000 C 206.333 80.000,205.181 79.804,204.734 79.565 C 203.765 79.046,193.450 78.813,190.600 79.246 M167.422 223.565 C 167.272 223.808,165.980 224.000,164.500 224.000 C 161.724 224.000,157.840 224.568,155.800 225.272 C 155.140 225.499,153.880 225.837,153.000 226.021 C 149.706 226.712,148.980 226.930,148.211 227.458 C 147.777 227.756,147.023 228.000,146.535 228.000 C 146.047 228.000,145.536 228.180,145.400 228.400 C 145.264 228.620,144.659 228.800,144.056 228.800 C 143.453 228.800,142.789 228.957,142.580 229.148 C 142.371 229.340,140.670 230.261,138.800 231.195 C 136.930 232.129,135.130 233.053,134.800 233.249 C 134.470 233.445,133.930 233.725,133.600 233.871 C 133.270 234.017,132.491 234.556,131.869 235.068 C 131.247 235.581,130.553 236.000,130.327 236.000 C 130.101 236.000,129.411 236.405,128.795 236.900 C 128.179 237.395,126.710 238.382,125.531 239.093 C 124.352 239.804,122.406 241.379,121.207 242.593 C 120.008 243.807,118.826 244.800,118.579 244.800 C 118.161 244.800,116.179 246.853,110.761 252.901 C 109.529 254.275,108.096 256.210,107.575 257.200 C 107.055 258.190,106.177 259.502,105.626 260.115 C 104.608 261.245,102.557 264.651,101.360 267.200 C 100.999 267.970,100.544 268.870,100.349 269.200 C 100.154 269.530,99.704 270.430,99.349 271.200 C 98.993 271.970,98.544 272.913,98.351 273.295 C 98.158 273.677,98.000 274.337,98.000 274.762 C 98.000 275.187,97.741 276.045,97.425 276.668 C 96.612 278.269,95.116 283.481,94.887 285.509 C 94.781 286.449,94.538 287.315,94.347 287.433 C 94.156 287.551,94.000 288.874,94.000 290.373 C 94.000 291.873,93.769 293.797,93.487 294.650 C 92.840 296.606,92.892 307.052,93.552 307.712 C 93.798 307.958,94.000 308.413,94.000 308.723 C 94.000 309.385,97.730 313.200,98.377 313.200 C 98.620 313.200,99.960 313.920,101.353 314.800 C 102.893 315.773,104.370 316.400,105.120 316.400 C 105.798 316.400,106.464 316.580,106.600 316.800 C 106.736 317.020,107.298 317.200,107.850 317.200 C 108.401 317.200,109.177 317.374,109.574 317.586 C 111.440 318.585,118.850 319.490,128.800 319.935 C 132.650 320.107,136.160 320.430,136.600 320.652 C 137.625 321.171,262.435 321.079,263.242 320.559 C 263.549 320.362,266.590 320.067,270.000 319.905 C 279.895 319.434,282.964 319.162,283.513 318.706 C 283.795 318.472,285.236 318.142,286.713 317.974 C 290.701 317.520,295.187 316.501,296.242 315.809 C 296.753 315.474,297.524 315.200,297.955 315.200 C 298.386 315.200,299.273 314.750,299.927 314.200 C 300.581 313.650,301.237 313.200,301.384 313.200 C 301.532 313.200,302.243 312.750,302.964 312.200 C 303.686 311.650,304.473 311.200,304.714 311.200 C 306.287 311.200,307.855 295.644,306.430 294.180 C 306.227 293.971,305.971 292.450,305.861 290.800 C 305.629 287.292,305.279 284.920,304.828 283.800 C 304.402 282.739,303.622 279.788,303.243 277.800 C 303.075 276.920,302.547 275.401,302.069 274.425 C 301.591 273.449,301.200 272.337,301.200 271.956 C 301.200 271.574,300.750 270.727,300.200 270.073 C 299.650 269.419,299.200 268.530,299.200 268.096 C 299.200 267.663,298.799 266.797,298.308 266.174 C 297.817 265.550,297.010 264.221,296.514 263.220 C 296.017 262.219,294.808 260.320,293.826 259.000 C 292.844 257.680,292.027 256.420,292.011 256.200 C 291.995 255.980,290.906 254.723,289.591 253.406 C 288.276 252.090,287.200 250.819,287.200 250.582 C 287.200 250.077,280.230 243.074,279.498 242.843 C 279.224 242.756,278.273 242.036,277.384 241.243 C 276.496 240.449,274.989 239.350,274.036 238.800 C 273.083 238.250,271.650 237.241,270.852 236.557 C 270.053 235.874,268.680 234.989,267.800 234.591 C 266.920 234.194,265.823 233.533,265.362 233.123 C 264.162 232.055,261.577 230.800,260.577 230.800 C 260.108 230.800,259.401 230.444,259.007 230.008 C 258.613 229.572,257.640 229.109,256.845 228.979 C 256.050 228.849,255.040 228.591,254.600 228.405 C 254.160 228.220,252.810 227.761,251.600 227.386 C 250.390 227.010,249.087 226.545,248.705 226.352 C 248.323 226.158,247.508 226.000,246.894 226.000 C 246.280 226.000,245.423 225.755,244.989 225.455 C 244.555 225.156,243.210 224.787,242.000 224.636 C 234.952 223.757,232.220 223.536,228.900 223.581 C 215.671 223.757,175.463 223.633,171.945 223.405 C 169.032 223.217,167.606 223.267,167.422 223.565 \",\n  stroke: \"none\",\n  fill: \"#64d3e3\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path1\",\n  d: \"M186.991 5.986 C 187.108 6.175,186.888 6.279,186.502 6.216 C 186.116 6.154,185.615 6.249,185.388 6.427 C 185.161 6.606,183.721 6.787,182.188 6.830 C 180.655 6.873,179.140 7.109,178.823 7.354 C 178.383 7.694,178.318 7.681,178.547 7.300 C 178.712 7.025,178.667 6.800,178.447 6.800 C 178.227 6.800,177.934 6.983,177.796 7.207 C 177.658 7.430,177.358 7.498,177.131 7.357 C 176.369 6.886,173.172 6.831,173.458 7.294 C 173.607 7.536,173.538 7.609,173.298 7.461 C 172.736 7.113,171.543 7.583,171.825 8.041 C 171.946 8.237,171.554 8.211,170.953 7.982 C 169.721 7.514,167.845 7.797,166.490 8.655 C 165.990 8.972,164.910 9.225,164.090 9.217 C 161.228 9.190,157.554 9.828,157.181 10.417 C 156.978 10.738,156.804 10.820,156.793 10.600 C 156.783 10.380,156.510 10.549,156.187 10.976 C 155.864 11.404,155.600 11.541,155.600 11.281 C 155.600 10.749,153.939 10.809,153.542 11.356 C 153.302 11.687,152.505 11.854,150.000 12.101 C 148.805 12.219,147.993 12.846,148.319 13.400 C 148.448 13.620,148.294 13.595,147.977 13.344 C 147.270 12.785,145.369 12.871,145.480 13.457 C 145.527 13.704,145.142 13.802,144.560 13.690 C 143.919 13.568,143.243 13.780,142.680 14.281 C 142.158 14.745,141.352 15.020,140.700 14.956 C 140.095 14.897,139.600 15.028,139.600 15.248 C 139.600 15.467,139.420 15.536,139.200 15.400 C 138.980 15.264,138.800 15.338,138.800 15.564 C 138.800 15.790,138.500 15.860,138.134 15.719 C 137.739 15.568,137.569 15.626,137.716 15.864 C 137.855 16.090,137.580 16.235,137.081 16.197 C 136.597 16.160,135.962 16.416,135.670 16.765 C 135.254 17.265,135.202 17.272,135.429 16.800 C 135.654 16.331,135.606 16.302,135.210 16.669 C 134.931 16.927,134.454 17.042,134.151 16.926 C 133.848 16.810,133.600 16.924,133.600 17.181 C 133.600 17.437,133.420 17.536,133.200 17.400 C 132.980 17.264,132.800 17.354,132.800 17.600 C 132.800 17.846,132.641 17.949,132.447 17.829 C 132.253 17.709,131.647 17.963,131.101 18.392 C 130.554 18.822,129.993 19.060,129.854 18.920 C 129.714 18.781,129.600 18.922,129.600 19.233 C 129.600 19.641,129.077 19.800,127.733 19.800 C 126.596 19.800,125.802 19.995,125.700 20.300 C 125.608 20.575,125.278 20.800,124.967 20.800 C 124.655 20.800,124.397 21.025,124.394 21.300 C 124.390 21.633,124.258 21.600,124.000 21.200 C 123.616 20.606,123.388 21.069,123.554 22.104 C 123.581 22.272,123.287 22.213,122.901 21.974 C 121.954 21.386,120.002 22.135,119.994 23.090 C 119.989 23.697,119.930 23.713,119.587 23.200 C 119.236 22.675,119.135 22.686,118.782 23.283 C 118.536 23.700,118.123 23.869,117.724 23.715 C 117.250 23.534,117.160 23.611,117.396 23.994 C 117.619 24.354,117.570 24.428,117.242 24.226 C 116.380 23.693,110.919 26.734,111.502 27.422 C 111.666 27.616,111.485 27.533,111.100 27.238 C 110.539 26.809,110.400 26.805,110.400 27.218 C 110.400 27.501,110.280 27.613,110.132 27.466 C 109.763 27.096,108.400 28.391,108.400 29.111 C 108.400 29.586,108.286 29.603,107.804 29.203 C 107.311 28.794,107.143 28.872,106.829 29.654 C 106.621 30.174,106.439 30.363,106.425 30.073 C 106.392 29.387,104.893 29.824,103.774 30.846 C 103.320 31.261,102.724 31.600,102.451 31.600 C 102.176 31.600,102.081 31.807,102.238 32.062 C 102.414 32.347,102.348 32.415,102.065 32.240 C 101.537 31.914,99.631 33.174,99.613 33.863 C 99.605 34.126,99.256 34.235,98.800 34.116 C 98.335 33.994,98.000 34.104,98.000 34.377 C 98.000 34.636,97.821 34.736,97.602 34.601 C 97.383 34.466,96.994 34.815,96.737 35.377 C 96.481 35.940,96.110 36.400,95.912 36.400 C 95.715 36.400,95.688 36.175,95.853 35.900 C 96.026 35.613,95.839 35.656,95.415 36.000 C 95.009 36.330,94.570 36.567,94.439 36.526 C 94.307 36.486,94.252 36.708,94.316 37.020 C 94.391 37.386,94.214 37.503,93.816 37.351 C 93.477 37.221,93.200 37.314,93.200 37.557 C 93.200 37.801,92.865 38.000,92.455 38.000 C 92.045 38.000,91.203 38.495,90.585 39.100 C 89.967 39.705,89.597 39.930,89.763 39.600 C 89.929 39.270,89.600 39.505,89.032 40.122 C 88.465 40.740,88.000 41.118,88.000 40.963 C 88.000 40.808,87.474 41.232,86.831 41.905 C 86.188 42.578,85.544 43.011,85.401 42.867 C 85.257 42.724,84.965 42.920,84.750 43.303 C 84.536 43.686,84.099 44.000,83.780 44.000 C 83.461 44.000,83.200 44.210,83.200 44.467 C 83.200 44.723,83.082 44.815,82.937 44.670 C 82.575 44.308,81.556 45.205,81.828 45.645 C 81.949 45.840,81.803 46.000,81.504 46.000 C 81.205 46.000,79.843 46.900,78.478 48.000 C 77.113 49.100,75.817 50.000,75.598 50.000 C 75.379 50.000,75.200 50.270,75.200 50.600 C 75.200 50.930,74.930 51.200,74.600 51.200 C 74.270 51.200,74.000 51.481,74.000 51.824 C 74.000 52.167,73.841 52.349,73.647 52.229 C 73.452 52.109,72.759 52.635,72.107 53.399 C 71.455 54.163,70.808 54.675,70.670 54.536 C 70.532 54.398,70.306 54.580,70.168 54.940 C 70.029 55.301,69.755 55.496,69.558 55.374 C 69.361 55.252,69.200 55.300,69.200 55.480 C 69.200 55.661,68.761 56.282,68.224 56.861 C 67.687 57.440,67.372 58.052,67.524 58.221 C 67.676 58.390,67.574 58.398,67.297 58.239 C 67.004 58.070,66.695 58.209,66.555 58.572 C 66.424 58.915,66.155 59.096,65.958 58.974 C 65.761 58.852,65.600 59.029,65.600 59.366 C 65.600 59.703,65.054 60.262,64.387 60.607 C 63.720 60.952,63.283 61.411,63.417 61.627 C 63.550 61.843,63.421 61.970,63.130 61.910 C 62.838 61.849,62.645 62.025,62.700 62.300 C 62.755 62.575,62.665 62.779,62.500 62.753 C 61.710 62.628,61.460 62.851,62.000 63.200 C 62.483 63.512,62.419 63.589,61.676 63.594 C 61.164 63.597,60.863 63.778,61.000 64.000 C 61.136 64.220,61.081 64.400,60.878 64.400 C 60.675 64.400,59.899 64.958,59.154 65.640 C 58.409 66.322,58.067 66.736,58.393 66.559 C 58.719 66.383,58.567 66.770,58.056 67.419 C 57.546 68.069,57.009 68.603,56.864 68.606 C 56.353 68.618,55.589 69.259,55.758 69.533 C 55.853 69.685,55.663 70.258,55.337 70.805 C 54.909 71.525,54.809 71.579,54.977 71.000 C 55.216 70.180,52.777 72.583,51.629 74.299 C 51.315 74.768,50.865 75.118,50.629 75.076 C 50.393 75.034,50.225 75.315,50.256 75.700 C 50.286 76.085,50.057 76.400,49.746 76.400 C 49.435 76.400,49.017 76.805,48.818 77.300 C 48.620 77.795,47.974 78.740,47.384 79.400 C 45.217 81.823,44.317 83.206,44.535 83.776 C 44.681 84.156,44.568 84.286,44.210 84.149 C 43.491 83.873,42.591 85.448,43.303 85.736 C 43.576 85.847,43.395 85.951,42.900 85.968 C 42.405 85.986,42.000 86.199,42.000 86.443 C 42.000 86.686,42.279 86.778,42.621 86.647 C 42.986 86.507,43.138 86.577,42.991 86.815 C 42.853 87.039,42.511 87.171,42.231 87.111 C 41.677 86.990,39.600 89.239,39.600 89.958 C 39.600 90.201,39.426 90.400,39.213 90.400 C 38.999 90.400,38.929 90.670,39.055 91.000 C 39.198 91.372,39.053 91.600,38.675 91.600 C 38.321 91.600,37.952 92.106,37.799 92.803 C 37.654 93.465,37.382 93.912,37.195 93.797 C 36.835 93.575,36.273 94.270,36.148 95.090 C 36.033 95.845,34.538 97.605,34.253 97.320 C 34.114 97.181,34.000 97.429,34.000 97.872 C 34.000 98.315,33.621 99.110,33.158 99.639 C 32.288 100.631,31.422 102.373,31.535 102.900 C 31.571 103.065,31.409 103.200,31.176 103.200 C 30.943 103.200,30.852 103.361,30.974 103.558 C 31.096 103.755,30.925 104.020,30.594 104.147 C 30.263 104.274,30.037 104.518,30.091 104.689 C 30.257 105.212,29.079 107.721,28.303 108.497 C 27.900 108.900,27.678 109.403,27.809 109.615 C 27.940 109.827,27.877 110.000,27.668 110.000 C 27.460 110.000,27.174 110.613,27.034 111.361 C 26.893 112.110,26.520 112.822,26.205 112.943 C 25.390 113.255,24.805 115.647,25.359 116.400 C 25.741 116.920,25.707 116.927,25.107 116.457 C 24.494 115.977,24.366 116.038,24.006 116.983 C 23.782 117.572,23.402 118.423,23.160 118.875 C 22.840 119.472,22.840 119.622,23.160 119.425 C 24.011 118.899,23.589 119.962,22.700 120.585 C 22.205 120.932,21.849 121.304,21.908 121.412 C 21.968 121.520,21.729 122.163,21.379 122.841 C 21.028 123.520,20.843 124.176,20.967 124.300 C 21.091 124.425,21.008 124.750,20.781 125.022 C 20.555 125.295,20.293 125.915,20.200 126.400 C 20.107 126.885,19.813 127.543,19.547 127.863 C 19.282 128.183,19.003 129.011,18.927 129.702 C 18.851 130.394,18.646 131.059,18.472 131.180 C 18.191 131.374,17.040 133.878,16.990 134.400 C 16.980 134.510,16.743 135.012,16.464 135.515 C 16.184 136.018,16.067 136.828,16.204 137.315 C 16.377 137.932,16.339 138.036,16.078 137.659 C 15.796 137.254,15.648 137.404,15.483 138.259 C 15.126 140.110,14.988 140.552,14.467 141.500 C 14.069 142.223,14.073 142.401,14.486 142.406 C 14.865 142.411,14.877 142.491,14.531 142.711 C 13.966 143.070,12.810 146.277,13.130 146.597 C 13.519 146.986,13.549 148.016,13.165 147.778 C 12.964 147.654,12.800 147.833,12.800 148.176 C 12.800 148.519,12.614 148.800,12.386 148.800 C 12.102 148.800,12.101 149.041,12.383 149.568 C 12.666 150.096,12.663 150.379,12.376 150.475 C 12.146 150.551,11.780 151.331,11.563 152.207 C 10.839 155.129,10.724 156.094,11.132 155.842 C 11.362 155.700,11.438 155.933,11.314 156.406 C 11.198 156.849,10.917 157.327,10.690 157.468 C 10.431 157.628,10.396 157.513,10.597 157.162 C 10.858 156.704,10.816 156.694,10.373 157.106 C 9.888 157.557,9.647 158.852,9.076 164.088 C 8.976 165.009,9.065 165.483,9.311 165.331 C 9.530 165.196,9.290 165.652,8.779 166.343 C 7.865 167.580,7.862 167.611,8.624 168.188 C 9.051 168.511,9.181 168.780,8.913 168.787 C 8.625 168.795,8.524 169.087,8.666 169.500 C 8.866 170.079,8.789 170.061,8.225 169.400 C 7.497 168.547,7.490 169.634,8.210 171.800 C 8.425 172.447,8.393 172.485,8.044 172.000 C 7.618 171.407,7.384 171.835,7.553 172.900 C 7.579 173.065,7.420 173.200,7.200 173.200 C 6.980 173.200,6.800 173.481,6.800 173.824 C 6.800 174.167,6.968 174.343,7.174 174.216 C 7.407 174.072,7.407 174.479,7.174 175.290 C 6.698 176.950,6.710 177.142,7.244 176.400 C 7.590 175.919,7.618 175.959,7.386 176.600 C 7.226 177.040,7.013 179.200,6.911 181.400 C 6.809 183.600,6.582 185.454,6.405 185.519 C 6.229 185.585,6.184 186.018,6.305 186.482 C 6.469 187.108,6.391 187.241,6.001 187.000 C 5.467 186.671,5.553 187.824,6.210 189.800 C 6.425 190.447,6.393 190.485,6.044 190.000 C 5.472 189.205,5.428 209.496,5.999 210.997 C 6.264 211.694,6.264 211.963,5.999 211.799 C 5.779 211.664,5.600 211.934,5.600 212.400 C 5.600 212.866,5.778 213.137,5.995 213.003 C 6.227 212.859,6.286 213.032,6.137 213.420 C 5.998 213.783,6.089 214.208,6.339 214.363 C 6.630 214.542,6.826 216.338,6.880 219.322 C 6.926 221.895,7.091 224.000,7.247 224.000 C 7.595 224.000,7.490 224.820,7.050 225.524 C 6.870 225.812,6.905 226.532,7.129 227.124 C 7.352 227.716,7.630 229.140,7.747 230.289 C 7.864 231.437,8.181 232.787,8.452 233.289 C 8.722 233.790,8.998 234.920,9.064 235.800 C 9.288 238.791,9.966 241.699,10.603 242.404 C 11.028 242.872,11.151 243.454,10.976 244.153 C 10.793 244.883,10.872 245.200,11.237 245.200 C 11.625 245.200,11.644 245.316,11.309 245.651 C 11.044 245.916,10.991 246.372,11.180 246.751 C 11.861 248.122,12.439 250.413,12.201 250.798 C 12.065 251.019,12.113 251.200,12.310 251.200 C 12.506 251.200,12.695 251.425,12.730 251.700 C 12.875 252.859,13.104 253.904,13.584 255.600 C 13.864 256.590,14.131 257.650,14.178 257.955 C 14.225 258.261,14.558 258.726,14.918 258.989 C 15.278 259.252,15.432 259.633,15.261 259.834 C 15.090 260.035,15.261 261.100,15.643 262.200 C 16.024 263.300,16.350 264.031,16.368 263.824 C 16.386 263.616,16.654 263.795,16.965 264.219 C 17.275 264.644,17.415 265.173,17.276 265.396 C 16.855 266.067,16.846 266.800,17.259 266.800 C 17.473 266.800,17.544 266.968,17.417 267.172 C 17.291 267.377,17.370 267.658,17.593 267.796 C 17.817 267.934,18.000 268.397,18.000 268.824 C 18.000 269.251,18.191 269.600,18.424 269.600 C 18.657 269.600,18.736 269.780,18.600 270.000 C 18.464 270.220,18.563 270.400,18.819 270.400 C 19.076 270.400,19.179 270.678,19.047 271.021 C 18.896 271.416,18.972 271.541,19.256 271.365 C 19.527 271.198,19.626 271.308,19.508 271.644 C 19.400 271.950,19.740 273.055,20.263 274.100 C 20.786 275.145,21.116 276.000,20.996 276.000 C 20.877 276.000,21.091 276.585,21.472 277.300 C 21.853 278.015,22.127 278.735,22.082 278.900 C 22.037 279.065,22.191 279.200,22.424 279.200 C 22.657 279.200,22.748 279.361,22.626 279.558 C 22.504 279.755,22.685 280.024,23.028 280.155 C 23.370 280.287,23.549 280.559,23.424 280.761 C 23.299 280.963,23.587 281.999,24.064 283.064 C 24.541 284.129,24.901 285.135,24.865 285.300 C 24.829 285.465,24.991 285.600,25.224 285.600 C 25.457 285.600,25.544 285.768,25.417 285.973 C 25.290 286.178,25.590 286.628,26.082 286.973 C 26.575 287.318,26.826 287.600,26.640 287.600 C 26.454 287.600,26.510 287.851,26.765 288.158 C 27.020 288.465,27.194 288.870,27.152 289.058 C 27.014 289.683,28.383 292.352,29.298 293.242 C 29.794 293.723,29.930 293.970,29.600 293.790 C 29.166 293.553,29.194 293.684,29.701 294.264 C 30.086 294.704,30.286 295.181,30.144 295.323 C 30.002 295.465,30.180 295.694,30.540 295.832 C 30.901 295.971,31.096 296.245,30.974 296.442 C 30.852 296.639,30.954 296.800,31.200 296.800 C 31.446 296.800,31.553 296.953,31.437 297.139 C 31.322 297.326,31.571 297.847,31.990 298.297 C 32.409 298.747,32.643 299.224,32.509 299.357 C 32.376 299.491,32.477 299.600,32.733 299.600 C 32.990 299.600,33.156 299.735,33.103 299.900 C 32.944 300.394,34.248 302.018,34.557 301.710 C 34.714 301.553,34.724 301.734,34.578 302.112 C 34.414 302.541,34.506 302.800,34.824 302.800 C 35.104 302.800,35.217 302.917,35.074 303.059 C 34.931 303.202,35.200 303.653,35.671 304.062 C 36.143 304.471,36.417 304.916,36.281 305.052 C 36.013 305.320,37.880 308.000,38.698 308.520 C 38.974 308.696,39.200 309.092,39.200 309.400 C 39.200 309.708,39.486 310.120,39.836 310.316 C 40.186 310.512,40.451 310.794,40.426 310.943 C 40.341 311.448,42.269 313.997,42.535 313.731 C 42.681 313.586,42.800 313.777,42.800 314.157 C 42.800 314.577,42.981 314.735,43.262 314.562 C 43.556 314.380,43.615 314.453,43.423 314.763 C 43.240 315.058,43.847 316.173,44.961 317.591 C 45.972 318.879,46.800 320.095,46.800 320.294 C 46.800 320.975,48.734 322.386,48.968 321.875 C 49.088 321.614,49.141 321.760,49.085 322.200 C 49.029 322.646,49.475 323.480,50.092 324.087 C 50.702 324.684,51.200 325.331,51.200 325.525 C 51.200 326.103,52.641 327.226,52.966 326.901 C 53.131 326.735,53.207 326.870,53.133 327.200 C 53.060 327.532,53.236 327.751,53.530 327.690 C 53.821 327.630,53.953 327.752,53.823 327.963 C 53.693 328.173,53.948 328.599,54.391 328.909 C 54.833 329.218,55.076 329.591,54.931 329.736 C 54.786 329.881,54.887 330.000,55.157 330.000 C 55.427 330.000,55.537 330.178,55.403 330.395 C 55.263 330.622,55.423 330.689,55.779 330.553 C 56.345 330.335,56.600 330.792,56.437 331.730 C 56.406 331.911,56.520 331.985,56.690 331.893 C 56.987 331.734,58.403 332.984,58.398 333.402 C 58.389 334.079,59.432 335.086,59.941 334.891 C 60.368 334.727,60.468 334.847,60.290 335.310 C 60.114 335.767,60.212 335.893,60.620 335.737 C 60.951 335.610,61.200 335.748,61.200 336.059 C 61.200 336.709,63.599 339.047,64.105 338.890 C 64.300 338.830,64.345 338.965,64.206 339.190 C 64.067 339.416,64.131 339.600,64.349 339.600 C 64.568 339.600,64.868 339.984,65.017 340.453 C 65.229 341.123,65.363 341.187,65.638 340.753 C 65.984 340.206,66.207 340.752,66.037 341.730 C 66.006 341.911,66.165 341.945,66.390 341.806 C 66.616 341.667,66.800 341.743,66.800 341.976 C 66.800 342.209,66.991 342.400,67.224 342.400 C 67.457 342.400,67.538 342.175,67.405 341.900 C 67.272 341.625,67.442 341.773,67.784 342.230 C 69.427 344.426,71.121 346.031,71.970 346.194 C 72.486 346.294,73.019 346.499,73.154 346.651 C 73.289 346.803,73.044 346.799,72.609 346.642 C 71.908 346.388,71.926 346.470,72.768 347.365 C 73.289 347.921,73.861 348.286,74.038 348.176 C 74.215 348.067,74.558 348.348,74.800 348.800 C 75.042 349.252,75.416 349.514,75.630 349.381 C 75.844 349.249,75.994 349.289,75.963 349.470 C 75.788 350.477,76.054 350.837,76.800 350.600 C 77.277 350.449,77.600 350.528,77.600 350.797 C 77.600 351.051,77.382 351.116,77.100 350.947 C 76.737 350.729,76.745 350.826,77.129 351.299 C 77.427 351.667,77.937 351.846,78.295 351.708 C 78.717 351.546,78.834 351.622,78.642 351.932 C 78.483 352.189,78.511 352.400,78.704 352.400 C 78.897 352.400,79.762 353.030,80.627 353.800 C 81.492 354.570,82.526 355.200,82.924 355.200 C 83.322 355.200,83.548 355.361,83.426 355.558 C 83.304 355.755,83.483 356.023,83.823 356.154 C 84.163 356.284,84.354 356.249,84.247 356.075 C 84.139 355.902,84.478 355.760,85.000 355.760 C 85.522 355.760,85.858 355.907,85.747 356.087 C 85.636 356.266,85.354 356.295,85.120 356.151 C 84.877 356.000,84.775 356.125,84.881 356.444 C 84.983 356.750,85.277 357.000,85.533 357.000 C 85.790 357.000,85.955 357.132,85.900 357.292 C 85.795 357.599,87.701 359.072,87.936 358.866 C 88.011 358.800,88.299 359.056,88.576 359.434 C 88.889 359.863,89.276 360.000,89.601 359.799 C 89.926 359.598,90.026 359.634,89.866 359.893 C 89.568 360.376,90.544 361.322,90.937 360.930 C 91.082 360.785,91.200 360.977,91.200 361.357 C 91.200 361.737,91.380 361.936,91.600 361.800 C 91.820 361.664,92.000 361.754,92.000 362.000 C 92.000 362.246,92.161 362.348,92.358 362.226 C 92.555 362.104,92.824 362.285,92.955 362.628 C 93.087 362.970,93.357 363.150,93.555 363.028 C 93.754 362.905,94.024 363.085,94.155 363.428 C 94.287 363.770,94.576 363.939,94.797 363.802 C 95.019 363.665,95.200 363.743,95.200 363.976 C 95.200 364.209,95.650 364.400,96.200 364.400 C 96.943 364.400,97.200 364.612,97.200 365.224 C 97.200 365.677,97.380 365.936,97.600 365.800 C 97.820 365.664,98.000 365.763,98.000 366.019 C 98.000 366.276,98.255 366.388,98.567 366.268 C 98.879 366.148,99.240 366.328,99.370 366.667 C 99.506 367.021,99.867 367.183,100.219 367.048 C 100.558 366.918,100.927 367.066,101.047 367.379 C 101.167 367.690,101.789 368.127,102.431 368.351 C 103.073 368.575,104.256 369.259,105.060 369.873 C 105.864 370.486,106.719 371.008,106.961 371.033 C 107.202 371.058,107.636 371.106,107.924 371.139 C 108.212 371.173,108.336 371.380,108.200 371.600 C 107.978 371.960,108.503 372.173,109.300 372.047 C 109.465 372.021,109.600 372.162,109.600 372.361 C 109.600 372.722,111.934 373.765,112.500 373.657 C 112.665 373.626,112.800 373.780,112.800 374.000 C 112.800 374.220,113.168 374.400,113.617 374.400 C 114.066 374.400,114.813 374.754,115.277 375.186 C 115.741 375.619,116.274 375.878,116.461 375.763 C 116.647 375.647,116.800 375.756,116.800 376.003 C 116.800 376.272,117.123 376.351,117.600 376.200 C 118.077 376.049,118.400 376.128,118.400 376.397 C 118.400 376.644,118.580 376.736,118.800 376.600 C 119.020 376.464,119.200 376.554,119.200 376.800 C 119.200 377.046,119.361 377.148,119.558 377.026 C 119.755 376.904,120.024 377.085,120.155 377.428 C 120.287 377.770,120.560 377.948,120.763 377.823 C 120.966 377.698,121.223 377.821,121.335 378.098 C 121.498 378.500,121.610 378.500,121.894 378.099 C 122.166 377.715,122.444 377.781,123.095 378.388 C 123.690 378.942,124.000 379.032,124.139 378.688 C 124.291 378.312,124.344 378.315,124.368 378.700 C 124.386 378.975,124.676 379.200,125.013 379.200 C 125.349 379.200,125.729 379.470,125.855 379.800 C 125.982 380.130,126.257 380.400,126.466 380.400 C 126.676 380.400,126.716 380.175,126.555 379.900 C 126.394 379.625,126.609 379.702,127.032 380.072 C 127.771 380.717,129.764 381.691,130.600 381.816 C 130.820 381.848,131.540 382.111,132.200 382.400 C 132.860 382.689,133.846 382.999,134.390 383.088 C 134.935 383.178,135.578 383.416,135.820 383.616 C 136.061 383.817,136.656 383.905,137.140 383.811 C 137.712 383.701,137.926 383.797,137.748 384.084 C 137.567 384.376,137.767 384.450,138.338 384.300 C 138.901 384.153,139.337 384.306,139.589 384.737 C 139.802 385.102,139.981 385.259,139.988 385.086 C 139.995 384.913,140.405 384.996,140.900 385.270 C 141.395 385.544,142.043 385.718,142.340 385.657 C 142.648 385.594,142.762 385.737,142.607 385.989 C 142.421 386.289,142.652 386.352,143.323 386.184 C 143.879 386.044,144.432 386.127,144.584 386.374 C 144.733 386.616,145.023 386.709,145.228 386.583 C 145.432 386.456,145.600 386.543,145.600 386.776 C 145.600 387.009,145.881 387.200,146.224 387.200 C 146.606 387.200,146.738 387.007,146.565 386.700 C 146.339 386.300,146.390 386.300,146.821 386.700 C 147.118 386.975,147.662 387.200,148.031 387.200 C 148.400 387.200,148.920 387.462,149.186 387.783 C 149.495 388.156,150.067 388.287,150.769 388.146 C 151.497 388.001,152.094 388.151,152.535 388.592 C 153.155 389.212,153.202 389.208,153.228 388.529 C 153.253 387.873,153.291 387.880,153.600 388.600 C 153.832 389.139,153.955 389.204,153.978 388.800 C 154.006 388.310,154.075 388.299,154.356 388.743 C 154.563 389.070,155.019 389.184,155.503 389.031 C 156.046 388.859,156.387 388.989,156.557 389.433 C 156.719 389.854,157.097 390.016,157.604 389.883 C 158.042 389.769,158.500 389.838,158.623 390.038 C 158.955 390.574,160.302 390.477,160.535 389.900 C 160.649 389.617,160.751 389.722,160.768 390.143 C 160.789 390.618,161.007 390.806,161.374 390.665 C 161.690 390.544,162.036 390.660,162.144 390.922 C 162.288 391.275,162.439 391.257,162.721 390.855 C 163.044 390.394,163.137 390.394,163.320 390.855 C 163.474 391.242,163.546 391.255,163.568 390.900 C 163.586 390.625,163.915 390.403,164.300 390.406 C 164.898 390.411,164.913 390.469,164.400 390.800 C 163.940 391.097,164.085 391.189,165.020 391.194 C 165.691 391.197,166.456 391.416,166.720 391.680 C 166.984 391.944,167.200 392.012,167.200 391.831 C 167.200 391.650,167.470 391.726,167.800 392.000 C 168.238 392.363,168.542 392.380,168.927 392.061 C 169.522 391.567,172.564 392.210,172.225 392.759 C 171.966 393.179,182.897 393.034,183.586 392.608 C 183.927 392.398,184.029 392.430,183.864 392.696 C 183.609 393.109,184.417 393.623,185.600 393.801 C 185.930 393.851,186.722 394.032,187.360 394.204 C 188.027 394.384,188.425 394.365,188.298 394.158 C 188.044 393.748,195.458 393.724,195.867 394.134 C 196.245 394.512,203.912 394.465,204.148 394.084 C 204.256 393.910,203.682 393.808,202.872 393.858 L 201.400 393.950 202.800 393.669 C 203.690 393.491,204.598 393.583,205.291 393.920 C 205.963 394.246,206.619 394.317,206.999 394.105 C 207.338 393.915,208.647 393.879,209.908 394.024 C 211.168 394.170,212.380 394.186,212.600 394.059 C 212.820 393.933,213.495 393.881,214.101 393.945 C 214.827 394.021,215.287 393.838,215.452 393.409 C 215.666 392.851,216.193 392.790,219.102 392.985 C 221.465 393.144,222.679 393.067,223.081 392.732 C 223.443 392.432,223.762 392.397,223.930 392.639 C 224.265 393.120,226.400 393.130,226.400 392.651 C 226.400 392.459,226.699 392.549,227.065 392.851 C 227.586 393.281,227.767 393.291,227.899 392.898 C 227.992 392.621,228.264 392.516,228.502 392.663 C 228.767 392.827,228.848 392.701,228.709 392.341 C 228.532 391.880,228.748 391.790,229.698 391.929 C 230.617 392.064,230.836 391.982,230.595 391.592 C 230.384 391.251,230.435 391.174,230.745 391.366 C 231.002 391.525,231.109 391.823,230.983 392.028 C 230.856 392.232,231.134 392.400,231.600 392.400 C 232.066 392.400,232.342 392.229,232.213 392.021 C 232.084 391.812,232.325 391.708,232.747 391.790 C 233.170 391.871,233.855 391.622,234.270 391.236 C 235.098 390.464,236.340 390.305,237.068 390.877 C 237.375 391.118,237.666 391.011,237.917 390.563 C 238.216 390.028,238.655 389.929,239.949 390.102 C 240.943 390.236,241.600 390.163,241.600 389.919 C 241.600 389.686,242.026 389.620,242.600 389.764 C 243.433 389.973,243.600 389.873,243.600 389.159 C 243.600 388.479,243.713 388.396,244.148 388.757 C 244.737 389.246,245.858 389.190,246.762 388.627 C 247.146 388.387,247.234 388.422,247.038 388.738 C 246.881 388.992,246.943 389.200,247.176 389.200 C 247.409 389.200,247.600 389.009,247.600 388.776 C 247.600 388.543,247.780 388.464,248.000 388.600 C 248.220 388.736,248.400 388.634,248.400 388.374 C 248.400 388.055,248.825 387.982,249.700 388.149 C 250.668 388.335,250.847 388.292,250.400 387.982 C 249.923 387.650,250.005 387.588,250.800 387.682 C 251.391 387.752,251.764 387.611,251.713 387.338 C 251.665 387.084,251.935 386.634,252.313 386.338 C 252.928 385.856,252.944 385.871,252.469 386.478 C 251.989 387.091,252.077 387.149,253.369 387.078 C 254.156 387.035,254.800 386.899,254.800 386.776 C 254.800 386.654,255.083 386.204,255.430 385.776 C 255.776 385.349,255.926 385.256,255.764 385.568 C 255.551 385.978,255.647 386.068,256.109 385.890 C 256.460 385.755,256.817 385.850,256.900 386.101 C 256.999 386.396,257.570 386.236,258.526 385.646 C 259.337 385.145,260.003 384.884,260.006 385.067 C 260.009 385.250,260.144 385.220,260.306 385.000 C 260.793 384.338,262.185 383.348,261.853 383.900 C 261.666 384.211,261.779 384.400,262.153 384.400 C 262.483 384.400,262.866 384.217,263.004 383.993 C 263.142 383.770,263.411 383.683,263.600 383.800 C 263.790 383.917,264.233 383.605,264.584 383.107 C 264.975 382.551,265.334 382.360,265.511 382.613 C 265.941 383.229,266.798 383.090,267.366 382.314 C 267.706 381.849,267.999 381.759,268.274 382.034 C 268.550 382.310,269.263 382.131,270.485 381.482 C 272.330 380.500,273.965 379.880,274.500 379.957 C 274.786 379.998,274.956 379.364,274.842 378.683 C 274.812 378.508,275.106 378.534,275.494 378.740 C 276.211 379.121,277.420 378.354,276.909 377.843 C 276.776 377.709,277.067 377.600,277.557 377.600 C 278.163 377.600,278.351 377.760,278.147 378.100 C 277.943 378.440,278.063 378.424,278.523 378.051 C 278.895 377.749,279.200 377.634,279.200 377.795 C 279.200 377.957,279.574 377.664,280.030 377.144 C 280.487 376.625,280.747 376.425,280.607 376.700 C 280.210 377.481,280.851 377.289,281.939 376.300 C 282.483 375.805,282.799 375.625,282.641 375.900 C 282.482 376.175,282.543 376.400,282.776 376.400 C 283.009 376.400,283.200 376.220,283.200 376.000 C 283.200 375.780,283.335 375.631,283.500 375.670 C 283.997 375.786,286.000 374.698,286.000 374.312 C 286.000 374.115,286.171 374.058,286.380 374.188 C 286.779 374.434,290.778 372.489,291.290 371.800 C 291.489 371.533,291.595 371.533,291.608 371.800 C 291.619 372.020,291.866 371.771,292.157 371.246 C 292.495 370.637,292.786 370.455,292.964 370.742 C 293.154 371.050,293.508 370.945,294.082 370.410 C 294.543 369.980,295.075 369.723,295.263 369.839 C 295.452 369.956,295.713 369.770,295.845 369.428 C 295.976 369.085,296.225 368.892,296.397 368.998 C 296.569 369.104,296.930 368.925,297.200 368.600 C 297.470 368.275,297.850 368.107,298.045 368.228 C 298.240 368.349,298.400 368.246,298.400 368.000 C 298.400 367.754,298.553 367.647,298.739 367.763 C 298.926 367.878,299.466 367.612,299.939 367.171 C 300.413 366.730,300.803 366.511,300.806 366.684 C 300.810 366.858,301.350 366.391,302.006 365.646 C 302.663 364.901,303.206 364.541,303.213 364.846 C 303.222 365.251,303.367 365.214,303.752 364.706 C 304.042 364.325,304.410 364.143,304.570 364.303 C 304.729 364.463,305.035 364.280,305.250 363.897 C 305.464 363.514,305.882 363.200,306.177 363.200 C 306.473 363.200,306.822 362.919,306.954 362.575 C 307.086 362.231,307.336 362.037,307.509 362.144 C 307.682 362.250,308.525 361.731,309.383 360.990 C 310.241 360.248,311.091 359.733,311.272 359.844 C 311.452 359.956,311.600 359.576,311.600 359.000 C 311.600 358.393,311.771 358.058,312.007 358.204 C 312.230 358.342,312.292 358.651,312.145 358.889 C 311.985 359.149,312.063 359.209,312.338 359.038 C 312.592 358.881,312.803 358.448,312.806 358.076 C 312.811 357.511,312.872 357.495,313.179 357.980 C 313.476 358.449,313.799 358.286,314.873 357.129 C 315.603 356.343,316.605 355.574,317.100 355.422 C 317.595 355.270,318.000 354.998,318.000 354.816 C 318.000 354.635,318.450 354.374,319.000 354.236 C 319.658 354.071,320.000 353.706,320.000 353.169 C 320.000 352.720,320.181 352.465,320.403 352.602 C 320.966 352.950,321.895 351.926,321.772 351.092 C 321.716 350.711,321.835 350.400,322.035 350.400 C 322.236 350.400,322.403 350.625,322.406 350.900 C 322.411 351.274,322.498 351.265,322.751 350.866 C 322.937 350.572,323.159 350.384,323.245 350.448 C 323.580 350.698,325.144 349.033,324.918 348.667 C 324.779 348.442,324.885 348.405,325.166 348.579 C 325.437 348.746,325.956 348.608,326.328 348.269 C 326.697 347.932,327.484 347.212,328.076 346.670 C 328.667 346.128,329.252 345.786,329.376 345.909 C 329.499 346.032,329.600 345.749,329.600 345.279 C 329.600 344.749,329.794 344.500,330.113 344.622 C 330.394 344.730,331.249 344.157,332.013 343.349 C 332.875 342.436,333.127 341.976,332.679 342.135 C 332.235 342.293,332.056 342.233,332.213 341.979 C 332.353 341.753,332.839 341.686,333.294 341.830 C 333.936 342.033,334.067 341.952,333.881 341.467 C 333.715 341.034,333.819 340.909,334.217 341.062 C 334.548 341.189,334.910 340.980,335.066 340.572 C 335.216 340.181,335.674 339.526,336.084 339.116 C 336.494 338.706,336.704 338.169,336.552 337.922 C 336.369 337.627,336.551 337.546,337.087 337.686 C 337.746 337.859,337.859 337.746,337.686 337.087 C 337.549 336.562,337.629 336.370,337.911 336.545 C 338.152 336.694,338.791 336.373,339.332 335.832 C 339.873 335.291,340.424 334.958,340.558 335.091 C 340.691 335.224,340.800 335.123,340.800 334.867 C 340.800 334.610,340.519 334.400,340.176 334.400 C 339.833 334.400,339.664 334.219,339.801 333.999 C 339.937 333.778,340.463 333.701,340.969 333.828 C 341.755 334.025,341.931 333.867,342.182 332.729 C 342.343 331.998,342.565 331.632,342.676 331.915 C 342.810 332.259,343.385 331.936,344.414 330.937 C 345.260 330.117,345.876 329.323,345.784 329.175 C 345.693 329.026,346.248 328.255,347.019 327.462 C 347.789 326.668,348.415 325.925,348.410 325.810 C 348.348 324.498,348.473 324.239,348.800 325.000 C 349.032 325.540,349.153 325.604,349.172 325.196 C 349.187 324.864,349.567 324.363,350.016 324.083 C 350.464 323.803,350.763 323.445,350.679 323.287 C 350.475 322.903,351.870 321.603,352.167 321.900 C 352.295 322.028,352.400 321.899,352.400 321.614 C 352.400 321.328,352.749 320.791,353.175 320.422 C 353.601 320.052,354.006 319.494,354.075 319.183 C 354.144 318.871,354.783 317.982,355.497 317.208 C 356.210 316.434,356.795 315.640,356.797 315.444 C 356.798 315.248,357.060 314.888,357.378 314.644 C 357.696 314.400,358.011 313.930,358.078 313.600 C 358.145 313.270,358.495 312.779,358.855 312.509 C 359.695 311.879,361.366 309.068,360.701 309.406 C 360.425 309.545,360.695 309.271,361.300 308.796 C 361.905 308.322,362.400 307.678,362.400 307.367 C 362.400 307.055,362.625 306.797,362.900 306.794 C 363.233 306.790,363.200 306.658,362.800 306.400 C 362.283 306.066,362.293 306.011,362.876 306.006 C 363.652 305.999,364.096 305.422,364.157 304.340 C 364.181 303.928,364.348 303.637,364.528 303.695 C 364.893 303.812,365.718 302.524,365.862 301.611 C 365.913 301.287,366.233 300.819,366.571 300.571 C 366.910 300.324,367.070 300.004,366.927 299.860 C 366.784 299.717,366.872 299.600,367.123 299.600 C 367.673 299.600,368.873 297.406,368.517 297.051 C 368.379 296.913,368.487 296.800,368.757 296.800 C 369.027 296.800,369.148 296.639,369.026 296.442 C 368.904 296.245,369.085 295.976,369.428 295.845 C 369.770 295.713,369.939 295.424,369.802 295.203 C 369.665 294.981,369.743 294.800,369.976 294.800 C 370.209 294.800,370.400 294.530,370.400 294.200 C 370.400 293.870,370.591 293.600,370.824 293.600 C 371.057 293.600,371.144 293.432,371.017 293.228 C 370.891 293.023,370.973 292.740,371.200 292.600 C 371.427 292.460,371.491 292.132,371.342 291.872 C 371.194 291.613,371.229 291.544,371.422 291.719 C 371.857 292.116,373.749 288.095,373.642 287.000 C 373.577 286.336,373.634 286.302,373.976 286.800 C 374.368 287.371,374.629 286.650,374.447 285.500 C 374.421 285.335,374.580 285.200,374.800 285.200 C 375.020 285.200,375.179 285.065,375.153 284.900 C 375.032 284.134,375.233 283.573,375.558 283.774 C 375.755 283.896,376.025 283.712,376.158 283.365 C 376.540 282.369,376.442 281.931,375.900 282.211 C 375.625 282.353,375.779 282.139,376.242 281.735 C 376.948 281.118,377.392 280.396,377.799 279.200 C 378.018 278.555,378.862 276.623,379.074 276.281 C 379.216 276.051,379.124 275.999,378.862 276.162 C 378.082 276.643,378.351 275.812,379.164 275.226 C 379.598 274.913,379.827 274.416,379.696 274.072 C 379.545 273.679,379.627 273.569,379.932 273.758 C 380.214 273.932,380.400 273.797,380.400 273.418 C 380.400 272.786,380.533 272.461,381.744 270.136 C 382.106 269.441,382.302 268.609,382.178 268.288 C 382.055 267.966,382.189 267.455,382.477 267.152 C 383.207 266.382,383.371 264.806,382.725 264.772 C 382.436 264.756,382.560 264.603,383.000 264.432 C 383.440 264.260,383.816 263.958,383.835 263.760 C 383.867 263.421,384.044 262.898,384.771 261.000 C 384.940 260.560,385.046 259.803,385.007 259.319 C 384.968 258.834,385.077 258.524,385.248 258.630 C 385.697 258.907,386.559 257.151,386.122 256.849 C 385.705 256.561,385.511 254.699,385.924 254.949 C 386.076 255.041,386.432 254.865,386.716 254.558 C 387.137 254.103,387.137 253.999,386.716 253.994 C 386.351 253.990,386.376 253.874,386.800 253.600 C 387.200 253.342,387.233 253.210,386.900 253.206 C 386.307 253.199,386.229 252.153,386.795 251.803 C 387.026 251.660,387.097 251.859,386.965 252.279 C 386.780 252.871,386.833 252.856,387.259 252.200 C 387.545 251.760,387.806 251.265,387.840 251.100 C 387.873 250.935,387.946 250.755,388.002 250.700 C 388.163 250.541,388.398 248.308,388.387 247.031 C 388.381 246.388,388.607 245.715,388.888 245.537 C 389.282 245.287,389.262 245.209,388.800 245.200 C 388.267 245.189,388.267 245.141,388.800 244.763 C 389.252 244.444,389.276 244.289,388.900 244.136 C 388.625 244.025,388.414 243.543,388.432 243.067 C 388.449 242.584,388.557 242.434,388.674 242.728 C 389.017 243.585,390.111 241.690,390.225 240.043 C 390.280 239.249,390.363 238.510,390.410 238.400 C 390.457 238.290,390.473 238.065,390.447 237.900 C 390.421 237.735,390.550 237.600,390.733 237.600 C 390.916 237.600,391.051 236.715,391.033 235.633 C 391.015 234.551,391.172 233.696,391.382 233.733 C 391.592 233.770,391.772 233.590,391.782 233.333 C 391.792 233.077,391.935 232.732,392.100 232.567 C 392.518 232.148,392.477 231.505,392.048 231.770 C 391.855 231.890,391.738 231.225,391.788 230.294 C 391.847 229.200,392.053 228.639,392.370 228.710 C 392.639 228.770,392.755 228.651,392.627 228.444 C 392.500 228.237,392.621 227.992,392.898 227.899 C 393.291 227.767,393.281 227.586,392.851 227.065 C 392.436 226.562,392.423 226.400,392.800 226.400 C 393.197 226.400,393.197 226.279,392.800 225.800 C 392.403 225.321,392.403 225.079,392.800 224.600 C 393.144 224.185,393.159 224.000,392.849 224.000 C 392.602 224.000,392.400 223.730,392.400 223.400 C 392.400 223.070,392.580 222.800,392.800 222.800 C 393.020 222.800,393.200 222.429,393.200 221.976 C 393.200 221.424,393.035 221.252,392.700 221.453 C 392.324 221.679,392.329 221.595,392.719 221.113 C 393.087 220.658,393.155 219.855,392.954 218.337 C 392.649 216.039,392.684 215.745,393.240 215.900 C 393.438 215.955,393.614 215.865,393.631 215.700 C 393.647 215.535,393.742 215.040,393.842 214.600 C 394.090 213.500,394.028 208.627,393.735 206.200 C 393.358 203.074,393.363 195.503,393.743 194.450 C 394.014 193.700,393.971 193.569,393.543 193.827 C 393.119 194.082,393.098 194.027,393.445 193.577 C 393.690 193.260,393.937 192.010,393.994 190.800 C 394.212 186.131,394.011 184.728,393.088 184.487 C 392.685 184.381,392.445 184.061,392.554 183.774 C 393.209 182.069,393.253 178.463,392.634 177.266 C 392.269 176.560,392.161 176.000,392.390 176.000 C 392.615 176.000,392.800 176.210,392.800 176.467 C 392.800 176.723,392.897 176.836,393.016 176.717 C 393.135 176.598,392.847 175.847,392.375 175.047 C 391.709 173.920,391.656 173.647,392.136 173.831 C 392.476 173.961,392.834 174.368,392.931 174.734 C 393.028 175.100,393.128 174.635,393.154 173.700 C 393.180 172.741,393.015 172.000,392.776 172.000 C 392.543 172.000,392.483 171.789,392.642 171.532 C 392.827 171.232,392.725 171.143,392.355 171.285 C 391.718 171.530,391.573 169.415,392.161 168.463 C 392.348 168.161,392.216 167.659,391.839 167.243 C 391.488 166.855,391.200 165.956,391.200 165.245 C 391.200 164.485,391.035 164.055,390.800 164.200 C 390.580 164.336,390.400 164.156,390.400 163.800 C 390.400 163.444,390.571 163.258,390.779 163.387 C 391.335 163.730,390.947 162.146,390.223 161.112 C 389.491 160.067,389.375 158.614,390.058 159.036 C 390.309 159.191,390.183 158.755,389.776 158.067 C 389.264 157.200,388.941 156.967,388.725 157.308 C 388.519 157.632,388.410 157.504,388.406 156.933 C 388.403 156.457,388.625 155.991,388.900 155.898 C 389.281 155.770,389.258 155.554,388.800 154.988 C 388.267 154.329,388.267 154.286,388.800 154.600 C 389.307 154.899,389.319 154.854,388.881 154.312 C 388.528 153.878,388.497 153.587,388.784 153.410 C 389.059 153.240,388.984 152.926,388.567 152.510 C 388.171 152.114,387.993 151.432,388.097 150.718 C 388.190 150.084,388.114 149.470,387.927 149.355 C 387.740 149.239,387.708 148.949,387.855 148.711 C 388.003 148.472,387.952 148.382,387.743 148.512 C 387.533 148.641,387.100 148.582,386.781 148.380 C 386.461 148.178,386.395 148.009,386.633 148.006 C 386.872 148.003,387.067 147.370,387.067 146.600 C 387.067 145.830,386.917 145.200,386.733 145.200 C 386.550 145.200,386.445 144.975,386.500 144.700 C 386.555 144.425,386.375 144.245,386.100 144.300 C 385.466 144.427,385.456 143.904,386.080 143.280 C 386.453 142.907,386.444 142.800,386.037 142.800 C 385.750 142.800,385.610 142.552,385.726 142.249 C 385.842 141.946,385.767 141.527,385.559 141.319 C 385.351 141.111,385.111 140.594,385.026 140.171 C 384.941 139.747,384.647 138.860,384.373 138.200 C 384.099 137.540,383.848 136.820,383.815 136.600 C 383.701 135.846,383.058 134.600,382.629 134.300 C 382.340 134.098,382.396 133.871,382.800 133.606 C 383.237 133.319,383.258 133.211,382.876 133.206 C 382.588 133.203,382.467 133.016,382.606 132.790 C 382.745 132.565,382.711 132.406,382.530 132.437 C 381.741 132.575,381.445 132.359,381.968 132.028 C 382.448 131.724,382.419 131.491,381.779 130.534 C 381.363 129.910,381.065 129.258,381.116 129.084 C 381.333 128.357,380.360 127.238,379.694 127.448 C 379.078 127.641,379.069 127.605,379.615 127.133 C 380.256 126.577,380.215 125.020,379.570 125.419 C 379.366 125.544,379.200 125.356,379.200 125.000 C 379.200 124.644,379.054 124.443,378.875 124.553 C 378.697 124.664,378.537 124.006,378.520 123.092 C 378.503 122.178,378.288 121.363,378.042 121.281 C 377.796 121.199,377.698 120.966,377.823 120.763 C 377.948 120.560,377.770 120.287,377.428 120.155 C 377.085 120.024,376.900 119.762,377.016 119.574 C 377.132 119.386,377.067 118.910,376.872 118.516 C 376.677 118.122,376.193 117.125,375.796 116.300 C 375.399 115.475,374.922 114.800,374.737 114.800 C 374.552 114.800,374.400 114.440,374.400 114.000 C 374.400 113.560,374.085 112.885,373.700 112.500 C 373.315 112.115,373.006 111.530,373.014 111.200 C 373.021 110.870,372.706 110.309,372.314 109.953 C 371.498 109.214,371.351 108.600,372.100 109.059 C 372.375 109.228,372.299 108.924,371.932 108.383 C 371.565 107.842,371.070 107.445,370.832 107.500 C 370.277 107.628,370.264 106.912,370.817 106.728 C 371.047 106.651,370.863 106.189,370.409 105.702 C 369.955 105.214,369.575 104.677,369.565 104.508 C 369.556 104.338,369.289 104.253,368.974 104.318 C 368.658 104.382,368.400 104.247,368.400 104.018 C 368.400 103.788,368.625 103.597,368.900 103.594 C 369.274 103.589,369.265 103.502,368.866 103.249 C 368.572 103.063,368.360 102.841,368.394 102.755 C 368.564 102.331,367.570 100.473,366.638 99.472 C 366.060 98.852,365.691 98.176,365.819 97.970 C 365.946 97.763,365.770 97.487,365.428 97.355 C 365.085 97.224,364.887 96.982,364.988 96.819 C 365.090 96.655,364.812 96.134,364.371 95.661 C 363.930 95.187,363.694 94.800,363.846 94.800 C 363.999 94.800,363.809 94.452,363.424 94.027 C 363.040 93.602,362.472 93.351,362.162 93.470 C 361.853 93.588,361.600 93.476,361.600 93.219 C 361.600 92.963,361.780 92.864,362.000 93.000 C 362.220 93.136,362.400 93.111,362.400 92.945 C 362.400 92.441,360.316 89.600,359.946 89.600 C 359.756 89.600,359.632 89.465,359.672 89.300 C 359.869 88.481,356.553 83.858,356.009 84.195 C 355.834 84.303,355.715 84.078,355.745 83.696 C 355.775 83.311,355.563 83.049,355.270 83.110 C 354.979 83.170,354.846 83.050,354.974 82.842 C 355.102 82.634,354.929 82.186,354.589 81.847 C 354.250 81.507,353.978 81.132,353.986 81.014 C 354.040 80.202,353.943 80.012,353.518 80.100 C 353.253 80.155,353.028 79.990,353.018 79.734 C 353.008 79.477,352.550 78.877,352.000 78.400 C 351.450 77.923,350.978 77.368,350.950 77.166 C 350.923 76.965,350.878 76.609,350.850 76.376 C 350.822 76.143,350.620 76.064,350.400 76.200 C 350.180 76.336,350.000 76.251,350.000 76.011 C 350.000 75.771,349.595 75.411,349.100 75.212 C 348.605 75.013,348.447 74.839,348.749 74.825 C 349.623 74.785,348.465 73.600,347.551 73.600 C 347.138 73.600,346.800 73.409,346.800 73.176 C 346.800 72.943,347.025 72.881,347.300 73.038 C 347.575 73.195,347.302 72.788,346.694 72.134 C 346.086 71.480,345.726 70.807,345.894 70.639 C 346.062 70.471,346.020 70.370,345.800 70.414 C 344.819 70.612,344.329 70.363,344.553 69.779 C 344.689 69.423,344.622 69.263,344.395 69.403 C 344.178 69.537,344.000 69.356,344.000 69.000 C 344.000 68.644,343.820 68.464,343.599 68.600 C 343.379 68.737,343.023 68.387,342.809 67.824 C 342.595 67.261,342.225 66.800,341.986 66.800 C 341.748 66.800,341.654 66.636,341.779 66.435 C 341.903 66.234,341.483 65.838,340.845 65.556 C 340.085 65.219,339.764 64.839,339.912 64.452 C 340.083 64.007,339.952 63.933,339.382 64.152 C 338.965 64.312,338.752 64.314,338.909 64.158 C 339.539 63.527,336.415 61.093,335.683 61.645 C 335.104 62.083,335.076 62.076,335.500 61.601 C 336.096 60.932,336.172 59.847,335.597 60.202 C 335.376 60.339,335.087 60.170,334.955 59.828 C 334.824 59.485,334.555 59.304,334.358 59.426 C 334.161 59.548,334.000 59.266,334.000 58.800 C 334.000 58.334,333.832 58.057,333.626 58.184 C 333.421 58.311,332.303 57.466,331.142 56.307 C 329.981 55.148,328.890 54.245,328.716 54.300 C 328.542 54.355,328.400 54.209,328.400 53.976 C 328.400 53.743,328.192 53.681,327.938 53.838 C 327.670 54.004,327.584 53.949,327.734 53.707 C 327.875 53.478,327.689 53.045,327.319 52.745 C 326.930 52.430,326.766 52.399,326.930 52.672 C 327.086 52.932,327.030 53.258,326.807 53.396 C 326.578 53.537,326.400 53.263,326.400 52.771 C 326.400 51.863,324.928 50.274,324.394 50.604 C 324.227 50.707,323.868 50.523,323.596 50.196 C 323.324 49.868,323.242 49.600,323.413 49.600 C 323.584 49.600,323.402 49.244,323.009 48.809 C 322.615 48.375,322.154 48.105,321.983 48.211 C 321.812 48.316,321.242 47.907,320.716 47.301 C 320.189 46.695,319.510 46.144,319.205 46.075 C 318.901 46.007,318.402 45.647,318.096 45.275 C 317.791 44.904,317.655 44.825,317.794 45.100 C 317.939 45.387,317.799 45.600,317.466 45.600 C 317.147 45.600,316.778 45.321,316.647 44.979 C 316.493 44.578,316.571 44.458,316.866 44.641 C 317.148 44.815,317.214 44.746,317.038 44.462 C 316.881 44.208,316.488 44.000,316.164 44.000 C 315.840 44.000,315.471 43.730,315.345 43.400 C 315.218 43.070,314.864 42.800,314.557 42.800 C 314.251 42.800,314.000 42.620,314.000 42.400 C 314.000 42.180,313.775 41.994,313.500 41.987 C 313.225 41.980,312.386 41.358,311.636 40.603 C 310.885 39.849,310.120 39.326,309.936 39.440 C 309.751 39.554,309.600 39.446,309.600 39.200 C 309.600 38.954,309.420 38.864,309.200 39.000 C 308.980 39.136,308.800 39.069,308.800 38.851 C 308.800 38.633,308.227 38.047,307.528 37.549 C 306.828 37.050,306.387 36.856,306.549 37.117 C 306.745 37.435,306.630 37.510,306.198 37.344 C 305.830 37.203,305.652 36.841,305.783 36.500 C 305.955 36.053,305.801 35.959,305.166 36.125 C 304.701 36.246,304.428 36.239,304.559 36.108 C 304.764 35.902,302.558 34.273,302.000 34.218 C 301.890 34.208,301.215 33.782,300.500 33.272 C 299.785 32.763,299.200 32.461,299.200 32.601 C 299.200 32.742,298.917 32.574,298.571 32.229 C 298.226 31.883,297.731 31.603,297.471 31.606 C 297.195 31.610,297.248 31.773,297.600 32.000 C 297.930 32.213,298.019 32.391,297.799 32.394 C 297.578 32.397,296.887 31.859,296.263 31.198 C 295.639 30.537,294.984 30.086,294.806 30.196 C 294.629 30.306,294.397 30.169,294.291 29.893 C 294.086 29.358,290.404 27.360,289.900 27.510 C 289.735 27.560,289.600 27.390,289.600 27.133 C 289.600 26.877,289.480 26.787,289.332 26.934 C 289.185 27.081,288.735 26.903,288.332 26.539 C 287.930 26.174,287.600 26.015,287.600 26.184 C 287.600 26.353,287.150 26.197,286.600 25.837 C 286.050 25.476,285.600 25.283,285.600 25.406 C 285.600 25.530,285.213 25.270,284.739 24.829 C 284.266 24.388,283.739 24.114,283.567 24.220 C 283.396 24.326,283.142 24.230,283.004 24.007 C 282.866 23.783,282.538 23.603,282.276 23.606 C 281.951 23.610,281.970 23.720,282.334 23.950 C 282.753 24.217,282.713 24.348,282.146 24.565 C 281.749 24.718,281.548 24.719,281.698 24.569 C 282.280 23.987,281.174 22.754,280.315 23.027 C 279.637 23.242,279.529 23.161,279.745 22.598 C 279.963 22.030,279.832 21.939,279.018 22.094 C 278.471 22.199,278.107 22.151,278.207 21.988 C 278.308 21.825,277.988 21.604,277.495 21.497 C 277.003 21.390,276.254 21.158,275.831 20.982 C 275.203 20.720,275.111 20.791,275.331 21.364 C 275.510 21.832,275.433 22.012,275.100 21.902 C 274.825 21.811,274.545 21.363,274.477 20.906 C 274.367 20.162,273.161 19.502,271.754 19.415 C 271.509 19.400,271.042 19.167,270.717 18.897 C 270.392 18.628,270.008 18.525,269.863 18.670 C 269.718 18.815,269.600 18.704,269.600 18.424 C 269.600 18.144,269.352 18.010,269.049 18.126 C 268.746 18.242,268.269 18.127,267.990 17.869 C 267.594 17.502,267.546 17.531,267.771 18.000 C 267.952 18.376,267.847 18.341,267.490 17.906 C 267.177 17.525,266.804 17.330,266.660 17.473 C 266.517 17.616,266.400 17.523,266.400 17.267 C 266.400 17.010,266.070 16.800,265.667 16.800 C 265.263 16.800,264.808 16.675,264.655 16.522 C 264.502 16.369,264.157 16.200,263.888 16.148 C 263.620 16.095,262.815 15.873,262.100 15.654 C 261.385 15.435,260.797 15.378,260.794 15.528 C 260.791 15.678,260.624 15.542,260.424 15.226 C 260.118 14.741,259.959 14.736,259.408 15.193 C 258.855 15.652,258.774 15.648,258.877 15.168 C 258.945 14.855,258.775 14.645,258.500 14.700 C 258.225 14.755,258.000 14.620,258.000 14.400 C 258.000 14.180,257.865 14.030,257.700 14.066 C 257.204 14.174,255.036 13.518,254.502 13.098 C 254.229 12.882,253.555 12.792,253.005 12.897 C 252.440 13.005,251.811 12.855,251.560 12.552 C 251.315 12.257,250.729 12.022,250.258 12.030 C 249.786 12.038,248.905 11.923,248.300 11.776 C 247.508 11.582,247.196 11.660,247.186 12.053 C 247.178 12.354,246.914 12.150,246.600 11.600 C 246.286 11.050,246.022 10.825,246.014 11.100 C 246.006 11.375,245.719 11.600,245.376 11.600 C 245.033 11.600,244.871 11.408,245.017 11.173 C 245.162 10.939,245.037 10.796,244.740 10.857 C 244.443 10.918,243.750 10.720,243.200 10.416 C 242.650 10.113,242.157 9.890,242.104 9.921 C 242.052 9.953,241.734 9.873,241.398 9.744 C 241.063 9.615,240.431 9.603,239.994 9.717 C 239.557 9.832,239.200 9.751,239.200 9.539 C 239.200 9.327,239.020 9.264,238.800 9.400 C 238.580 9.536,238.400 9.457,238.400 9.224 C 238.400 8.991,238.209 8.800,237.976 8.800 C 237.743 8.800,237.667 8.984,237.806 9.210 C 238.121 9.719,237.102 9.542,236.729 9.023 C 236.563 8.792,236.048 8.832,235.403 9.126 C 234.823 9.390,234.441 9.457,234.553 9.276 C 234.866 8.770,232.116 7.914,231.098 8.200 C 230.395 8.398,230.330 8.361,230.800 8.032 C 231.294 7.687,231.236 7.611,230.476 7.606 C 229.968 7.603,229.640 7.740,229.746 7.912 C 229.852 8.083,229.467 8.203,228.891 8.178 C 228.315 8.153,227.774 7.921,227.688 7.664 C 227.602 7.406,227.367 7.297,227.166 7.421 C 226.965 7.545,226.800 7.457,226.800 7.224 C 226.800 6.991,226.519 6.800,226.176 6.800 C 225.825 6.800,225.671 6.992,225.825 7.240 C 226.016 7.549,225.844 7.545,225.248 7.226 C 224.597 6.877,224.400 6.886,224.400 7.266 C 224.400 7.639,224.287 7.647,223.939 7.299 C 223.608 6.968,223.255 6.957,222.690 7.259 C 222.240 7.500,222.006 7.514,222.143 7.293 C 222.290 7.055,220.972 6.886,218.734 6.855 C 216.728 6.827,214.887 6.646,214.643 6.453 C 214.400 6.261,213.884 6.154,213.498 6.216 C 213.112 6.279,212.898 6.166,213.022 5.965 C 213.146 5.764,212.866 5.600,212.400 5.600 C 211.934 5.600,211.664 5.779,211.799 5.999 C 211.960 6.260,211.675 6.257,210.975 5.991 C 209.665 5.493,186.683 5.488,186.991 5.986 M201.900 6.294 C 200.855 6.376,199.145 6.376,198.100 6.294 C 197.055 6.212,197.910 6.144,200.000 6.144 C 202.090 6.144,202.945 6.212,201.900 6.294 M160.113 10.682 C 159.861 11.339,159.592 11.320,158.605 10.574 C 157.846 10.000,157.867 9.977,159.061 10.068 C 159.896 10.132,160.246 10.336,160.113 10.682 M205.400 78.000 C 205.536 78.220,206.502 78.400,207.547 78.400 C 208.598 78.400,209.794 78.662,210.224 78.987 C 210.651 79.310,211.664 79.580,212.476 79.587 C 213.288 79.594,214.064 79.780,214.200 80.000 C 214.336 80.220,215.057 80.400,215.802 80.400 C 216.601 80.400,218.426 81.057,220.249 82.000 C 221.949 82.880,223.641 83.600,224.009 83.600 C 224.800 83.600,227.085 84.690,227.416 85.225 C 227.543 85.431,227.963 85.600,228.349 85.600 C 228.735 85.600,229.577 86.150,230.221 86.822 C 230.865 87.495,232.564 88.607,233.996 89.295 C 236.750 90.617,238.400 91.849,238.400 92.582 C 238.400 93.109,242.862 97.600,243.386 97.600 C 243.914 97.600,245.600 99.263,245.600 99.783 C 245.600 100.028,246.589 101.204,247.799 102.399 C 249.521 104.100,250.559 105.709,252.594 109.832 C 254.022 112.726,255.463 115.320,255.795 115.596 C 256.128 115.872,256.400 116.672,256.400 117.373 C 256.400 118.074,256.664 118.996,256.987 119.424 C 257.310 119.851,257.580 120.684,257.587 121.276 C 257.594 121.868,257.780 122.464,258.000 122.600 C 258.220 122.736,258.406 123.332,258.413 123.924 C 258.420 124.516,258.690 125.349,259.013 125.776 C 259.336 126.204,259.600 127.383,259.600 128.396 C 259.600 129.410,259.820 130.460,260.090 130.730 C 260.477 131.117,260.469 131.398,260.052 132.065 C 259.622 132.754,259.618 133.087,260.034 133.863 C 260.426 134.595,260.434 134.926,260.072 135.288 C 259.498 135.862,259.441 139.455,260.000 139.800 C 260.220 139.936,260.400 140.476,260.400 141.000 C 260.400 141.524,260.220 142.064,260.000 142.200 C 259.780 142.336,259.594 144.012,259.586 145.924 C 259.577 148.180,259.371 149.751,259.000 150.400 C 258.686 150.950,258.422 151.837,258.414 152.372 C 258.396 153.628,257.720 155.710,256.541 158.137 C 256.023 159.202,255.594 160.462,255.587 160.937 C 255.579 161.412,255.047 162.520,254.404 163.400 C 253.760 164.280,252.513 166.440,251.631 168.200 C 250.592 170.273,249.248 172.170,247.814 173.586 C 246.596 174.789,245.600 175.980,245.600 176.233 C 245.600 176.820,236.771 185.600,236.181 185.600 C 235.938 185.600,235.317 186.050,234.800 186.600 C 234.283 187.150,233.684 187.600,233.468 187.600 C 233.252 187.600,232.519 188.016,231.838 188.524 C 231.157 189.033,229.759 189.837,228.731 190.311 C 227.704 190.786,226.760 191.341,226.634 191.546 C 226.347 192.009,221.791 194.400,221.194 194.400 C 220.953 194.400,219.911 194.798,218.878 195.284 C 217.845 195.770,216.244 196.211,215.319 196.264 C 214.394 196.317,213.098 196.639,212.439 196.980 C 211.779 197.321,210.431 197.600,209.443 197.600 C 208.456 197.600,207.536 197.780,207.400 198.000 C 207.246 198.250,203.337 198.400,197.000 198.400 C 190.663 198.400,186.754 198.250,186.600 198.000 C 186.464 197.780,185.727 197.600,184.962 197.600 C 184.198 197.600,183.160 197.330,182.656 197.000 C 182.152 196.670,180.944 196.370,179.970 196.335 C 178.161 196.268,177.930 196.198,175.738 195.057 C 175.044 194.696,174.231 194.400,173.932 194.400 C 173.116 194.400,164.784 190.124,163.802 189.201 C 163.332 188.761,162.770 188.400,162.553 188.400 C 162.335 188.400,161.546 187.770,160.800 187.000 C 160.054 186.230,159.161 185.600,158.817 185.600 C 158.021 185.600,145.764 173.288,145.429 172.153 C 145.292 171.687,144.824 170.984,144.390 170.591 C 143.955 170.198,143.600 169.665,143.600 169.408 C 143.600 169.150,143.150 168.517,142.600 168.000 C 142.050 167.483,141.600 166.699,141.600 166.257 C 141.600 165.171,140.165 162.273,139.190 161.391 C 138.755 160.998,138.400 160.175,138.400 159.562 C 138.400 158.949,138.220 158.336,138.000 158.200 C 137.780 158.064,137.594 157.288,137.587 156.476 C 137.580 155.664,137.310 154.651,136.987 154.224 C 136.664 153.796,136.400 152.772,136.400 151.947 C 136.400 151.122,136.220 150.336,136.000 150.200 C 135.780 150.064,135.600 149.098,135.600 148.053 C 135.600 147.002,135.338 145.806,135.013 145.376 C 134.161 144.250,134.139 132.898,134.987 131.776 C 135.358 131.286,135.579 130.053,135.587 128.428 C 135.600 125.827,136.020 123.930,137.040 121.868 C 137.348 121.245,137.600 120.310,137.600 119.791 C 137.600 119.272,137.780 118.736,138.000 118.600 C 138.220 118.464,138.400 117.927,138.400 117.407 C 138.400 116.887,138.850 115.927,139.400 115.273 C 139.950 114.619,140.400 113.820,140.400 113.496 C 140.400 112.420,143.144 107.403,144.381 106.218 C 145.052 105.576,145.600 104.845,145.600 104.595 C 145.600 104.344,146.050 103.717,146.600 103.200 C 147.150 102.683,147.600 101.975,147.600 101.625 C 147.600 100.823,158.704 89.767,159.847 89.429 C 160.313 89.292,161.016 88.824,161.409 88.390 C 161.802 87.955,162.335 87.600,162.592 87.600 C 162.850 87.600,163.483 87.150,164.000 86.600 C 164.544 86.021,165.386 85.600,166.000 85.600 C 166.614 85.600,167.456 85.179,168.000 84.600 C 168.519 84.048,169.401 83.594,169.970 83.587 C 170.536 83.580,171.349 83.310,171.776 82.987 C 172.204 82.664,172.958 82.400,173.453 82.400 C 173.948 82.400,174.464 82.220,174.600 82.000 C 174.736 81.780,175.175 81.600,175.575 81.600 C 175.975 81.600,176.526 81.330,176.800 81.000 C 177.074 80.670,177.805 80.400,178.425 80.400 C 179.045 80.400,179.664 80.220,179.800 80.000 C 179.936 79.780,180.712 79.594,181.524 79.587 C 182.336 79.580,183.349 79.310,183.776 78.987 C 184.204 78.664,185.228 78.400,186.053 78.400 C 186.878 78.400,187.664 78.220,187.800 78.000 C 187.952 77.754,191.330 77.600,196.600 77.600 C 201.870 77.600,205.248 77.754,205.400 78.000 M393.867 195.467 C 393.449 195.884,393.566 203.729,394.000 204.400 C 394.262 204.805,394.390 203.411,394.394 200.100 C 394.397 197.405,394.340 195.200,394.267 195.200 C 394.193 195.200,394.013 195.320,393.867 195.467 M6.295 202.100 C 6.214 203.255,6.148 202.310,6.148 200.000 C 6.148 197.690,6.214 196.745,6.295 197.900 C 6.376 199.055,6.376 200.945,6.295 202.100 M176.200 222.000 C 176.360 222.259,184.863 222.400,200.400 222.400 C 215.937 222.400,224.440 222.259,224.600 222.000 C 224.739 221.775,226.663 221.600,229.000 221.600 C 231.337 221.600,233.261 221.775,233.400 222.000 C 233.536 222.220,235.212 222.406,237.124 222.413 C 239.545 222.422,240.836 222.604,241.376 223.013 C 241.804 223.336,242.828 223.600,243.653 223.600 C 244.478 223.600,245.264 223.780,245.400 224.000 C 245.536 224.220,246.252 224.400,246.991 224.400 C 247.730 224.400,248.845 224.656,249.468 224.970 C 250.090 225.283,251.410 225.747,252.400 226.000 C 253.390 226.253,254.710 226.717,255.332 227.030 C 255.955 227.344,257.049 227.600,257.763 227.600 C 258.630 227.600,259.372 227.932,260.000 228.600 C 260.517 229.150,261.330 229.600,261.808 229.600 C 262.846 229.600,264.924 230.586,265.599 231.399 C 265.865 231.719,267.008 232.421,268.141 232.958 C 269.273 233.496,270.729 234.490,271.375 235.168 C 272.021 235.846,272.772 236.400,273.044 236.400 C 273.316 236.400,274.073 236.850,274.727 237.400 C 275.381 237.950,276.049 238.400,276.213 238.400 C 276.377 238.400,277.292 239.120,278.246 240.000 C 279.201 240.880,280.208 241.600,280.484 241.600 C 281.167 241.600,288.400 248.847,288.400 249.531 C 288.400 249.832,289.570 251.290,291.000 252.771 C 292.430 254.252,293.600 255.643,293.600 255.862 C 293.600 256.081,294.050 256.683,294.600 257.200 C 295.150 257.717,295.600 258.440,295.600 258.808 C 295.600 259.175,295.973 259.813,296.428 260.226 C 296.884 260.638,297.674 261.887,298.184 263.001 C 298.693 264.116,299.400 265.268,299.755 265.563 C 300.110 265.857,300.400 266.512,300.400 267.018 C 300.400 267.524,300.850 268.473,301.400 269.127 C 301.950 269.781,302.400 270.615,302.400 270.981 C 302.400 271.347,302.850 272.452,303.400 273.437 C 303.950 274.422,304.400 275.818,304.400 276.538 C 304.400 277.258,304.664 278.196,304.987 278.624 C 305.310 279.051,305.580 280.064,305.587 280.876 C 305.594 281.688,305.780 282.464,306.000 282.600 C 306.220 282.736,306.400 283.522,306.400 284.347 C 306.400 285.172,306.664 286.196,306.987 286.624 C 307.382 287.146,307.579 288.408,307.587 290.476 C 307.594 292.168,307.780 293.664,308.000 293.800 C 308.240 293.949,308.400 296.663,308.400 300.600 C 308.400 304.537,308.240 307.251,308.000 307.400 C 307.780 307.536,307.600 308.343,307.600 309.193 C 307.600 310.441,307.367 310.919,306.393 311.670 C 305.730 312.181,304.695 312.980,304.093 313.445 C 303.492 313.910,302.619 314.410,302.153 314.555 C 301.687 314.701,300.984 315.176,300.591 315.610 C 300.198 316.045,299.534 316.400,299.115 316.400 C 298.696 316.400,297.548 316.850,296.563 317.400 C 295.467 318.012,294.118 318.405,293.086 318.414 C 292.159 318.422,290.950 318.686,290.400 319.000 C 289.850 319.314,288.443 319.578,287.274 319.586 C 286.104 319.594,284.799 319.787,284.372 320.015 C 283.946 320.243,282.383 320.443,280.899 320.458 C 279.334 320.475,277.828 320.721,277.314 321.044 C 276.660 321.455,274.862 321.600,270.438 321.600 C 266.842 321.600,264.348 321.761,264.198 322.003 C 263.858 322.554,134.136 322.543,133.796 321.993 C 133.654 321.764,131.053 321.600,127.562 321.600 C 122.851 321.600,121.372 321.469,120.635 320.986 C 119.878 320.490,119.501 320.462,118.667 320.842 C 117.866 321.207,117.362 321.198,116.403 320.801 C 115.726 320.521,114.453 320.291,113.575 320.291 C 112.698 320.291,111.884 320.135,111.766 319.945 C 111.649 319.755,111.107 319.600,110.562 319.600 C 110.018 319.600,109.160 319.330,108.656 319.000 C 108.152 318.670,106.959 318.369,106.004 318.332 C 104.289 318.264,101.484 317.183,101.002 316.404 C 100.866 316.183,99.819 315.559,98.677 315.018 C 96.372 313.926,93.259 310.931,92.254 308.839 C 91.492 307.252,91.273 294.249,92.000 293.800 C 92.220 293.664,92.406 292.168,92.413 290.476 C 92.421 288.408,92.618 287.146,93.013 286.624 C 93.338 286.194,93.600 284.998,93.600 283.947 C 93.600 282.902,93.780 281.936,94.000 281.800 C 94.220 281.664,94.400 281.045,94.400 280.425 C 94.400 279.805,94.670 279.074,95.000 278.800 C 95.330 278.526,95.600 277.795,95.600 277.175 C 95.600 276.555,95.780 275.936,96.000 275.800 C 96.220 275.664,96.406 275.068,96.413 274.476 C 96.420 273.884,96.690 273.051,97.013 272.624 C 97.336 272.196,97.600 271.502,97.600 271.081 C 97.600 270.660,98.050 269.781,98.600 269.127 C 99.150 268.473,99.600 267.524,99.600 267.018 C 99.600 266.512,99.873 265.872,100.206 265.595 C 100.539 265.318,101.272 264.171,101.834 263.046 C 102.396 261.921,103.374 260.460,104.007 259.800 C 104.641 259.140,105.519 257.790,105.959 256.800 C 106.399 255.810,107.848 253.926,109.179 252.613 C 110.511 251.299,111.600 249.977,111.600 249.674 C 111.600 248.930,116.782 243.600,117.505 243.600 C 117.820 243.600,119.290 242.430,120.771 241.000 C 122.252 239.570,123.604 238.400,123.774 238.400 C 123.945 238.400,124.619 237.950,125.273 237.400 C 125.927 236.850,126.686 236.400,126.961 236.400 C 127.236 236.400,127.883 235.950,128.400 235.400 C 128.917 234.850,129.556 234.400,129.821 234.400 C 130.085 234.400,130.524 234.133,130.795 233.806 C 131.407 233.069,142.367 227.595,143.224 227.598 C 143.566 227.599,144.196 227.336,144.624 227.013 C 145.051 226.690,145.884 226.420,146.476 226.413 C 147.068 226.406,147.664 226.220,147.800 226.000 C 147.936 225.780,148.452 225.600,148.947 225.600 C 149.442 225.600,150.196 225.336,150.624 225.013 C 151.051 224.690,152.064 224.420,152.876 224.413 C 153.688 224.406,154.464 224.220,154.600 224.000 C 154.736 223.780,155.512 223.594,156.324 223.586 C 157.136 223.578,158.250 223.314,158.800 223.000 C 159.436 222.637,160.993 222.423,163.076 222.414 C 164.878 222.406,166.464 222.220,166.600 222.000 C 166.741 221.771,168.796 221.600,171.400 221.600 C 174.004 221.600,176.059 221.771,176.200 222.000 \",\n  stroke: \"none\",\n  fill: \"#646464\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path2\",\n  d: \"M190.400 78.488 C 185.444 79.137,184.583 79.298,184.220 79.641 C 184.011 79.838,183.190 80.000,182.396 80.000 C 181.603 80.000,180.604 80.264,180.176 80.587 C 179.749 80.910,179.119 81.180,178.775 81.187 C 178.431 81.194,177.217 81.650,176.077 82.200 C 174.937 82.750,173.654 83.200,173.226 83.200 C 172.797 83.200,172.349 83.360,172.228 83.555 C 172.107 83.750,171.402 84.023,170.659 84.162 C 169.917 84.302,168.996 84.762,168.613 85.185 C 168.230 85.608,167.351 86.074,166.659 86.221 C 165.966 86.367,165.040 86.800,164.600 87.183 C 164.160 87.566,162.704 88.545,161.365 89.357 C 158.887 90.860,149.066 100.531,147.288 103.220 C 146.786 103.979,145.796 105.397,145.088 106.371 C 143.283 108.854,141.206 112.842,141.203 113.830 C 141.201 114.287,140.750 115.083,140.200 115.600 C 139.626 116.139,139.200 116.987,139.200 117.590 C 139.200 118.167,139.057 118.811,138.882 119.020 C 138.707 119.229,138.239 120.480,137.842 121.800 C 137.445 123.120,136.937 124.546,136.714 124.969 C 136.490 125.392,136.234 127.088,136.144 128.739 C 136.055 130.390,135.797 131.963,135.570 132.236 C 134.642 133.354,135.611 147.779,136.759 149.923 C 137.001 150.376,137.200 151.353,137.200 152.094 C 137.200 152.834,137.378 153.618,137.596 153.836 C 137.815 154.055,138.163 155.036,138.371 156.016 C 139.149 159.692,139.554 160.901,140.285 161.739 C 141.107 162.681,141.795 164.047,142.230 165.600 C 142.384 166.150,142.890 167.080,143.355 167.668 C 143.820 168.255,144.648 169.515,145.196 170.468 C 146.186 172.190,158.254 184.800,158.912 184.800 C 159.101 184.800,160.110 185.520,161.154 186.400 C 162.198 187.280,163.237 188.000,163.464 188.000 C 163.690 188.000,164.164 188.318,164.516 188.707 C 164.868 189.096,166.741 190.195,168.678 191.150 C 170.615 192.106,172.678 193.137,173.262 193.443 C 173.846 193.750,174.583 194.000,174.900 194.000 C 175.218 194.000,176.056 194.289,176.763 194.642 C 177.470 194.994,178.533 195.339,179.125 195.408 C 179.716 195.477,180.920 195.747,181.800 196.008 C 182.680 196.268,184.120 196.574,185.000 196.686 C 185.880 196.798,186.836 197.081,187.124 197.313 C 187.924 197.961,206.212 197.948,206.860 197.300 C 207.135 197.025,208.303 196.800,209.456 196.800 C 210.609 196.800,211.664 196.620,211.800 196.400 C 211.936 196.180,212.566 196.000,213.200 196.000 C 213.834 196.000,214.449 195.844,214.567 195.653 C 214.685 195.462,215.679 195.187,216.775 195.041 C 217.870 194.896,218.875 194.602,219.007 194.388 C 219.139 194.175,219.572 194.000,219.970 194.000 C 220.794 194.000,226.261 191.349,226.614 190.778 C 226.742 190.571,227.798 189.951,228.961 189.401 C 230.124 188.851,231.401 188.041,231.800 187.600 C 232.198 187.160,232.738 186.800,233.000 186.800 C 233.262 186.800,233.798 186.445,234.191 186.010 C 234.584 185.576,235.287 185.108,235.753 184.970 C 236.711 184.687,244.800 176.841,244.800 176.195 C 244.800 175.965,245.870 174.613,247.178 173.191 C 248.486 171.769,250.209 169.302,251.007 167.708 C 251.805 166.115,252.626 164.707,252.832 164.580 C 253.342 164.265,254.799 161.197,254.805 160.425 C 254.807 160.081,255.257 159.017,255.805 158.059 C 256.352 157.102,256.806 155.932,256.813 155.459 C 256.820 154.987,257.090 154.251,257.413 153.824 C 257.736 153.396,258.000 152.372,258.000 151.547 C 258.000 150.722,258.180 149.936,258.400 149.800 C 258.620 149.664,258.800 147.979,258.800 146.056 C 258.800 143.869,258.980 142.380,259.280 142.080 C 259.642 141.718,259.652 141.280,259.318 140.300 C 259.068 139.565,258.882 136.337,258.890 132.872 C 258.899 128.834,258.750 126.590,258.452 126.292 C 258.203 126.043,258.000 125.372,258.000 124.800 C 258.000 124.228,257.806 123.566,257.569 123.329 C 257.332 123.092,256.962 122.201,256.746 121.349 C 256.531 120.497,256.175 119.080,255.955 118.200 C 255.735 117.320,255.253 116.150,254.883 115.600 C 254.194 114.575,252.911 112.185,250.591 107.600 C 249.867 106.170,248.695 104.460,247.986 103.800 C 247.277 103.140,246.093 101.668,245.354 100.529 C 244.616 99.390,243.605 98.336,243.106 98.187 C 242.067 97.876,238.000 94.050,238.000 93.383 C 238.000 92.564,236.198 91.271,232.379 89.352 C 231.377 88.849,230.207 88.049,229.779 87.574 C 228.939 86.644,223.974 84.000,223.067 84.000 C 222.763 84.000,221.305 83.370,219.828 82.600 C 218.351 81.830,216.570 81.194,215.871 81.186 C 215.172 81.178,214.150 80.914,213.600 80.600 C 213.050 80.286,212.026 80.022,211.324 80.014 C 210.622 80.006,209.936 79.820,209.800 79.600 C 209.664 79.380,208.609 79.200,207.456 79.200 C 206.303 79.200,205.189 79.032,204.980 78.827 C 204.504 78.359,193.361 78.100,190.400 78.488 M204.734 79.565 C 205.181 79.804,206.333 80.000,207.294 80.000 C 208.254 80.000,209.211 80.162,209.420 80.359 C 209.629 80.556,210.520 80.802,211.400 80.905 C 212.280 81.008,213.540 81.285,214.200 81.521 C 214.860 81.758,216.210 82.183,217.200 82.467 C 218.190 82.751,219.775 83.392,220.721 83.891 C 221.668 84.391,222.796 84.800,223.229 84.800 C 223.662 84.800,224.729 85.250,225.600 85.800 C 226.471 86.350,227.292 86.800,227.425 86.800 C 227.557 86.800,228.416 87.409,229.333 88.152 C 230.250 88.896,232.301 90.182,233.891 91.009 C 235.481 91.836,236.886 92.841,237.013 93.241 C 237.302 94.152,241.786 98.497,242.845 98.892 C 243.276 99.053,243.937 99.766,244.314 100.477 C 244.691 101.187,245.905 102.765,247.011 103.984 C 248.117 105.203,249.826 107.819,250.811 109.800 C 251.795 111.780,252.735 113.460,252.900 113.533 C 253.065 113.607,253.200 113.990,253.200 114.384 C 253.200 114.779,253.462 115.320,253.783 115.586 C 254.104 115.852,254.745 117.359,255.208 118.935 C 255.671 120.511,256.309 122.310,256.625 122.932 C 256.941 123.555,257.200 124.512,257.200 125.059 C 257.200 125.605,257.396 126.420,257.637 126.868 C 257.973 127.496,258.456 137.030,258.363 141.200 C 258.271 145.339,257.948 148.951,257.614 149.574 C 257.386 149.999,257.200 150.979,257.200 151.750 C 257.200 152.522,257.034 153.255,256.831 153.381 C 256.628 153.506,256.345 154.139,256.203 154.787 C 256.060 155.435,255.597 156.685,255.172 157.564 C 254.747 158.442,254.400 159.356,254.400 159.594 C 254.400 160.181,252.503 163.889,252.064 164.161 C 251.871 164.280,251.071 165.694,250.286 167.302 C 249.502 168.911,247.941 171.211,246.818 172.414 C 245.695 173.616,244.527 175.050,244.223 175.600 C 243.500 176.909,235.852 184.400,235.239 184.400 C 234.978 184.400,234.280 184.850,233.687 185.400 C 233.093 185.950,232.436 186.400,232.226 186.400 C 232.016 186.400,231.384 186.821,230.822 187.336 C 230.260 187.851,229.170 188.514,228.400 188.809 C 227.630 189.105,226.491 189.763,225.869 190.273 C 225.247 190.783,224.569 191.200,224.361 191.200 C 224.154 191.200,223.271 191.650,222.400 192.200 C 221.529 192.750,220.473 193.200,220.054 193.200 C 219.634 193.200,218.776 193.469,218.146 193.798 C 217.516 194.126,216.426 194.396,215.724 194.398 C 215.022 194.399,214.349 194.559,214.229 194.754 C 213.914 195.264,209.340 196.141,203.800 196.755 C 199.789 197.200,188.245 196.959,187.219 196.410 C 186.797 196.185,185.821 196.000,185.050 196.000 C 184.278 196.000,183.536 195.820,183.400 195.600 C 183.264 195.380,182.634 195.200,182.000 195.200 C 181.366 195.200,180.736 195.020,180.600 194.800 C 180.464 194.580,179.778 194.399,179.076 194.398 C 178.374 194.396,177.284 194.126,176.654 193.798 C 176.024 193.469,175.273 193.200,174.986 193.200 C 174.699 193.200,173.234 192.592,171.732 191.848 C 170.229 191.105,168.730 190.386,168.400 190.251 C 167.568 189.910,166.409 189.161,165.072 188.100 C 164.449 187.605,163.718 187.200,163.448 187.200 C 163.178 187.200,162.346 186.570,161.600 185.800 C 160.854 185.030,160.018 184.400,159.743 184.400 C 159.098 184.400,148.219 173.485,146.845 171.459 C 146.270 170.612,145.498 169.378,145.130 168.717 C 144.761 168.055,144.086 167.117,143.630 166.631 C 143.173 166.146,142.800 165.436,142.800 165.054 C 142.800 164.203,141.753 162.080,140.801 161.000 C 140.413 160.560,139.997 159.660,139.877 159.000 C 139.392 156.336,138.696 153.779,138.358 153.420 C 138.161 153.211,138.000 152.530,138.000 151.907 C 138.000 151.284,137.730 150.128,137.400 149.338 C 137.070 148.549,136.800 147.234,136.800 146.418 C 136.800 145.601,136.698 144.831,136.572 144.706 C 135.620 143.753,136.719 127.123,137.940 124.006 C 138.413 122.799,138.806 121.449,138.813 121.006 C 138.820 120.563,139.090 119.851,139.413 119.424 C 139.736 118.996,140.000 118.265,140.000 117.799 C 140.000 117.333,140.338 116.588,140.751 116.145 C 141.164 115.701,141.629 114.902,141.784 114.369 C 142.332 112.482,144.547 108.185,145.517 107.126 C 146.058 106.535,146.703 105.705,146.950 105.283 C 148.483 102.664,150.071 100.811,154.829 96.092 C 157.763 93.181,160.319 90.800,160.508 90.800 C 160.698 90.800,161.443 90.350,162.164 89.800 C 162.886 89.250,163.656 88.800,163.876 88.800 C 164.096 88.800,164.587 88.456,164.967 88.036 C 165.348 87.616,166.120 87.156,166.684 87.015 C 167.248 86.873,168.287 86.317,168.992 85.779 C 169.698 85.240,170.666 84.800,171.143 84.800 C 171.620 84.800,172.323 84.646,172.705 84.459 C 174.681 83.488,176.397 82.781,178.190 82.197 C 179.285 81.840,180.365 81.399,180.590 81.217 C 180.816 81.035,181.810 80.790,182.800 80.672 C 183.790 80.554,185.500 80.254,186.600 80.003 C 187.700 79.753,189.500 79.412,190.600 79.246 C 193.450 78.813,203.765 79.046,204.734 79.565 M167.015 222.776 C 166.862 223.023,165.285 223.200,163.243 223.200 C 161.313 223.200,159.601 223.332,159.440 223.494 C 159.125 223.809,155.499 224.710,153.200 225.046 C 151.769 225.254,151.328 225.401,148.686 226.545 C 147.854 226.905,146.740 227.200,146.210 227.200 C 145.680 227.200,145.136 227.380,145.000 227.600 C 144.864 227.820,144.471 228.000,144.126 228.000 C 143.129 228.000,132.451 233.493,129.674 235.434 C 128.285 236.405,127.058 237.200,126.948 237.200 C 126.837 237.200,126.157 237.650,125.436 238.200 C 124.714 238.750,123.960 239.200,123.759 239.200 C 123.558 239.200,122.405 240.208,121.197 241.441 C 119.989 242.673,118.550 243.915,118.000 244.201 C 117.076 244.680,115.604 246.198,110.142 252.300 C 109.009 253.565,107.586 255.500,106.979 256.600 C 106.371 257.700,105.273 259.339,104.537 260.241 C 103.802 261.144,103.200 262.008,103.200 262.160 C 103.200 262.313,102.592 263.389,101.849 264.551 C 101.105 265.713,100.359 267.099,100.191 267.632 C 100.023 268.164,99.596 269.042,99.243 269.582 C 98.573 270.606,97.785 272.550,97.208 274.600 C 96.898 275.700,96.342 277.347,95.586 279.400 C 94.442 282.506,93.575 286.678,93.258 290.600 C 93.116 292.360,92.839 294.050,92.642 294.356 C 92.106 295.188,92.335 306.956,92.914 308.321 C 93.798 310.405,96.918 313.447,99.278 314.527 C 100.514 315.092,101.649 315.756,101.801 316.002 C 102.137 316.545,103.837 317.256,105.200 317.424 C 105.750 317.492,106.875 317.739,107.700 317.974 C 108.525 318.208,109.875 318.591,110.700 318.825 C 111.525 319.058,112.470 319.253,112.800 319.257 C 113.130 319.262,113.871 319.442,114.446 319.659 C 115.602 320.094,117.520 320.241,128.400 320.729 C 132.470 320.912,136.160 321.240,136.600 321.459 C 137.636 321.973,262.837 321.878,263.637 321.362 C 263.947 321.163,266.990 320.874,270.400 320.721 C 279.187 320.325,283.484 319.878,284.061 319.300 C 284.354 319.007,285.592 318.800,287.056 318.800 C 288.429 318.800,289.648 318.645,289.765 318.456 C 289.882 318.267,290.980 317.995,292.204 317.851 C 295.419 317.473,301.173 314.892,303.341 312.856 C 303.842 312.385,304.431 312.000,304.649 312.000 C 305.625 312.000,306.539 310.779,306.919 308.966 C 307.984 303.893,306.908 285.640,305.400 283.200 C 305.206 282.886,304.902 281.858,304.724 280.915 C 304.546 279.972,304.253 278.435,304.073 277.500 C 303.893 276.565,303.554 275.440,303.320 275.000 C 303.085 274.560,302.717 273.750,302.502 273.200 C 302.002 271.921,300.908 269.575,300.451 268.800 C 300.256 268.470,299.796 267.570,299.428 266.800 C 298.127 264.079,296.424 261.089,295.752 260.347 C 295.377 259.933,294.875 259.266,294.636 258.865 C 290.871 252.560,281.646 242.938,275.221 238.614 C 274.065 237.836,273.011 237.200,272.879 237.200 C 272.746 237.200,272.090 236.685,271.419 236.056 C 270.749 235.427,269.390 234.488,268.400 233.969 C 267.410 233.450,266.330 232.813,266.000 232.553 C 264.898 231.686,262.613 230.535,261.400 230.236 C 260.740 230.074,259.840 229.616,259.400 229.220 C 258.960 228.823,257.903 228.374,257.051 228.222 C 256.199 228.070,255.209 227.795,254.851 227.612 C 254.493 227.428,253.390 227.063,252.400 226.801 C 251.410 226.538,250.009 226.070,249.286 225.762 C 248.564 225.453,247.517 225.200,246.960 225.200 C 246.403 225.200,245.554 224.987,245.074 224.726 C 243.745 224.006,240.983 223.527,237.000 223.327 C 235.020 223.227,233.229 222.978,233.020 222.773 C 232.505 222.268,225.463 222.297,224.954 222.806 C 224.523 223.237,180.153 223.063,171.739 222.598 C 168.769 222.434,167.190 222.493,167.015 222.776 M200.700 223.656 C 214.175 223.641,226.865 223.608,228.900 223.581 C 232.220 223.536,234.952 223.757,242.000 224.636 C 243.210 224.787,244.555 225.156,244.989 225.455 C 245.423 225.755,246.280 226.000,246.894 226.000 C 247.508 226.000,248.323 226.158,248.705 226.352 C 249.087 226.545,250.390 227.010,251.600 227.386 C 252.810 227.761,254.160 228.220,254.600 228.405 C 255.040 228.591,256.050 228.849,256.845 228.979 C 257.640 229.109,258.613 229.572,259.007 230.008 C 259.401 230.444,260.108 230.800,260.577 230.800 C 261.577 230.800,264.162 232.055,265.362 233.123 C 265.823 233.533,266.920 234.194,267.800 234.591 C 268.680 234.989,270.053 235.874,270.852 236.557 C 271.650 237.241,273.083 238.250,274.036 238.800 C 274.989 239.350,276.496 240.449,277.384 241.243 C 278.273 242.036,279.224 242.756,279.498 242.843 C 280.230 243.074,287.200 250.077,287.200 250.582 C 287.200 250.819,288.276 252.090,289.591 253.406 C 290.906 254.723,291.995 255.980,292.011 256.200 C 292.027 256.420,292.844 257.680,293.826 259.000 C 294.808 260.320,296.017 262.219,296.514 263.220 C 297.010 264.221,297.817 265.550,298.308 266.174 C 298.799 266.797,299.200 267.663,299.200 268.096 C 299.200 268.530,299.650 269.419,300.200 270.073 C 300.750 270.727,301.200 271.574,301.200 271.956 C 301.200 272.337,301.591 273.449,302.069 274.425 C 302.547 275.401,303.075 276.920,303.243 277.800 C 303.622 279.788,304.402 282.739,304.828 283.800 C 305.279 284.920,305.629 287.292,305.861 290.800 C 305.971 292.450,306.227 293.971,306.430 294.180 C 307.855 295.644,306.287 311.200,304.714 311.200 C 304.473 311.200,303.686 311.650,302.964 312.200 C 302.243 312.750,301.532 313.200,301.384 313.200 C 301.237 313.200,300.581 313.650,299.927 314.200 C 299.273 314.750,298.386 315.200,297.955 315.200 C 297.524 315.200,296.753 315.474,296.242 315.809 C 295.187 316.501,290.701 317.520,286.713 317.974 C 285.236 318.142,283.795 318.472,283.513 318.706 C 282.964 319.162,279.895 319.434,270.000 319.905 C 266.590 320.067,263.549 320.362,263.242 320.559 C 262.435 321.079,137.625 321.171,136.600 320.652 C 136.160 320.430,132.650 320.107,128.800 319.935 C 118.850 319.490,111.440 318.585,109.574 317.586 C 109.177 317.374,108.401 317.200,107.850 317.200 C 107.298 317.200,106.736 317.020,106.600 316.800 C 106.464 316.580,105.798 316.400,105.120 316.400 C 104.370 316.400,102.893 315.773,101.353 314.800 C 99.960 313.920,98.620 313.200,98.377 313.200 C 97.730 313.200,94.000 309.385,94.000 308.723 C 94.000 308.413,93.798 307.958,93.552 307.712 C 92.892 307.052,92.840 296.606,93.487 294.650 C 93.769 293.797,94.000 291.873,94.000 290.373 C 94.000 288.874,94.156 287.551,94.347 287.433 C 94.538 287.315,94.781 286.449,94.887 285.509 C 95.116 283.481,96.612 278.269,97.425 276.668 C 97.741 276.045,98.000 275.187,98.000 274.762 C 98.000 274.337,98.158 273.677,98.351 273.295 C 98.544 272.913,98.993 271.970,99.349 271.200 C 99.704 270.430,100.154 269.530,100.349 269.200 C 100.544 268.870,100.999 267.970,101.360 267.200 C 102.557 264.651,104.608 261.245,105.626 260.115 C 106.177 259.502,107.055 258.190,107.575 257.200 C 108.096 256.210,109.529 254.275,110.761 252.901 C 116.179 246.853,118.161 244.800,118.579 244.800 C 118.826 244.800,120.008 243.807,121.207 242.593 C 122.406 241.379,124.352 239.804,125.531 239.093 C 126.710 238.382,128.179 237.395,128.795 236.900 C 129.411 236.405,130.101 236.000,130.327 236.000 C 130.553 236.000,131.247 235.581,131.869 235.068 C 132.491 234.556,133.270 234.017,133.600 233.871 C 133.930 233.725,134.470 233.445,134.800 233.249 C 135.130 233.053,136.930 232.129,138.800 231.195 C 140.670 230.261,142.371 229.340,142.580 229.148 C 142.789 228.957,143.453 228.800,144.056 228.800 C 144.659 228.800,145.264 228.620,145.400 228.400 C 145.536 228.180,146.047 228.000,146.535 228.000 C 147.023 228.000,147.777 227.756,148.211 227.458 C 148.980 226.930,149.706 226.712,153.000 226.021 C 153.880 225.837,155.140 225.499,155.800 225.272 C 157.840 224.568,161.724 224.000,164.500 224.000 C 165.980 224.000,167.272 223.808,167.422 223.565 C 167.606 223.267,169.032 223.217,171.945 223.405 C 174.285 223.557,187.225 223.670,200.700 223.656 \",\n  stroke: \"none\",\n  fill: \"#64c4d7\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path3\",\n  d: \"M198.100 6.294 C 199.145 6.376,200.855 6.376,201.900 6.294 C 202.945 6.212,202.090 6.144,200.000 6.144 C 197.910 6.144,197.055 6.212,198.100 6.294 M158.605 10.574 C 159.592 11.320,159.861 11.339,160.113 10.682 C 160.246 10.336,159.896 10.132,159.061 10.068 C 157.867 9.977,157.846 10.000,158.605 10.574 M388.406 156.900 C 388.411 157.628,388.486 157.685,388.800 157.200 C 389.301 156.424,389.301 156.000,388.800 156.000 C 388.580 156.000,388.403 156.405,388.406 156.900 M392.045 174.509 C 392.708 175.784,392.800 175.833,392.800 174.909 C 392.800 174.456,392.526 173.980,392.191 173.852 C 391.679 173.655,391.655 173.760,392.045 174.509 M392.752 182.600 C 392.514 184.199,392.600 184.734,393.027 184.307 C 393.151 184.182,393.194 183.387,393.122 182.540 L 392.991 181.000 392.752 182.600 M393.452 195.300 C 393.128 196.510,393.187 203.625,393.528 204.485 C 393.678 204.862,393.800 202.747,393.800 199.785 C 393.800 193.933,393.804 193.986,393.452 195.300 M6.148 200.000 C 6.148 202.310,6.214 203.255,6.295 202.100 C 6.376 200.945,6.376 199.055,6.295 197.900 C 6.214 196.745,6.148 197.690,6.148 200.000 M392.701 215.900 C 392.621 216.065,392.676 216.830,392.825 217.600 L 393.095 219.000 393.147 217.300 C 393.197 215.704,393.038 215.208,392.701 215.900 M388.406 243.100 C 388.403 243.595,388.580 244.000,388.800 244.000 C 389.301 244.000,389.301 243.576,388.800 242.800 C 388.486 242.315,388.411 242.372,388.406 243.100 M216.100 393.076 C 216.485 393.176,217.115 393.176,217.500 393.076 C 217.885 392.975,217.570 392.893,216.800 392.893 C 216.030 392.893,215.715 392.975,216.100 393.076 M202.800 393.611 L 201.400 393.917 203.076 393.882 C 203.998 393.862,204.662 393.701,204.553 393.523 C 204.443 393.345,204.318 393.224,204.276 393.253 C 204.234 393.282,203.570 393.443,202.800 393.611 \",\n  stroke: \"none\",\n  fill: \"#6c6464\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path4\",\n  d: \"M188.254 78.202 C 187.624 78.531,186.420 78.800,185.578 78.800 C 184.736 78.800,183.936 78.980,183.800 79.200 C 183.664 79.420,182.888 79.606,182.076 79.613 C 181.264 79.620,180.251 79.890,179.824 80.213 C 179.396 80.536,178.731 80.800,178.345 80.800 C 177.958 80.800,176.796 81.250,175.762 81.800 C 174.727 82.350,173.468 82.800,172.964 82.800 C 172.460 82.800,171.936 82.980,171.800 83.200 C 171.664 83.420,171.127 83.600,170.607 83.600 C 170.087 83.600,169.127 84.050,168.473 84.600 C 167.819 85.150,166.930 85.600,166.497 85.600 C 165.787 85.600,164.990 86.111,161.537 88.779 C 160.952 89.230,160.246 89.600,159.968 89.600 C 159.283 89.600,148.068 100.757,147.752 101.752 C 147.614 102.186,147.073 103.003,146.551 103.567 C 146.028 104.130,145.600 104.783,145.600 105.017 C 145.600 105.252,144.970 106.054,144.200 106.800 C 143.430 107.546,142.800 108.395,142.800 108.686 C 142.800 108.978,142.350 109.929,141.800 110.800 C 141.250 111.671,140.800 112.767,140.800 113.234 C 140.800 113.702,140.350 114.619,139.800 115.273 C 139.250 115.927,138.800 116.793,138.800 117.198 C 138.800 117.604,138.544 118.445,138.230 119.068 C 137.917 119.690,137.443 121.010,137.178 122.000 C 136.913 122.990,136.450 124.367,136.148 125.060 C 135.847 125.754,135.600 127.498,135.600 128.937 C 135.600 130.376,135.420 131.664,135.200 131.800 C 134.961 131.948,134.800 134.596,134.800 138.400 C 134.800 142.204,134.961 144.852,135.200 145.000 C 135.420 145.136,135.606 146.092,135.614 147.124 C 135.622 148.156,135.886 149.450,136.200 150.000 C 136.514 150.550,136.778 151.664,136.786 152.476 C 136.794 153.288,136.980 154.064,137.200 154.200 C 137.420 154.336,137.606 155.022,137.614 155.724 C 137.622 156.426,137.886 157.450,138.200 158.000 C 138.514 158.550,138.778 159.383,138.786 159.851 C 138.794 160.319,139.081 160.935,139.424 161.220 C 140.190 161.856,141.600 164.706,141.600 165.620 C 141.600 166.224,142.143 167.052,144.779 170.463 C 145.230 171.048,145.600 171.755,145.600 172.035 C 145.600 172.712,158.020 185.200,158.693 185.200 C 158.982 185.200,159.999 185.920,160.954 186.800 C 161.908 187.680,162.872 188.400,163.096 188.400 C 163.319 188.400,163.729 188.674,164.007 189.009 C 164.560 189.675,173.831 194.400,174.584 194.400 C 174.840 194.400,175.776 194.751,176.664 195.180 C 177.551 195.609,178.620 195.966,179.039 195.975 C 180.560 196.006,182.813 196.497,183.027 196.844 C 183.148 197.040,183.912 197.206,184.724 197.213 C 185.536 197.220,186.549 197.490,186.976 197.813 C 188.120 198.678,205.880 198.678,207.024 197.813 C 207.468 197.477,208.689 197.220,209.876 197.213 C 211.018 197.206,212.064 197.020,212.200 196.800 C 212.336 196.580,212.966 196.400,213.600 196.400 C 214.234 196.400,214.869 196.213,215.010 195.984 C 215.152 195.755,215.577 195.666,215.955 195.786 C 216.333 195.906,217.389 195.643,218.302 195.202 C 219.214 194.761,220.195 194.399,220.481 194.398 C 221.143 194.397,225.428 192.271,226.322 191.500 C 226.695 191.179,227.900 190.493,229.000 189.976 C 230.100 189.458,231.398 188.687,231.885 188.262 C 232.372 187.837,233.111 187.289,233.528 187.044 C 235.980 185.606,237.819 184.095,241.300 180.653 C 243.445 178.533,245.200 176.603,245.200 176.364 C 245.200 176.126,246.253 174.821,247.541 173.465 C 248.828 172.109,250.484 169.830,251.220 168.400 C 251.956 166.970,252.928 165.263,253.379 164.606 C 254.553 162.898,255.200 161.595,255.200 160.941 C 255.200 160.629,255.650 159.485,256.200 158.400 C 256.750 157.315,257.206 156.106,257.213 155.713 C 257.220 155.321,257.490 154.651,257.813 154.224 C 258.136 153.796,258.400 152.772,258.400 151.947 C 258.400 151.122,258.580 150.336,258.800 150.200 C 259.020 150.064,259.200 148.383,259.200 146.465 C 259.200 143.878,259.370 142.736,259.857 142.040 C 260.467 141.170,260.467 141.021,259.857 139.989 C 259.095 138.699,258.986 135.974,259.669 135.291 C 260.011 134.949,260.023 134.568,259.712 133.885 C 259.416 133.237,259.412 132.721,259.698 132.210 C 259.989 131.691,259.976 131.254,259.656 130.741 C 259.405 130.339,259.200 129.119,259.200 128.029 C 259.200 126.939,259.020 125.936,258.800 125.800 C 258.580 125.664,258.394 125.068,258.387 124.476 C 258.380 123.884,258.110 123.051,257.787 122.624 C 257.464 122.196,257.200 121.442,257.200 120.947 C 257.200 120.452,257.020 119.936,256.800 119.800 C 256.580 119.664,256.400 118.865,256.400 118.025 C 256.400 117.121,256.142 116.284,255.767 115.973 C 255.100 115.419,254.949 115.148,251.842 108.923 C 250.620 106.475,249.041 104.075,247.642 102.540 C 246.409 101.187,244.981 99.522,244.470 98.840 C 243.958 98.158,243.322 97.600,243.056 97.600 C 242.468 97.600,238.400 93.543,238.400 92.957 C 238.400 92.231,236.691 90.953,233.934 89.616 C 232.467 88.905,230.855 87.885,230.351 87.348 C 229.410 86.346,224.299 83.600,223.375 83.600 C 223.091 83.600,221.649 82.970,220.172 82.200 C 218.695 81.430,216.927 80.794,216.243 80.786 C 215.559 80.778,214.550 80.514,214.000 80.200 C 213.450 79.886,212.426 79.622,211.724 79.614 C 211.022 79.606,210.336 79.420,210.200 79.200 C 210.064 78.980,209.018 78.794,207.876 78.787 C 206.689 78.780,205.468 78.523,205.024 78.187 C 203.886 77.327,189.909 77.339,188.254 78.202 M204.980 78.827 C 205.189 79.032,206.303 79.200,207.456 79.200 C 208.609 79.200,209.664 79.380,209.800 79.600 C 209.936 79.820,210.622 80.006,211.324 80.014 C 212.026 80.022,213.050 80.286,213.600 80.600 C 214.150 80.914,215.172 81.178,215.871 81.186 C 216.570 81.194,218.351 81.830,219.828 82.600 C 221.305 83.370,222.763 84.000,223.067 84.000 C 223.974 84.000,228.939 86.644,229.779 87.574 C 230.207 88.049,231.377 88.849,232.379 89.352 C 236.198 91.271,238.000 92.564,238.000 93.383 C 238.000 94.050,242.067 97.876,243.106 98.187 C 243.605 98.336,244.616 99.390,245.354 100.529 C 246.093 101.668,247.277 103.140,247.986 103.800 C 248.695 104.460,249.867 106.170,250.591 107.600 C 252.911 112.185,254.194 114.575,254.883 115.600 C 255.253 116.150,255.735 117.320,255.955 118.200 C 256.175 119.080,256.531 120.497,256.746 121.349 C 256.962 122.201,257.332 123.092,257.569 123.329 C 257.806 123.566,258.000 124.228,258.000 124.800 C 258.000 125.372,258.203 126.043,258.452 126.292 C 258.750 126.590,258.899 128.834,258.890 132.872 C 258.882 136.337,259.068 139.565,259.318 140.300 C 259.652 141.280,259.642 141.718,259.280 142.080 C 258.980 142.380,258.800 143.869,258.800 146.056 C 258.800 147.979,258.620 149.664,258.400 149.800 C 258.180 149.936,258.000 150.722,258.000 151.547 C 258.000 152.372,257.736 153.396,257.413 153.824 C 257.090 154.251,256.820 154.987,256.813 155.459 C 256.806 155.932,256.352 157.102,255.805 158.059 C 255.257 159.017,254.807 160.081,254.805 160.425 C 254.799 161.197,253.342 164.265,252.832 164.580 C 252.626 164.707,251.805 166.115,251.007 167.708 C 250.209 169.302,248.486 171.769,247.178 173.191 C 245.870 174.613,244.800 175.965,244.800 176.195 C 244.800 176.841,236.711 184.687,235.753 184.970 C 235.287 185.108,234.584 185.576,234.191 186.010 C 233.798 186.445,233.262 186.800,233.000 186.800 C 232.738 186.800,232.198 187.160,231.800 187.600 C 231.401 188.041,230.124 188.851,228.961 189.401 C 227.798 189.951,226.742 190.571,226.614 190.778 C 226.261 191.349,220.794 194.000,219.970 194.000 C 219.572 194.000,219.139 194.175,219.007 194.388 C 218.875 194.602,217.870 194.896,216.775 195.041 C 215.679 195.187,214.685 195.462,214.567 195.653 C 214.449 195.844,213.834 196.000,213.200 196.000 C 212.566 196.000,211.936 196.180,211.800 196.400 C 211.664 196.620,210.609 196.800,209.456 196.800 C 208.303 196.800,207.135 197.025,206.860 197.300 C 206.212 197.948,187.924 197.961,187.124 197.313 C 186.836 197.081,185.880 196.798,185.000 196.686 C 184.120 196.574,182.680 196.268,181.800 196.008 C 180.920 195.747,179.716 195.477,179.125 195.408 C 178.533 195.339,177.470 194.994,176.763 194.642 C 176.056 194.289,175.218 194.000,174.900 194.000 C 174.583 194.000,173.846 193.750,173.262 193.443 C 172.678 193.137,170.615 192.106,168.678 191.150 C 166.741 190.195,164.868 189.096,164.516 188.707 C 164.164 188.318,163.690 188.000,163.464 188.000 C 163.237 188.000,162.198 187.280,161.154 186.400 C 160.110 185.520,159.101 184.800,158.912 184.800 C 158.254 184.800,146.186 172.190,145.196 170.468 C 144.648 169.515,143.820 168.255,143.355 167.668 C 142.890 167.080,142.384 166.150,142.230 165.600 C 141.795 164.047,141.107 162.681,140.285 161.739 C 139.554 160.901,139.149 159.692,138.371 156.016 C 138.163 155.036,137.815 154.055,137.596 153.836 C 137.378 153.618,137.200 152.834,137.200 152.094 C 137.200 151.353,137.001 150.376,136.759 149.923 C 135.611 147.779,134.642 133.354,135.570 132.236 C 135.797 131.963,136.055 130.390,136.144 128.739 C 136.234 127.088,136.490 125.392,136.714 124.969 C 136.937 124.546,137.445 123.120,137.842 121.800 C 138.239 120.480,138.707 119.229,138.882 119.020 C 139.057 118.811,139.200 118.167,139.200 117.590 C 139.200 116.987,139.626 116.139,140.200 115.600 C 140.750 115.083,141.201 114.287,141.203 113.830 C 141.206 112.842,143.283 108.854,145.088 106.371 C 145.796 105.397,146.786 103.979,147.288 103.220 C 149.066 100.531,158.887 90.860,161.365 89.357 C 162.704 88.545,164.160 87.566,164.600 87.183 C 165.040 86.800,165.966 86.367,166.659 86.221 C 167.351 86.074,168.230 85.608,168.613 85.185 C 168.996 84.762,169.917 84.302,170.659 84.162 C 171.402 84.023,172.107 83.750,172.228 83.555 C 172.349 83.360,172.797 83.200,173.226 83.200 C 173.654 83.200,174.937 82.750,176.077 82.200 C 177.217 81.650,178.431 81.194,178.775 81.187 C 179.119 81.180,179.749 80.910,180.176 80.587 C 180.604 80.264,181.603 80.000,182.396 80.000 C 183.190 80.000,184.011 79.838,184.220 79.641 C 184.583 79.298,185.444 79.137,190.400 78.488 C 193.361 78.100,204.504 78.359,204.980 78.827 M166.976 222.187 C 166.436 222.596,165.145 222.778,162.724 222.787 C 160.812 222.794,159.136 222.980,159.000 223.200 C 158.864 223.420,158.078 223.600,157.253 223.600 C 156.428 223.600,155.404 223.864,154.976 224.187 C 154.549 224.510,153.657 224.780,152.994 224.787 C 152.331 224.794,150.801 225.180,149.594 225.645 C 148.387 226.110,146.903 226.581,146.295 226.691 C 145.687 226.802,145.092 227.051,144.971 227.246 C 144.851 227.441,144.379 227.600,143.922 227.600 C 143.051 227.600,134.129 231.868,133.764 232.459 C 133.648 232.647,133.235 232.800,132.846 232.800 C 132.457 232.800,131.717 233.250,131.200 233.800 C 130.683 234.350,130.050 234.800,129.792 234.800 C 129.535 234.800,129.002 235.155,128.609 235.590 C 128.216 236.024,127.513 236.499,127.047 236.646 C 125.903 237.006,124.421 238.134,121.258 241.051 C 119.796 242.400,118.221 243.619,117.757 243.760 C 116.702 244.082,111.600 249.323,111.600 250.084 C 111.600 250.393,110.603 251.605,109.385 252.778 C 108.167 253.952,106.731 255.842,106.192 256.979 C 105.654 258.117,104.755 259.478,104.194 260.005 C 103.633 260.532,102.780 261.782,102.297 262.782 C 101.814 263.782,101.010 265.109,100.510 265.731 C 100.009 266.353,99.600 267.227,99.600 267.673 C 99.600 268.119,99.150 269.019,98.600 269.673 C 98.050 270.327,97.600 271.287,97.600 271.807 C 97.600 272.327,97.420 272.864,97.200 273.000 C 96.980 273.136,96.800 273.652,96.800 274.147 C 96.800 274.642,96.536 275.396,96.213 275.824 C 95.890 276.251,95.620 277.084,95.613 277.676 C 95.606 278.268,95.420 278.864,95.200 279.000 C 94.980 279.136,94.800 279.666,94.800 280.178 C 94.800 280.690,94.531 281.624,94.202 282.254 C 93.874 282.884,93.604 284.154,93.602 285.076 C 93.601 285.998,93.420 286.864,93.200 287.000 C 92.980 287.136,92.794 288.632,92.787 290.324 C 92.779 292.392,92.582 293.654,92.187 294.176 C 91.281 295.374,91.352 306.221,92.280 308.286 C 93.082 310.074,97.107 314.394,97.987 314.413 C 98.324 314.421,99.320 314.954,100.200 315.598 C 102.440 317.237,103.941 317.863,106.439 318.199 C 107.628 318.359,108.780 318.625,109.000 318.791 C 109.220 318.957,109.940 319.218,110.600 319.371 C 111.762 319.641,112.214 319.728,115.200 320.254 C 115.970 320.389,116.833 320.686,117.117 320.913 C 117.476 321.200,117.775 321.185,118.097 320.863 C 118.656 320.304,120.492 320.252,121.020 320.779 C 121.229 320.988,124.190 321.245,127.600 321.351 C 134.600 321.569,135.807 321.674,136.233 322.100 C 136.871 322.738,263.328 322.429,264.176 321.787 C 264.778 321.333,266.284 321.200,270.853 321.200 C 274.355 321.200,276.853 321.037,277.000 320.800 C 277.136 320.580,278.642 320.400,280.347 320.400 C 282.454 320.400,283.696 320.212,284.224 319.813 C 284.707 319.447,285.936 319.221,287.476 319.213 C 288.838 319.206,290.064 319.020,290.200 318.800 C 290.336 318.580,291.253 318.400,292.237 318.400 C 293.353 318.400,294.769 318.024,296.000 317.400 C 297.085 316.850,298.261 316.400,298.613 316.400 C 298.965 316.400,299.843 315.950,300.564 315.400 C 301.286 314.850,302.052 314.400,302.268 314.400 C 302.484 314.400,303.083 313.950,303.600 313.400 C 304.117 312.850,304.771 312.400,305.054 312.400 C 305.958 312.400,307.200 310.690,307.214 309.425 C 307.222 308.751,307.486 307.750,307.800 307.200 C 308.629 305.749,308.619 294.923,307.787 293.824 C 307.396 293.307,307.200 292.078,307.200 290.147 C 307.200 288.552,307.020 287.136,306.800 287.000 C 306.580 286.864,306.394 286.088,306.386 285.276 C 306.378 284.464,306.114 283.350,305.800 282.800 C 305.486 282.250,305.222 281.226,305.214 280.524 C 305.206 279.822,305.020 279.136,304.800 279.000 C 304.580 278.864,304.400 278.148,304.400 277.409 C 304.400 276.670,303.950 275.170,303.400 274.075 C 302.850 272.980,302.400 271.776,302.400 271.400 C 302.400 271.023,301.950 270.181,301.400 269.527 C 300.850 268.873,300.400 267.934,300.400 267.439 C 300.400 266.944,299.950 266.117,299.400 265.600 C 298.850 265.083,298.400 264.354,298.400 263.979 C 298.400 263.605,298.130 263.074,297.800 262.800 C 297.470 262.526,297.200 262.125,297.200 261.909 C 297.200 261.692,296.750 260.981,296.200 260.327 C 295.650 259.673,295.200 258.914,295.200 258.639 C 295.200 258.364,294.750 257.717,294.200 257.200 C 293.650 256.683,293.200 256.061,293.200 255.818 C 293.200 255.574,292.120 254.306,290.800 253.000 C 289.480 251.694,288.400 250.372,288.400 250.064 C 288.400 249.265,282.184 242.974,279.800 241.361 C 278.700 240.616,276.990 239.376,276.000 238.605 C 275.010 237.834,273.804 237.030,273.321 236.819 C 272.837 236.608,271.757 235.830,270.921 235.090 C 270.084 234.350,268.559 233.357,267.531 232.885 C 266.504 232.412,265.560 231.858,265.433 231.654 C 265.079 231.081,262.063 229.600,261.250 229.600 C 260.851 229.600,260.201 229.244,259.807 228.808 C 259.413 228.372,258.440 227.912,257.645 227.786 C 256.850 227.660,255.887 227.386,255.505 227.178 C 255.123 226.970,254.403 226.794,253.905 226.787 C 253.407 226.780,252.651 226.510,252.224 226.187 C 251.796 225.864,250.952 225.600,250.347 225.600 C 249.742 225.600,249.136 225.420,249.000 225.200 C 248.864 224.980,248.088 224.794,247.276 224.787 C 246.464 224.780,245.451 224.510,245.024 224.187 C 244.596 223.864,243.572 223.600,242.747 223.600 C 241.922 223.600,241.136 223.420,241.000 223.200 C 240.864 222.980,239.188 222.794,237.276 222.787 C 234.855 222.778,233.564 222.596,233.024 222.187 C 231.963 221.385,226.602 221.395,225.054 222.202 C 223.379 223.076,177.529 223.074,176.000 222.200 C 174.594 221.396,168.035 221.387,166.976 222.187 M200.374 223.029 C 216.445 223.151,224.684 223.076,224.954 222.806 C 225.463 222.297,232.505 222.268,233.020 222.773 C 233.229 222.978,235.020 223.227,237.000 223.327 C 240.983 223.527,243.745 224.006,245.074 224.726 C 245.554 224.987,246.403 225.200,246.960 225.200 C 247.517 225.200,248.564 225.453,249.286 225.762 C 250.009 226.070,251.410 226.538,252.400 226.801 C 253.390 227.063,254.493 227.428,254.851 227.612 C 255.209 227.795,256.199 228.070,257.051 228.222 C 257.903 228.374,258.960 228.823,259.400 229.220 C 259.840 229.616,260.740 230.074,261.400 230.236 C 262.613 230.535,264.898 231.686,266.000 232.553 C 266.330 232.813,267.410 233.450,268.400 233.969 C 269.390 234.488,270.749 235.427,271.419 236.056 C 272.090 236.685,272.746 237.200,272.879 237.200 C 273.011 237.200,274.065 237.836,275.221 238.614 C 281.646 242.938,290.871 252.560,294.636 258.865 C 294.875 259.266,295.377 259.933,295.752 260.347 C 296.424 261.089,298.127 264.079,299.428 266.800 C 299.796 267.570,300.256 268.470,300.451 268.800 C 300.908 269.575,302.002 271.921,302.502 273.200 C 302.717 273.750,303.085 274.560,303.320 275.000 C 303.554 275.440,303.893 276.565,304.073 277.500 C 304.253 278.435,304.546 279.972,304.724 280.915 C 304.902 281.858,305.206 282.886,305.400 283.200 C 306.908 285.640,307.984 303.893,306.919 308.966 C 306.539 310.779,305.625 312.000,304.649 312.000 C 304.431 312.000,303.842 312.385,303.341 312.856 C 301.173 314.892,295.419 317.473,292.204 317.851 C 290.980 317.995,289.882 318.267,289.765 318.456 C 289.648 318.645,288.429 318.800,287.056 318.800 C 285.592 318.800,284.354 319.007,284.061 319.300 C 283.484 319.878,279.187 320.325,270.400 320.721 C 266.990 320.874,263.947 321.163,263.637 321.362 C 262.837 321.878,137.636 321.973,136.600 321.459 C 136.160 321.240,132.470 320.912,128.400 320.729 C 117.520 320.241,115.602 320.094,114.446 319.659 C 113.871 319.442,113.130 319.262,112.800 319.257 C 112.470 319.253,111.525 319.058,110.700 318.825 C 109.875 318.591,108.525 318.208,107.700 317.974 C 106.875 317.739,105.750 317.492,105.200 317.424 C 103.837 317.256,102.137 316.545,101.801 316.002 C 101.649 315.756,100.514 315.092,99.278 314.527 C 96.918 313.447,93.798 310.405,92.914 308.321 C 92.335 306.956,92.106 295.188,92.642 294.356 C 92.839 294.050,93.116 292.360,93.258 290.600 C 93.575 286.678,94.442 282.506,95.586 279.400 C 96.342 277.347,96.898 275.700,97.208 274.600 C 97.785 272.550,98.573 270.606,99.243 269.582 C 99.596 269.042,100.023 268.164,100.191 267.632 C 100.359 267.099,101.105 265.713,101.849 264.551 C 102.592 263.389,103.200 262.313,103.200 262.160 C 103.200 262.008,103.802 261.144,104.537 260.241 C 105.273 259.339,106.371 257.700,106.979 256.600 C 107.586 255.500,109.009 253.565,110.142 252.300 C 115.604 246.198,117.076 244.680,118.000 244.201 C 118.550 243.915,119.989 242.673,121.197 241.441 C 122.405 240.208,123.558 239.200,123.759 239.200 C 123.960 239.200,124.714 238.750,125.436 238.200 C 126.157 237.650,126.837 237.200,126.948 237.200 C 127.058 237.200,128.285 236.405,129.674 235.434 C 132.451 233.493,143.129 228.000,144.126 228.000 C 144.471 228.000,144.864 227.820,145.000 227.600 C 145.136 227.380,145.680 227.200,146.210 227.200 C 146.740 227.200,147.854 226.905,148.686 226.545 C 151.328 225.401,151.769 225.254,153.200 225.046 C 155.499 224.710,159.125 223.809,159.440 223.494 C 159.601 223.332,161.313 223.200,163.243 223.200 C 165.285 223.200,166.862 223.023,167.015 222.776 C 167.190 222.493,168.769 222.434,171.739 222.598 C 174.192 222.734,187.078 222.927,200.374 223.029 \",\n  stroke: \"none\",\n  fill: \"#68a084\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path5\",\n  d: \"M163.905 9.083 C 164.402 9.179,165.122 9.175,165.505 9.075 C 165.887 8.975,165.480 8.896,164.600 8.901 C 163.720 8.905,163.407 8.987,163.905 9.083 M187.800 78.000 C 187.664 78.220,186.798 78.430,185.876 78.467 C 184.252 78.532,184.244 78.539,185.617 78.686 C 186.408 78.771,187.557 78.566,188.217 78.222 C 188.949 77.840,189.142 77.604,188.724 77.602 C 188.352 77.601,187.936 77.780,187.800 78.000 M205.110 78.222 C 205.707 78.640,206.621 78.795,207.899 78.694 L 209.800 78.544 207.724 78.472 C 206.582 78.432,205.536 78.220,205.400 78.000 C 205.264 77.780,204.943 77.600,204.687 77.600 C 204.431 77.600,204.622 77.880,205.110 78.222 M176.749 81.100 C 176.271 81.709,176.278 81.740,176.800 81.338 C 177.130 81.084,177.850 80.794,178.400 80.693 L 179.400 80.509 178.349 80.454 C 177.770 80.424,177.052 80.714,176.749 81.100 M215.505 80.683 C 216.002 80.779,216.722 80.775,217.105 80.675 C 217.487 80.575,217.080 80.496,216.200 80.501 C 215.320 80.505,215.007 80.587,215.505 80.683 M174.600 82.000 C 174.464 82.220,173.868 82.425,173.276 82.454 C 172.343 82.502,172.319 82.532,173.094 82.681 C 173.585 82.776,174.390 82.572,174.883 82.227 C 175.375 81.882,175.569 81.600,175.313 81.600 C 175.057 81.600,174.736 81.780,174.600 82.000 M167.970 84.700 L 167.000 85.800 168.200 84.800 C 168.860 84.250,169.475 83.755,169.567 83.700 C 169.658 83.645,169.555 83.600,169.336 83.600 C 169.118 83.600,168.503 84.095,167.970 84.700 M224.433 83.757 C 224.936 84.230,227.622 85.559,227.422 85.235 C 227.291 85.024,226.620 84.569,225.931 84.225 C 224.731 83.627,224.079 83.423,224.433 83.757 M163.970 86.700 L 163.000 87.800 164.200 86.800 C 164.860 86.250,165.475 85.755,165.567 85.700 C 165.658 85.645,165.555 85.600,165.336 85.600 C 165.118 85.600,164.503 86.095,163.970 86.700 M230.109 87.134 C 231.735 88.609,233.515 89.633,232.997 88.795 C 232.863 88.578,232.529 88.400,232.255 88.400 C 231.981 88.400,231.146 87.770,230.400 87.000 C 229.654 86.230,228.902 85.600,228.730 85.600 C 228.559 85.600,229.179 86.290,230.109 87.134 M161.078 88.613 C 159.606 89.907,160.133 89.896,161.673 88.600 C 162.327 88.050,162.713 87.606,162.531 87.613 C 162.349 87.620,161.695 88.070,161.078 88.613 M153.214 95.386 C 150.037 98.568,147.520 101.223,147.619 101.286 C 147.719 101.349,150.418 98.745,153.618 95.500 C 156.817 92.255,159.335 89.600,159.212 89.600 C 159.090 89.600,156.391 92.204,153.214 95.386 M235.024 90.187 C 235.451 90.510,235.968 90.780,236.174 90.787 C 236.380 90.794,237.009 91.205,237.571 91.700 L 238.594 92.600 237.832 91.697 C 237.413 91.200,236.532 90.525,235.874 90.197 C 234.355 89.439,234.030 89.435,235.024 90.187 M240.400 95.400 C 241.595 96.610,242.663 97.600,242.773 97.600 C 242.883 97.600,241.995 96.610,240.800 95.400 C 239.605 94.190,238.537 93.200,238.427 93.200 C 238.317 93.200,239.205 94.190,240.400 95.400 M244.434 98.647 C 244.965 99.333,245.480 99.823,245.579 99.735 C 245.677 99.647,245.243 99.086,244.613 98.488 L 243.469 97.400 244.434 98.647 M247.815 102.812 C 249.127 104.249,250.282 105.367,250.381 105.298 C 250.481 105.228,249.408 104.052,247.997 102.685 L 245.431 100.200 247.815 102.812 M143.978 106.700 L 142.600 108.200 144.100 106.822 C 144.925 106.063,145.600 105.388,145.600 105.322 C 145.600 105.016,145.262 105.304,143.978 106.700 M250.400 106.096 C 250.400 106.513,252.140 109.593,252.291 109.442 C 252.373 109.361,252.051 108.598,251.577 107.747 C 250.651 106.087,250.400 105.735,250.400 106.096 M142.270 109.010 C 142.121 109.445,141.891 110.070,141.758 110.400 C 141.626 110.730,141.819 110.590,142.188 110.090 C 142.558 109.589,142.788 108.964,142.700 108.700 C 142.610 108.431,142.422 108.567,142.270 109.010 M252.400 110.072 C 252.400 110.506,253.669 112.796,254.035 113.022 C 254.247 113.152,254.036 112.571,253.567 111.730 C 252.667 110.115,252.400 109.736,252.400 110.072 M140.454 113.142 C 140.425 113.660,139.950 114.619,139.400 115.273 C 138.850 115.927,138.400 116.887,138.400 117.407 C 138.400 117.927,138.220 118.464,138.000 118.600 C 137.780 118.736,137.600 119.051,137.600 119.300 C 137.600 119.549,137.864 119.404,138.187 118.976 C 138.510 118.549,138.780 117.809,138.787 117.331 C 138.794 116.853,139.263 115.911,139.829 115.239 C 140.487 114.457,140.795 113.689,140.683 113.108 L 140.509 112.200 140.454 113.142 M256.400 119.087 C 256.400 119.343,256.580 119.664,256.800 119.800 C 257.020 119.936,257.225 120.532,257.254 121.124 C 257.302 122.057,257.332 122.081,257.481 121.306 C 257.576 120.815,257.372 120.010,257.027 119.517 C 256.682 119.025,256.400 118.831,256.400 119.087 M136.971 121.647 C 136.494 122.418,136.063 124.808,136.443 124.574 C 136.639 124.452,136.800 123.992,136.800 123.550 C 136.800 123.109,136.986 122.399,137.214 121.974 C 137.651 121.158,137.444 120.881,136.971 121.647 M259.270 128.276 C 259.231 129.418,259.396 130.474,259.635 130.622 C 259.874 130.769,259.974 131.256,259.857 131.703 C 259.700 132.304,259.762 132.398,260.094 132.066 C 260.427 131.733,260.424 131.380,260.081 130.708 C 259.827 130.209,259.556 128.990,259.479 128.000 L 259.340 126.200 259.270 128.276 M134.501 138.400 C 134.441 143.321,134.547 144.760,135.013 145.376 C 135.336 145.804,135.600 145.975,135.600 145.756 C 135.600 145.538,135.425 145.185,135.211 144.971 C 134.997 144.757,134.767 141.796,134.700 138.391 L 134.578 132.200 134.501 138.400 M259.857 134.297 C 259.974 134.744,259.874 135.231,259.635 135.378 C 259.396 135.526,259.230 136.492,259.267 137.524 C 259.334 139.379,259.336 139.382,259.478 137.800 C 259.557 136.920,259.829 135.791,260.083 135.292 C 260.424 134.620,260.427 134.267,260.094 133.934 C 259.762 133.602,259.700 133.696,259.857 134.297 M259.342 146.200 C 259.341 148.180,259.408 149.040,259.492 148.112 C 259.576 147.184,259.577 145.564,259.495 144.512 C 259.412 143.460,259.343 144.220,259.342 146.200 M136.501 152.200 C 136.505 153.080,136.587 153.393,136.683 152.895 C 136.779 152.398,136.775 151.678,136.675 151.295 C 136.575 150.913,136.496 151.320,136.501 152.200 M257.423 154.900 C 257.008 156.267,256.907 157.181,257.191 157.005 C 257.365 156.898,257.587 156.268,257.685 155.605 C 257.863 154.393,257.706 153.970,257.423 154.900 M138.454 159.630 C 138.419 160.299,138.787 161.001,139.500 161.630 L 140.600 162.600 139.735 161.600 C 139.259 161.050,138.789 160.150,138.690 159.600 L 138.509 158.600 138.454 159.630 M255.254 160.876 C 255.225 161.468,255.020 162.064,254.800 162.200 C 254.580 162.336,254.400 162.657,254.400 162.913 C 254.400 163.169,254.682 162.975,255.027 162.483 C 255.372 161.990,255.576 161.185,255.481 160.694 C 255.332 159.919,255.302 159.943,255.254 160.876 M141.600 166.664 C 141.600 166.882,142.095 167.497,142.700 168.030 L 143.800 169.000 142.800 167.800 C 142.250 167.140,141.755 166.525,141.700 166.433 C 141.645 166.342,141.600 166.445,141.600 166.664 M143.600 169.412 C 143.600 169.562,144.050 170.219,144.600 170.873 C 145.150 171.527,145.600 171.939,145.600 171.788 C 145.600 171.638,145.150 170.981,144.600 170.327 C 144.050 169.673,143.600 169.261,143.600 169.412 M247.815 173.188 L 245.431 175.800 247.997 173.315 C 249.408 171.948,250.481 170.772,250.381 170.702 C 250.282 170.633,249.127 171.751,247.815 173.188 M145.600 172.776 C 145.600 173.432,158.370 185.673,158.853 185.480 C 159.275 185.313,159.259 185.256,158.784 185.232 C 158.445 185.214,155.340 182.352,151.884 178.872 C 148.428 175.391,145.600 172.648,145.600 172.776 M237.715 184.010 C 236.789 184.885,236.167 185.600,236.334 185.600 C 236.501 185.600,237.341 184.880,238.200 184.000 C 240.210 181.941,239.900 181.948,237.715 184.010 M160.800 187.000 C 161.546 187.770,162.247 188.400,162.357 188.400 C 162.467 188.400,161.946 187.770,161.200 187.000 C 160.454 186.230,159.753 185.600,159.643 185.600 C 159.533 185.600,160.054 186.230,160.800 187.000 M234.600 186.400 C 234.202 186.840,233.656 187.200,233.387 187.200 C 233.118 187.200,232.678 187.465,232.409 187.789 C 231.978 188.308,232.060 188.309,233.095 187.792 C 234.164 187.259,236.002 185.600,235.524 185.600 C 235.414 185.600,234.998 185.960,234.600 186.400 M164.088 189.413 C 164.686 190.043,165.247 190.477,165.335 190.379 C 165.423 190.280,164.933 189.765,164.247 189.234 L 163.000 188.269 164.088 189.413 M394.142 191.800 C 394.141 193.780,394.208 194.640,394.292 193.712 C 394.376 192.784,394.377 191.164,394.295 190.112 C 394.212 189.060,394.143 189.820,394.142 191.800 M170.033 192.557 C 170.483 192.981,173.313 194.420,173.442 194.291 C 173.524 194.210,172.855 193.751,171.957 193.272 C 170.470 192.477,169.610 192.158,170.033 192.557 M175.424 194.987 C 175.851 195.310,176.470 195.579,176.800 195.585 C 177.130 195.590,176.884 195.326,176.254 194.998 C 174.795 194.237,174.425 194.232,175.424 194.987 M217.839 195.410 C 217.201 195.743,216.361 195.915,215.973 195.791 C 215.585 195.668,215.176 195.716,215.063 195.898 C 214.951 196.079,215.341 196.212,215.930 196.194 C 217.041 196.158,219.200 195.377,219.200 195.010 C 219.200 194.715,219.138 194.733,217.839 195.410 M177.832 196.052 C 177.932 196.214,178.553 196.331,179.213 196.312 C 179.872 196.293,180.332 196.198,180.234 196.101 C 179.925 195.792,177.642 195.745,177.832 196.052 M182.624 196.987 C 183.051 197.310,184.064 197.580,184.876 197.587 C 185.688 197.594,186.464 197.780,186.600 198.000 C 186.736 198.220,187.051 198.400,187.300 198.400 C 187.549 198.400,187.404 198.136,186.976 197.813 C 186.549 197.490,185.536 197.220,184.724 197.213 C 183.912 197.206,183.136 197.020,183.000 196.800 C 182.864 196.580,182.549 196.400,182.300 196.400 C 182.051 196.400,182.196 196.664,182.624 196.987 M207.024 197.813 C 206.596 198.136,206.425 198.400,206.644 198.400 C 206.862 198.400,207.211 198.231,207.420 198.024 C 207.629 197.817,208.700 197.580,209.800 197.496 L 211.800 197.344 209.800 197.285 C 208.577 197.249,207.498 197.454,207.024 197.813 M394.128 209.600 C 394.128 211.030,394.201 211.615,394.289 210.900 C 394.378 210.185,394.378 209.015,394.289 208.300 C 394.201 207.585,394.128 208.170,394.128 209.600 M166.600 222.000 C 166.464 222.220,164.788 222.437,162.876 222.481 L 159.400 222.563 162.709 222.698 C 165.212 222.800,166.233 222.682,166.898 222.216 C 167.382 221.877,167.569 221.600,167.313 221.600 C 167.057 221.600,166.736 221.780,166.600 222.000 M224.600 222.000 C 224.441 222.258,215.857 222.434,200.476 222.497 L 176.600 222.594 200.248 222.700 C 220.646 222.792,224.055 222.724,225.048 222.206 C 225.774 221.827,225.950 221.604,225.524 221.602 C 225.152 221.601,224.736 221.780,224.600 222.000 M233.024 222.187 C 233.564 222.596,234.855 222.778,237.276 222.787 C 239.188 222.794,240.864 222.980,241.000 223.200 C 241.136 223.420,241.451 223.600,241.700 223.600 C 241.949 223.600,241.804 223.336,241.376 223.013 C 240.836 222.604,239.545 222.422,237.124 222.413 C 235.212 222.406,233.536 222.220,233.400 222.000 C 233.264 221.780,232.949 221.600,232.700 221.600 C 232.451 221.600,232.596 221.864,233.024 222.187 M154.600 224.000 C 154.464 224.220,153.654 224.400,152.800 224.400 C 151.946 224.400,151.162 224.538,151.057 224.707 C 150.740 225.221,154.145 224.739,154.989 224.150 C 155.423 223.848,155.569 223.600,155.313 223.600 C 155.057 223.600,154.736 223.780,154.600 224.000 M245.024 224.187 C 245.451 224.510,246.464 224.780,247.276 224.787 C 248.088 224.794,248.864 224.980,249.000 225.200 C 249.136 225.420,249.451 225.600,249.700 225.600 C 249.949 225.600,249.804 225.336,249.376 225.013 C 248.949 224.690,247.936 224.420,247.124 224.413 C 246.312 224.406,245.536 224.220,245.400 224.000 C 245.264 223.780,244.949 223.600,244.700 223.600 C 244.451 223.600,244.596 223.864,245.024 224.187 M252.741 226.501 C 252.943 226.703,253.533 226.801,254.054 226.719 C 254.855 226.593,254.798 226.537,253.687 226.352 C 252.893 226.221,252.519 226.279,252.741 226.501 M144.624 227.013 C 144.196 227.336,144.025 227.600,144.244 227.600 C 144.462 227.600,144.811 227.435,145.020 227.234 C 145.229 227.032,145.850 226.787,146.400 226.688 L 147.400 226.509 146.400 226.467 C 145.850 226.444,145.051 226.690,144.624 227.013 M258.400 227.882 C 258.730 228.003,259.450 228.484,260.000 228.951 L 261.000 229.800 260.030 228.700 C 259.497 228.095,258.777 227.614,258.430 227.632 C 257.891 227.659,257.886 227.695,258.400 227.882 M392.158 228.566 C 392.038 228.878,392.005 229.643,392.084 230.266 C 392.202 231.191,392.264 231.087,392.425 229.700 C 392.627 227.951,392.538 227.575,392.158 228.566 M263.024 230.187 C 263.451 230.510,263.968 230.780,264.174 230.787 C 264.380 230.794,265.009 231.205,265.571 231.700 L 266.594 232.600 265.832 231.697 C 265.413 231.200,264.532 230.525,263.874 230.197 C 262.355 229.439,262.030 229.435,263.024 230.187 M131.000 233.600 C 130.602 234.040,130.065 234.400,129.808 234.400 C 129.550 234.400,128.903 234.895,128.370 235.500 L 127.400 236.600 128.426 235.700 C 128.990 235.205,129.634 234.800,129.856 234.800 C 130.079 234.800,130.683 234.350,131.200 233.800 C 131.717 233.250,132.046 232.800,131.932 232.800 C 131.817 232.800,131.398 233.160,131.000 233.600 M269.600 233.725 C 269.600 233.794,270.185 234.379,270.900 235.025 L 272.200 236.200 271.025 234.900 C 269.930 233.688,269.600 233.416,269.600 233.725 M120.744 241.007 C 119.283 242.433,118.189 243.600,118.312 243.600 C 118.435 243.600,119.748 242.430,121.229 241.000 C 122.710 239.570,123.805 238.403,123.661 238.407 C 123.517 238.411,122.205 239.581,120.744 241.007 M276.035 238.500 C 276.128 238.555,276.833 239.140,277.602 239.800 L 279.000 241.000 277.825 239.700 C 277.179 238.985,276.474 238.400,276.258 238.400 C 276.043 238.400,275.943 238.445,276.035 238.500 M284.374 245.500 C 286.478 247.645,288.281 249.349,288.379 249.287 C 288.591 249.154,281.125 241.600,280.782 241.600 C 280.654 241.600,282.270 243.355,284.374 245.500 M114.388 246.300 L 111.800 249.000 114.590 246.400 C 116.124 244.970,117.459 243.755,117.556 243.700 C 117.654 243.645,117.563 243.600,117.355 243.600 C 117.147 243.600,115.812 244.815,114.388 246.300 M288.400 250.351 C 288.400 250.502,289.480 251.694,290.800 253.000 C 292.120 254.306,293.200 255.578,293.200 255.825 C 293.200 256.073,293.581 256.619,294.047 257.038 C 294.513 257.457,295.042 258.160,295.222 258.600 C 295.457 259.175,295.556 259.223,295.575 258.770 C 295.589 258.423,295.150 257.717,294.600 257.200 C 294.050 256.683,293.600 256.081,293.600 255.862 C 293.600 255.643,292.430 254.252,291.000 252.771 C 289.570 251.290,288.400 250.201,288.400 250.351 M109.781 252.100 L 108.200 253.800 109.900 252.219 C 111.481 250.748,111.784 250.400,111.481 250.400 C 111.416 250.400,110.651 251.165,109.781 252.100 M107.123 254.700 C 106.374 255.572,105.858 256.935,106.405 256.597 C 106.622 256.463,106.800 256.153,106.800 255.908 C 106.800 255.663,107.098 255.134,107.462 254.731 C 107.826 254.329,108.034 254.000,107.924 254.000 C 107.814 254.000,107.453 254.315,107.123 254.700 M104.025 259.769 L 102.650 261.400 104.205 259.913 C 105.060 259.096,105.679 258.362,105.580 258.283 C 105.481 258.203,104.781 258.872,104.025 259.769 M296.300 260.429 C 296.795 260.991,297.200 261.643,297.200 261.877 C 297.200 262.111,297.465 262.522,297.789 262.791 C 298.308 263.222,298.309 263.140,297.792 262.105 C 297.470 261.458,296.800 260.587,296.303 260.168 L 295.400 259.406 296.300 260.429 M100.500 265.216 C 99.237 266.775,99.371 267.133,100.650 265.614 C 101.227 264.928,101.632 264.308,101.550 264.236 C 101.467 264.164,100.995 264.605,100.500 265.216 M298.400 264.264 C 298.400 264.482,298.895 265.097,299.500 265.630 L 300.600 266.600 299.600 265.400 C 299.050 264.740,298.555 264.125,298.500 264.033 C 298.445 263.942,298.400 264.045,298.400 264.264 M98.500 269.216 C 97.237 270.775,97.371 271.133,98.650 269.614 C 99.227 268.928,99.632 268.308,99.550 268.236 C 99.467 268.164,98.995 268.605,98.500 269.216 M96.828 272.948 C 96.549 273.469,96.408 274.234,96.514 274.647 C 96.659 275.212,96.719 275.145,96.754 274.380 C 96.779 273.819,97.013 273.147,97.273 272.887 C 97.534 272.626,97.654 272.321,97.541 272.207 C 97.427 272.094,97.107 272.427,96.828 272.948 M303.079 273.500 C 303.367 274.294,304.400 275.897,304.400 275.550 C 304.400 275.202,303.163 272.800,302.983 272.800 C 302.896 272.800,302.939 273.115,303.079 273.500 M304.400 278.287 C 304.400 278.543,304.580 278.864,304.800 279.000 C 305.020 279.136,305.229 279.912,305.264 280.724 C 305.328 282.195,305.329 282.196,305.489 280.903 C 305.584 280.136,305.395 279.243,305.025 278.714 C 304.681 278.224,304.400 278.031,304.400 278.287 M94.880 278.880 C 94.616 279.144,94.400 279.853,94.400 280.456 C 94.400 281.059,94.220 281.664,94.000 281.800 C 93.780 281.936,93.601 282.352,93.602 282.724 C 93.604 283.152,93.824 282.979,94.202 282.254 C 94.531 281.624,94.800 280.715,94.800 280.234 C 94.800 279.753,95.016 279.144,95.280 278.880 C 95.544 278.616,95.670 278.400,95.560 278.400 C 95.450 278.400,95.144 278.616,94.880 278.880 M92.885 286.813 C 92.618 287.240,92.400 288.929,92.400 290.571 C 92.400 292.211,92.220 293.664,92.000 293.800 C 91.780 293.936,91.600 294.251,91.600 294.500 C 91.600 294.749,91.864 294.604,92.187 294.176 C 92.580 293.657,92.779 292.399,92.787 290.380 C 92.795 288.605,92.995 287.165,93.273 286.887 C 93.534 286.626,93.662 286.329,93.558 286.225 C 93.455 286.121,93.152 286.386,92.885 286.813 M306.400 286.287 C 306.400 286.543,306.580 286.864,306.800 287.000 C 307.020 287.136,307.236 288.632,307.279 290.324 L 307.359 293.400 307.497 290.493 C 307.599 288.342,307.475 287.356,307.018 286.704 C 306.678 286.219,306.400 286.031,306.400 286.287 M307.264 309.220 C 307.229 310.001,306.976 310.901,306.703 311.220 C 306.424 311.546,306.524 311.518,306.932 311.156 C 307.447 310.700,307.611 310.116,307.494 309.156 L 307.328 307.800 307.264 309.220 M94.800 312.200 C 95.995 313.410,97.063 314.400,97.173 314.400 C 97.283 314.400,96.395 313.410,95.200 312.200 C 94.005 310.990,92.937 310.000,92.827 310.000 C 92.717 310.000,93.605 310.990,94.800 312.200 M303.570 313.500 L 302.600 314.600 303.800 313.600 C 304.460 313.050,305.075 312.555,305.167 312.500 C 305.258 312.445,305.155 312.400,304.936 312.400 C 304.718 312.400,304.103 312.895,303.570 313.500 M108.717 319.027 C 109.210 319.372,110.015 319.576,110.506 319.481 C 111.281 319.332,111.257 319.302,110.324 319.254 C 109.732 319.225,109.136 319.020,109.000 318.800 C 108.864 318.580,108.543 318.400,108.287 318.400 C 108.031 318.400,108.225 318.682,108.717 319.027 M284.662 319.500 C 284.560 319.665,285.314 319.747,286.338 319.683 C 289.512 319.484,289.909 319.311,287.324 319.254 C 285.962 319.225,284.764 319.335,284.662 319.500 M120.694 321.011 C 121.402 321.507,122.680 321.599,127.483 321.499 L 133.400 321.377 127.324 321.288 C 123.804 321.237,121.143 321.032,121.000 320.800 C 120.864 320.580,120.543 320.400,120.287 320.400 C 120.031 320.400,120.214 320.675,120.694 321.011 M277.000 320.800 C 276.857 321.032,274.196 321.237,270.676 321.288 L 264.600 321.377 270.517 321.499 C 275.320 321.599,276.598 321.507,277.306 321.011 C 277.786 320.675,277.969 320.400,277.713 320.400 C 277.457 320.400,277.136 320.580,277.000 320.800 M133.851 322.083 C 133.947 322.238,134.545 322.328,135.179 322.283 C 135.812 322.237,136.242 322.110,136.132 322.000 C 135.821 321.687,133.655 321.766,133.851 322.083 M238.500 390.276 C 238.885 390.376,239.515 390.376,239.900 390.276 C 240.285 390.175,239.970 390.093,239.200 390.093 C 238.430 390.093,238.115 390.175,238.500 390.276 M235.300 391.076 C 235.685 391.176,236.315 391.176,236.700 391.076 C 237.085 390.975,236.770 390.893,236.000 390.893 C 235.230 390.893,234.915 390.975,235.300 391.076 M169.233 392.143 C 169.325 392.222,170.120 392.397,171.000 392.532 C 172.090 392.699,172.409 392.655,172.000 392.395 C 171.453 392.046,168.845 391.809,169.233 392.143 M189.507 394.290 C 190.226 394.379,191.306 394.377,191.907 394.286 C 192.508 394.195,191.920 394.122,190.600 394.124 C 189.280 394.126,188.788 394.201,189.507 394.290 M194.100 394.276 C 194.485 394.376,195.115 394.376,195.500 394.276 C 195.885 394.175,195.570 394.093,194.800 394.093 C 194.030 394.093,193.715 394.175,194.100 394.276 M208.307 394.290 C 209.026 394.379,210.106 394.377,210.707 394.286 C 211.308 394.195,210.720 394.122,209.400 394.124 C 208.080 394.126,207.588 394.201,208.307 394.290 \",\n  stroke: \"none\",\n  fill: \"#686488\",\n  fillRule: \"evenodd\"\n}));\n\nvar SvgProfile = function SvgProfile(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    width: 400,\n    height: 400,\n    viewBox: \"0, 0, 400,400\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgProfile, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/profile.6e41d6fb.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport { ProfileViewer } from \"@inrupt/solid-react-components\";\nimport { useWebId } from \"@solid/react\";\nimport { Value, Link as LinkSolid } from \"@solid/react\";\nimport { Link } from \"react-router-dom\";\nimport { ReactComponent as ProfileLogo } from \"../../../img/profile.svg\";\nimport \"./Profile.css\";\n\nimport DocumentTitle from \"react-document-title\";\n\nimport { useLDflexList } from \"@solid/react\";\n\nimport * as solidAuth from \"solid-auth-client\";\nimport fileClient from \"solid-file-client\";\n\nconst fileClien = new fileClient(solidAuth, { enableLogging: true });\n\nvar routes = 0;\nvar friends = 0;\n\nexport async function RoutesLength(user) {\n    if (user != undefined && user != \"\") {\n        try {\n            const url = user.split(\"profile/card#me\")[0] + \"/private/routes3a\";\n            let folder = await fileClien.readFolder(url);\n\n            if (folder) {\n                routes = folder.folders.length;\n            }\n        }\n        catch (err) {\n            routes = 0;\n            window.location.reload();\n        }\n    }\n}\n\nconst Profile = () => {\n    const webId = useWebId();\n    friends = useLDflexList(\"user.friends\");\n    RoutesLength(webId);\n\n    return (\n        <DocumentTitle title=\"Profile\">\n            <div>\n                <h2 className=\"h2\" data-testid=\"label\" data-testid=\"titleProfile\">Profile</h2>\n                <div className=\"card\" id=\"cardProfile\">\n                    <div className=\"photo\" data-testid=\"photoProfile\">\n                        {webId && (\n                            <ProfileViewer data-testid=\"viewerProfile\"\n                                {...{\n                                    webId,\n                                    direction: \"down\",\n                                    onError: (error) => {\n                                        // eslint-disable-next-line no-console\n                                        console.log(\"ERROR\", error.statusText);\n                                    },\n                                    onClick: false\n                                }}\n                            >\n                                <ProfileLogo height=\"16vh\" width=\"16vh\" className=\"icon\" data-testid=\"logoProfile\" />\n                            </ProfileViewer>\n                        )}\n                    </div>\n                    <div className=\"info\">\n                        <div className=\"name\">\n                            <Value src=\"user.name\" data-testid=\"nameProfile\" />\n                        </div>\n                        <div className=\"user\" data-testid=\"userProfile\">Viade's user</div>\n                        <div className=\"divider\" data-testid=\"dividerProfile\"></div>\n                        <LinkSolid href={`[${webId}]`} className=\"buttonSolid\" data-testid=\"buttonSolidProfile\">Go to SOLID profile</LinkSolid>\n                    </div>\n                </div>\n                <div className=\"cardExtra\">\n                    <div className=\"cardInfoExtra\">\n                        <div className=\"infoExtra\">\n                            <div className=\"titleExtra\" data-testid=\"myFriendsProfile\">My friends</div>\n                            <div className=\"data\" data-testid=\"friendsLengthProfile\">{friends.length}</div>\n                            {/* /viade_es3a/friends */}\n                            <Link to=\"/friends\" className=\"buttonExtra\" data-testid=\"buttonFriendsProfile\">Show friends</Link>\n                        </div>\n                    </div>\n                    <div className=\"hueco\"></div>\n                    <div className=\"cardInfoExtra\">\n                        <div className=\"infoExtra\">\n                            <div className=\"titleExtra\" data-testid=\"myRoutesProfile\">My routes</div>\n                            <div className=\"data\" data-testid=\"routesLengthProfile\">{routes}</div>\n                            {/* /viade_es3a/loadRoute */}\n                            <Link to=\"/loadRoute\" className=\"buttonExtra\" data-testid=\"buttonRoutesProfile\">Show routes</Link>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n        </DocumentTitle>\n    );\n};\n\nexport default Profile;","import React from \"react\";\nimport ShowMap from \"../Map/Map\";\nimport Profile from \"./Profile\";\nimport \"./Profile.css\";\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\" data-testid=\"profilePart\">\n            <Profile />\n        </nav>\n    );\n};\n\nconst RightPanel = () => {\n    return (\n        <div className=\"rightPanel_mapa\" id=\"jeje\" data-testid=\"mapPart\">\n            <ShowMap></ShowMap>\n        </div>\n    );\n};\n\nconst ProfilePanel = () => {\n    return (\n        <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n                <LeftPanel />\n                <RightPanel />\n            </div>\n        </div>\n    );\n};\n\nexport default ProfilePanel;","import React, { useState, useEffect } from \"react\";\nimport { List, useWebId, Value, Name, Link } from \"@solid/react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./ShareRoute.css\";\nimport * as solidAuth from \"solid-auth-client\";\nimport fileClient from \"solid-file-client\";\nimport DocumentTitle from \"react-document-title\";\n\nimport * as algo from \"../Map/Map\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Slider from \"../LoadRoute/Slider\";\nimport { Loading } from \"../../../Loading\";\n\nconst auth = require(\"solid-auth-client\");\n\nconst fileClien = new fileClient(solidAuth, { enableLogging: true });\nvar urlRutas = [];\nvar cont = 0;\nvar images = [];\nvar videos = [];\nvar rut = \"\";\n\nasync function loadFile(urlCarptetaRuta, route) {\n    var k;\n    var result = [];\n    for (k = 0; k < 1000; k++) {\n        try {\n            await fileClien.readFile(urlCarptetaRuta + route + (k + 1));\n            result.push(urlCarptetaRuta + route + (k + 1));\n        } catch{\n            k = 1000;\n        }\n    }\n    rut = route;\n    return result;\n}\n\nexport async function showRoute(urlCarptetaRuta) {\n\n    let folder = await fileClien.readFolder(urlCarptetaRuta);\n\n    if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".geojson\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".geojson\");\n        algo.updateMap(ruta, folder.name, 0);\n    }\n    else if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".gpx\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".gpx\");\n        algo.updateMap(ruta, folder.name, 1);\n    }\n    else if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".kml\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".kml\");\n        algo.updateMap(ruta, folder.name, 2);\n    }\n    else{\n        toast.info(\"This file is not permited\", {\n            position: toast.POSITION.BOTTOM_LEFT,\n            autoClose: 5000\n        } );\n    }\n}\n\nasync function loadRoutes(url, setFolders) {\n\n    let folder = await fileClien.readFolder(url);\n    setFolders(folder.folders);\n}\n\n\n\nasync function ense√±aAmigos(source, target, name) {\n\n    const target2 = target.split(\"[\")[1];\n    const urlTarget = target2.split(\"profile/card#me\")[0] + \"/inbox/routes3a\";\n    const urlTargetNotifications = target2.split(\"profile/card#me\")[0] + \"/inbox/routes3a/notifications\";\n\n    let acl = await fileClien.readFile(source + \"/.acl\");\n\n    let content = \"\";\n\n    let userToAcl = target2.split(\"]\")[0];\n\n    if (!(acl + \"\").includes(userToAcl.substring(0, userToAcl.length - 2))) {\n        if (!(acl + \"\").includes(\"c0\")) {\n            content = \"@prefix : <#>.\\n\" +\n                \"@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n\" +\n                \"@prefix M: <./>.\\n\" +\n                \"@prefix c: </profile/card#>.\\n\" +\n                \"@prefix c0: <\" + userToAcl.substring(0, userToAcl.length - 2) + \">.\\n\" +\n                \":ControlReadWrite\\n\" +\n                \"a n0:Authorization;\\n\" +\n                \"n0:accessTo M:;\\n\" +\n                \"n0:agent c:me;\\n\" +\n                \"n0:default M:;\\n\" +\n                \"n0:mode n0:Control, n0:Read, n0:Write.\\n\" +\n                \":Read a n0:Authorization; \\n\" +\n                \"n0:accessTo M:; \\n\" +\n                \"n0:agent c0:me;\\n\" +\n                \"n0:default M:; \\n\" +\n                \"n0:mode n0:Read.\";\n            await fileClien.createFile(source + \"/.acl\", content, \"text/turtle\");\n        }\n        else {\n\n            var conta = 1;\n            let nuevo = \"\";\n            let nuevo2 = \"\";\n            while ((acl + \"\").includes(\"c\" + conta)) {\n                conta++;\n            }\n            nuevo = acl.split(\":ControlR\")[0] + \"@prefix c\" + conta + \": <\" + userToAcl.substring(0, userToAcl.length - 2) + \">.\\n\" + \":ControlR\" + acl.split(\":ControlR\")[1];\n            nuevo2 = nuevo.split(\"c0:me\")[0] + \"c0:me, c\" + conta + \":me\" + nuevo.split(\"c0:me\")[1];\n            await fileClien.createFile(source + \"/.acl\", nuevo2, \"text/turtle\");\n\n        }\n\n        var userso = ((await auth.currentSession()).webId).split(\"https://\")[1].split(\".\")[0];\n\n        await fileClien.postFile(urlTarget + \"/\" + name + \"->\" + userso, source, \"text/plain\");\n\n        await fileClien.postFile(urlTargetNotifications + \"/\" + name + \"->\" + userso, \"\", \"text/plain\");\n\n    }\n    else {\n        //alert(\"Your route was already shared with this person!\");\n    }\n}\n\nasync function share(setLoading) {\n    var fri = false;\n    if (rut != \"\") {\n        setLoading(true);\n        for (var i = 0; i < cont; i++) {\n            let a = document.getElementById(\"ck\" + i);\n            if (a.checked == true) {\n                fri = true;\n                await ense√±aAmigos(a.getAttribute(\"url\"), a.getAttribute(\"nombre\"), a.getAttribute(\"name\"));\n            }\n        }\n        setLoading(false);\n        if (fri) {\n            toast.info(\"Your route has been shared!\", {\n                position: toast.POSITION.BOTTOM_LEFT,\n                autoClose: 5000\n            } );\n        }\n        else {\n            toast.error(\"You have to select at least a friend!\", {\n                position: toast.POSITION.BOTTOM_LEFT,\n                autoClose: 5000\n            });\n        }\n    }\n    else {\n        toast.error(\"You have to select a route!\", {\n            position: toast.POSITION.BOTTOM_LEFT,\n            autoClose: 5000\n        });\n    }\n}\n\n\nconst LoadRoute = () => {\n\n    const [folders, setFolders] = useState([]);\n    const [selected, setSelected] = useState({\n        name: \"\",\n        description: \"\",\n        images: [],\n        videos: [],\n        url: \"\"\n    });\n\n    const [loading, setLoading] = useState(false);\n\n    var user = useWebId();\n    const webId = useWebId();\n    var coll = document.getElementsByClassName(\"collapsible\");\n    var i;\n\n    for (i = 0; i < coll.length; i++) {\n        coll[i].addEventListener(\"click\", function () {\n            this.classList.toggle(\"active\");\n            var content = this.nextElementSibling;\n            if (content.style.display === \"block\") {\n                content.style.display = \"none\";\n            } else {\n                content.style.display = \"block\";\n            }\n        });\n    }\n    useEffect(() => {\n        if (user != undefined) {\n            const url = user.split(\"profile/card#me\")[0] + \"/private/routes3a\";\n            //listRoutes(url);\n            loadRoutes(url, setFolders);\n        }\n    }, [user]);\n\n    images = [];\n    videos = [];\n    selected.images.map((image) => (\n        images.push(image)\n    ));\n    selected.videos.map((video) => (\n        videos.push(video)\n    ));\n    cont = 0;\n    return (\n        <React.Fragment>\n            <Loading loading={loading} />\n            <DocumentTitle title=\"Share routes\">\n                <div class=\"container\">\n                    <h2 data-testid=\"label\" id=\"rutas\" class=\"h2\">Share a route with your friends:</h2>\n\n                    <div className=\"listaDeRutasShare\">\n                        {\n                            folders.map((folder, i) => {\n                                var urlArchivo = \"\" + folder.url;\n                                var arrayUrl = urlArchivo.split(\"/\");\n                                urlRutas.push(urlArchivo);\n                                var nombre = arrayUrl[arrayUrl.length - 2].split(\"%20\").join(\" \");\n                                return (\n                                    <div key={\"folder_\" + i} className=\"optionShare\" id=\"optionShare\">\n                                        <a role=\"button\" class={\"lista\"} onClick={() => loadRoute(urlArchivo, setSelected, setLoading)}>\n                                            {nombre}\n                                            <span class=\"hyperspan\"></span>\n                                        </a>\n                                    </div>);\n                            })\n                        }\n                    </div>\n                    <div data-testid=\"card\" class=\"card bg-info text-white\">\n                        <div class=\"card-body\">\n                            <h4 class=\"card-title\" id=\"routeName\">{selected.name.split(\"%20\").join(\" \")}</h4>\n                            <p class=\"card-Description\" id=\"routeDescription\">{selected.description}</p>\n                            <div className=\"bodyMedia\">\n                                <Slider images={images} videos={videos} />\n                            </div>\n                            <br></br>\n                            <p className=\"prueba\">\n                                <h3 className=\"toShare\">Do you want to share it? </h3>\n                                <div className=\"listFriendsShare\">\n                                    <List src={`[${user}].friends`} className=\"list\">{(friend) =>\n                                        <li key={friend} className=\"listElement\">\n                                            <OneFriend nombre={`[${friend}]`} url={selected.url} name={selected.name}></OneFriend>\n                                        </li>}\n                                    </List>\n                                </div>\n                            </p>\n\n                        </div>\n                        <button className=\"btn btn-light\" id=\"botonin\" onClick={() => share(setLoading)}>Share</button>\n                    </div>\n                    <ToastContainer />\n                </div>\n            </DocumentTitle>\n        </React.Fragment>\n    );\n};\nasync function loadRoute(urlCarptetaRuta, setSelected, setLoading) {\n    setLoading(true);\n\n    let folder = await fileClien.readFolder(urlCarptetaRuta);\n    let folderDesc = await fileClien.readFile(urlCarptetaRuta + \"description\");\n    let images = await loadFile(urlCarptetaRuta, \"photo/img\");\n    let videos = await loadFile(urlCarptetaRuta, \"video/vid\");\n\n    await showRoute(urlCarptetaRuta);\n    setLoading(false);\n\n    setSelected({\n        name: folder.name,\n        description: folderDesc,\n        images: images,\n        videos: videos,\n        url: folder.url\n    });\n\n}\nconst OneFriend = (props) => {\n    return (\n        <div class=\"divAmigoShare\">\n            <div className=\"friendameDiv\">\n                <h5 id=\"friendName\">\n                    <Link href={props.nombre} className=\"linkNameFriend\" title=\"Go to SOLID profile\">\n                        <Name src={props.nombre}>{props.nombre}</Name>\n                    </Link>\n                </h5>\n            </div>\n            <div className=\"checkBoxShareDiv\">\n                <label className=\"custom-radio-checkbox\">\n                    {/* Input oculto */}\n                    <input className=\"custom-radio-checkbox__input\" type=\"checkbox\" id={\"ck\" + (cont++)} url={props.url} nombre={props.nombre} name={props.name} />\n                    {/* Imagen en sustitucion */}\n                    <span className=\"custom-radio-checkbox__show custom-radio-checkbox__show--checkbox\"></span>\n                </label>\n            </div>\n        </div>\n    );\n};\n\nexport default LoadRoute;\n\n","import React from \"react\";\nimport ShowMap from \"../Map/Map\";\nimport ShareRoute from \"./ShareRoute\";\nimport \"./ShareRoute.css\";\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\" data-testid=\"shareRoutePart\">\n            <ShareRoute />\n        </nav>\n    );\n};\n\nconst RightPanel = () => {\n    return (\n        <div className=\"rightPanel_mapa\" id=\"jeje\" data-testid=\"mapPart\">\n            <ShowMap></ShowMap>\n        </div>\n    );\n};\n\nconst ShareRoutePanel = () => {\n    return (\n        <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n                <LeftPanel />\n                <RightPanel />\n            </div>\n        </div>\n    );\n};\n\nexport default ShareRoutePanel;","import React, { useState, useEffect } from \"react\";\nimport { useWebId } from \"@solid/react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Card, Button } from \"react-bootstrap\";\nimport \"../LoadRoute/LoadRoute.css\";\nimport * as solidAuth from \"solid-auth-client\";\nimport fileClient from \"solid-file-client\";\nimport DocumentTitle from \"react-document-title\";\nimport * as algo from \"../Map/Map\";\nimport Slider from \"../LoadRoute/Slider\";\nimport { Loading } from \"../../../Loading\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst fileClien = new fileClient(solidAuth, { enableLogging: true });\n\n\nvar urlRutas = [];\n\nvar images = [];\nvar videos = [];\n\nexport async function showRoute(urlCarptetaRuta) {\n\n    let folder = await fileClien.readFolder(urlCarptetaRuta);\n\n    if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".geojson\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".geojson\");\n        algo.updateMap(ruta, folder.name, 0);\n    }\n    else if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".gpx\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".gpx\");\n        algo.updateMap(ruta, folder.name, 1);\n    }\n    else if( await fileClien.itemExists(urlCarptetaRuta + folder.name + \".kml\")) {\n        let ruta = await fileClien.readFile(urlCarptetaRuta + folder.name + \".kml\");\n        algo.updateMap(ruta, folder.name, 2);\n    }\n    else{\n        toast.error(\"This file is not permited\", {\n            position: toast.POSITION.BOTTOM_LEFT\n        });\n    }\n\n}\n\nasync function loadRoutes(url, setFolders) {\n\n    let folder = await fileClien.readFolder(url);\n    var result = [];\n\n    for (var i = 0; i < folder.files.length; i += 1) {\n        try {\n            let f = await fileClien.readFile(folder.files[i].url);\n\n            let otro = await fileClien.readFolder(f);\n            result.push(otro);\n        }\n        catch (error) {\n            await fileClien.deleteFile(folder.files[i].url);\n        }\n    }\n\n    setFolders(result);\n}\n\nasync function loadFile(urlCarptetaRuta, route) {\n    var k;\n    var result = [];\n    for (k = 0; k < 1000; k++) {\n        try {\n            await fileClien.readFile(urlCarptetaRuta + route + (k + 1));\n            result.push(urlCarptetaRuta + route + (k + 1));\n        } catch{\n            k = 1000;\n        }\n    }\n    return result;\n}\n\n\n\nconst SharedRoutes = () => {\n\n    const [folders, setFolders] = useState([]);\n    const [selected, setSelected] = useState({\n        name: \"\",\n        description: \"\",\n        images: [],\n        videos: []\n    });\n    const [loading, setLoading] = useState(false);\n    var images = [];\n    var videos = [];\n\n    var user = useWebId();\n    \n\n    useEffect(() => {\n        if (user != undefined) {\n            const url = user.split(\"profile/card#me\")[0] + \"inbox/routes3a\";\n            //listRoutes(url);\n            loadRoutes(url, setFolders);\n        }\n    }, [user]);\n    selected.images.map((image) => (\n        images.push(image)\n    ));\n    selected.videos.map((video) => (\n        videos.push(video)\n    ));\n    return (\n        <React.Fragment>\n            <Loading loading={loading} />\n        <DocumentTitle title=\"Friend's routes\">\n            <div class=\"container\">\n                <h2 data-testid=\"label\" id=\"rutas\" class=\"h2\" data-testid=\"label\">Routes from your friends:</h2>\n\n                <div className=\"listaDeRutas\">\n                    {\n                        folders.map((folder, i) => {\n                            var urlArchivo = \"\" + folder.url;\n                            var arrayUrl = urlArchivo.split(\"/\");\n                            urlRutas.push(urlArchivo);\n                            var nombre = arrayUrl[arrayUrl.length - 2].split(\"%20\").join(\" \");\n                            return (\n                                <div key={\"folder_\" + i} className=\"optionRoute\" id=\"optionRoute\">\n                                    <a role=\"button\" class={\"lista\"} onClick={() => loadRoute(urlArchivo, setSelected,setLoading)} id=\"enlaceLoadRoute\">\n                                        {nombre}\n                                        <span class=\"hyperspan\"></span>\n                                    </a>\n                                </div>);\n                        })\n                    }\n                </div>\n                <div data-testid=\"card\" class=\"card bg-info text-white\" data-testid=\"card\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\" id=\"routeName\">{selected.name.split(\"%20\").join(\" \")}</h4>\n                        <p class=\"card-Description\" id=\"routeDescription\">{selected.description}</p>\n                        <div className=\"bodyMedia\">\n                            <Slider images={images} videos={videos} />\n                        </div>\n                    </div>\n                </div>\n                <ToastContainer />\n            </div>\n        </DocumentTitle>\n        </React.Fragment>\n\n\n    );\n};\nasync function loadRoute(urlCarptetaRuta, setSelected,setLoading) {\n    setLoading(true);\n    let folder = await fileClien.readFolder(urlCarptetaRuta);\n\n    let folderDesc = await fileClien.readFile(urlCarptetaRuta + \"description\");\n    let images = await loadFile(urlCarptetaRuta, \"photo/img\");\n    let videos = await loadFile(urlCarptetaRuta, \"video/vid\");\n\n    await showRoute(urlCarptetaRuta);\n    setLoading(false);\n\n    setSelected({\n        name: folder.name,\n        description: folderDesc,\n        images: images,\n        videos: videos\n    });\n\n}\n\nexport default SharedRoutes;","import React from \"react\";\nimport ShowMap from \"../Map/Map\";\nimport SharedRoutes from \"./SharedRoutes\";\nimport \"../LoadRoute/LoadRoute.css\";\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\" data-testid=\"sharedRoutePart\">\n            <SharedRoutes />\n        </nav>\n    );\n};\n\nconst RightPanel = () => {\n    return (\n        <div className=\"rightPanel_mapa\" id=\"jeje\" data-testid=\"mapPart\">\n            <ShowMap></ShowMap>\n        </div>\n    );\n};\n\nconst SharedRoutesPanel = () => {\n    return (\n        <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n                <LeftPanel />\n                <RightPanel />\n            </div>\n        </div>\n    );\n};\n\nexport default SharedRoutesPanel;","\nimport { useWebId, Value, Name, Link } from \"@solid/react\";\nimport \"./Notifications.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport DocumentTitle from \"react-document-title\";\nimport fileClient from \"solid-file-client\";\nimport React, { useState, useEffect } from \"react\";\nimport * as solidAuth from \"solid-auth-client\";\nimport { Toast } from \"react-bootstrap\";\nconst fileClien = new fileClient(solidAuth, { enableLogging: true });\n\nasync function loadRoutes(url, setFolders) {\n\n    let folder = await fileClien.readFolder(url);\n    var result = [];\n\n    for (var i = 0; i < folder.files.length; i += 1) {\n        result.push(folder.files[i].url);\n    }\n    for (var i = 0; i < folder.files.length; i += 1) {\n        await fileClien.deleteFile(folder.files[i].url);\n        //console.log(folder.files[i].url);\n    }\n    setFolders(result);\n}\n\nconst Notifications = () => {\n\n    const [folders, setFolders] = useState([]);\n    const [show, setShow] = useState(true);\n    var user = useWebId();\n\n    useEffect(() => {\n        if (user != undefined) {\n            const url = user.split(\"profile/card#me\")[0] + \"inbox/routes3a/notifications\";\n            loadRoutes(url, setFolders);\n        }\n    }, [user]);\n    return (\n\n        <DocumentTitle title=\"Notifications\">\n            <div class=\"container\">\n                <h2 className=\"h2\" data-testId=\"welcome\">Your notifications, <Value src=\"user.name\" /> </h2>\n\n                <ul className=\"list\" padding-inline-start=\"0\">\n                    {\n                        folders.map((folder, i) => {\n                            var arrayUrl = folder.split(\"/\")[folder.split(\"/\").length - 1];\n                            var userShare = arrayUrl.split(\".\")[0];\n                            var nombre = userShare.split(\"-%3E\")[0].split(\"%20\").join(\" \");\n                            var who = userShare.split(\"-%3E\")[1];\n                            return (<Toast>\n                                <Toast.Header closeButton={false}>\n                                    <strong class=\"mr-auto text-info\">{who}</strong>\n                                    <small></small>\n                                </Toast.Header>\n                                <Toast.Body>{who} has shared the route {nombre} with you.</Toast.Body>\n                            </Toast>);\n                        })\n                    }\n                </ul>\n            </div>\n        </DocumentTitle>\n    );\n};\n\nexport default Notifications;\n","import React from \"react\";\nimport ShowMap from \"../Map/Map\";\nimport Notifications from \"./Notifications\";\nimport \"./Notifications.css\";\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\" data-testid=\"notificationsRoutePart\">\n            <Notifications />\n        </nav>\n    );\n};\n\nconst RightPanel = () => {\n    return (\n        <div className=\"rightPanel_mapa\" id=\"jeje\" data-testid=\"mapPart\">\n            <ShowMap></ShowMap>\n        </div>\n    );\n};\n\nconst NotificationsPanel = () => {\n    return (\n        <div className=\"leftPanel_leftPart\">\n            <div className=\"leftPanel\">\n                <LeftPanel />\n                <RightPanel />\n            </div>\n        </div>\n    );\n};\n\nexport default NotificationsPanel;","import React from \"react\";\nimport \"./Panel.css\";\nimport styled from \"styled-components\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport AddRoutePanel from \"./AddRoute/AddRoutePanel\";\nimport LoadRoutePanel from \"./LoadRoute/LoadRoutePanel\";\nimport CreateRoutePanel from \"./CreateRoute/CreateRoutePanel\";\nimport WelcomePanel from \"./Welcome/WelcomePanel\";\nimport FriendsPanel from \"./Friends/FriendsPanel\";\nimport ProfilePanel from \"./Profile/ProfilePanel\";\nimport ShareRoutePanel from \"./ShareRoute/ShareRoutePanel\";\nimport SharedRoutesPanel from \"./SharedRoutes/SharedRoutesPanel\";\nimport NotificationsPanel from \"./Notifications/NotificationsPanel\";\n\n\nconst AppWrapper = styled.div`\ndisplay: flex;\njustify-content:center;\nmargin-top:100px;\n`;\n\nconst Container = styled.div`\n`;\n\nconst LeftPanel = () => {\n    return (\n        <nav className=\"leftPanel_leftPart\">\n            <Switch>\n                <div>\n                    <Route exact path=\"/viade_es3a/\" component={WelcomePanel} />\n                    <Route path=\"/\" component={WelcomePanel} />\n                    <Route path=\"/addRoute\" component={AddRoutePanel} />\n                    <Route path=\"/createRoute\" component={CreateRoutePanel} />\n                    <Route path=\"/loadRoute\" component={LoadRoutePanel} />\n                    <Route path=\"/shareRoute\" component={ShareRoutePanel} />\n                    <Route path=\"/sharedRoutes\" component={SharedRoutesPanel} />\n                    <Route path=\"/friends\" component={FriendsPanel} />\n                    <Route path=\"/profile\" component={ProfilePanel} />\n                    <Route path=\"/notifications\" component={NotificationsPanel} />\n                </div>\n            </Switch>\n        </nav>\n    );\n};\n\nconst Panel = () => {\n    return (\n        <div className=\"panelCompleto\">\n            {/* Panel izquierdo */}\n            <section className=\"leftPanel\">\n                <LeftPanel />\n            </section>\n        </div>\n    );\n};\n\nexport default Panel;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NavBar from \"./NavBar/NavBar\";\nimport Panel from \"./Panel/Panel\";\n\nimport * as solidAuth from \"solid-auth-client\";\nimport fileClient from \"solid-file-client\";\nimport { useWebId } from \"@solid/react\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { AccessControlList, AppPermission } from '@inrupt/solid-react-components';\n\nconst fileClien = new fileClient(solidAuth, { enableLogging: true });\nconst auth = require(\"solid-auth-client\");\n\nconst checkAppPermissions = (userAppPermissions, appPermissions) =>\n  appPermissions.every(permission => userAppPermissions.includes(permission));\n\nconst checkSpecificAppPermission = async (webId, permission) => {\n  const userAppPermissions = await AppPermission.checkPermissions(webId);\n  return userAppPermissions.permissions.includes(permission);\n};\n\nconst checkPermissions = async (webId, errorMessage) => {\n  /**\n   * Get permissions from trustedApp.\n   */\n  const userApp = await AppPermission.checkPermissions(webId);\n\n  /**\n   * Get modes permissions from solid-react-components\n   */\n  const permissions = AccessControlList.MODES;\n  const { APPEND, READ, WRITE, CONTROL } = permissions;\n\n  // If we are missing permissions that the app requires, display an error message with a Learn More link\n  if (\n    userApp === null ||\n    userApp.permissions === null ||\n    !checkAppPermissions(userApp.permissions, [APPEND, READ, WRITE, CONTROL])\n  ) {\n\n    toast.error(\"You must have control permissions enabled to use all the features of the app\", {\n      position: toast.POSITION.TOP_CENTER,\n      closeOnClick: false\n    });\n    \n  }\n};\n\nasync function creates() {\n  var user = await auth.currentSession();\n\n  checkPermissions(user.webId);\n\n  const folderP = user.webId.split(\"profile/card#me\")[0] + \"private/routes3a\";\n  const folderI = user.webId.split(\"profile/card#me\")[0] + \"inbox/routes3a\";\n  const folderN = user.webId.split(\"profile/card#me\")[0] + \"inbox/routes3a/notifications\";\n\n  var existeP = await fileClien.itemExists(folderP);\n  var existeI = await fileClien.itemExists(folderI);\n  if (!existeP) {\n    await fileClien.createFolder(folderP);\n  }\n\n  if (!existeI) {\n    await fileClien.createFolder(folderI);\n\n    let content = \"@prefix : <#>.\\n\" +\n      \"@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n\" +\n      \"@prefix rou: <./>.\\n\" +\n      \"@prefix n1: <http://xmlns.com/foaf/0.1/>.\\n\" +\n      \"@prefix c: </profile/card#>.\\n\" +\n      \"\\n\" +\n      \":AppendRead\\n\" +\n      \"a n0:Authorization;\\n\" +\n      \"n0:accessTo rou:;\\n\" +\n      \"n0:agentClass n1:Agent;\\n\" +\n      \"n0:default rou:;\\n\" +\n      \"n0:mode n0:Append, n0:Read.\\n\" +\n      \":ControlReadWrite\\n\" +\n      \"a n0:Authorization;\\n\" +\n      \"n0:accessTo rou:;\\n\" +\n      \"n0:agent c:me;\\n\" +\n      \"n0:default rou:;\\n\" +\n      \"n0:mode n0:Control, n0:Read, n0:Write.\";\n\n    await fileClien.createFile(folderI + \"/.acl\", content, \"text/turtle\");\n\n    await fileClien.createFolder(folderN);\n  }\n}\n\n\nconst MainPage = () => {\n  creates();\n  return (\n    <div>\n        \n        <NavBar />\n        <Panel />\n        <ToastContainer autoClose={false}/>\n    </div>\n  );\n};\n\nexport default MainPage;","import React from \"react\";\nimport { LoggedIn, LoggedOut } from \"@solid/react\";\nimport styled from \"styled-components\";\nimport SolidImg from \"./logo.svg\";\nimport { ProviderLogin, LogoutButton } from \"@inrupt/solid-react-components\";\nimport MainPage from \"./MainPage/Main-page\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\nimport DocumentTitle from \"react-document-title\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  align-items: center;\n  width: 100%;\n  background-color: #18EEE9;\n  box-sizing: content-box;  \n  height: 100vh;\n`;\n\nconst DemoWrapper = styled.div`\n  box-shadow: 0px 20px 20px 0.5px rgba(0, 0, 0, 0.5);\n  border-radius: 15px;\n  padding: 2rem 4rem;\n  margin-top: auto;\n  margin-bottom:auto;\n  width: 100%;\n  max-width: 35rem;\n  background-color: #667B77;\n`;\n\n\nconst HeaderWrapper = styled.section`\n  text-align: center;\n  width: 100%;\n`;\n\nconst Headline = styled.h1`\n  color: #18EEE9;\n  font-family: Arial, Helvetica, sans-serif;\n  text-shadow: 0.1em 0.1em 0.05em #000000;\n  font-weight: bold;\n  font-size: 38px;\n`;\n\nconst Title = styled.h1`\n  color: #18EEE9;\n  font-family: Arial, Helvetica, sans-serif;\n  text-shadow: 0.1em 0.1em 0.05em #000000;\n  font-weight: bold;\n  font-size: 38px;\n  margin-bottom: 3rem;\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  align-items: center;\n`;\n\n\nconst Header = () => {\n    return (\n        <HeaderWrapper>\n            <img src={SolidImg}\n                alt=\"React logo\"\n                width=\"120\" />\n            <Headline>VIADE ES3A</Headline>\n        </HeaderWrapper>\n    );\n};\n\nconst Init = () => {\n    return (\n        <Title>ROUTE MANAGER</Title>\n    );\n};\n\nconst App = () => {\n\n    return (\n\n        <AppWrapper>\n            <DemoWrapper>\n                <DocumentTitle title='VIADE ES3A' />\n                <Init />\n                <LoggedOut>\n                    <Header />\n                    <ProviderLogin callbackUri={\n                        `${\n                        window.location.origin\n                        }/viade_es3a/`\n                    } />\n                    <div class=\"alert alert-info\" role=\"alert\">\n                        Make sure to give Control permission in the Solid web!\n                    </div>\n                </LoggedOut>\n                <LoggedIn>\n                    <Router>\n                        <MainPage />\n                    </Router>\n                    <LogoutButton />\n                </LoggedIn>\n\n\n\n            </DemoWrapper>\n        </AppWrapper>\n    );\n};\n\nexport default App;\n// <AuthButton popup='https://solid.github.io/solid-auth-client/dist/popup.html' login=\"Login here!\" logout=\"Log me out\"/> Por si fuese necesario\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}